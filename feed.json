{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hoanh An",
    "home_page_url": "https://hoanhan101.github.io/",
    "feed_url": "https://hoanhan101.github.io/feed.json",
    "description": "Hoanh An's personal website",
    "icon": "https://hoanhan101.github.io/apple-touch-icon.png",
    "favicon": "https://hoanhan101.github.io/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Hoanh An",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://hoanhan101.github.io/database-normalization",
            "title": "Step by Step Database Normalization",
            "summary": null,
            "content_text": "DefinitionsDatabase normalization is the process of structuring a relational database with a series of Normal Forms (NF) in order to:  Reduce data redundancy, eliminate useless data.  Improve data integrity, make sure data is logically stored, ensure its dependencies make sense.Normal FormsThere are at least 6 NFs, ranging for 1NF to 6NF, and couple of other forms in between. Informally, a relational database is often considered “normalized” if it meets 3NF.Example walkthroughAssume our initial table look like this:| book_id | title            | author    | author_nationality | format    | price | subject         | pages | publisher | publisher_country || ------- | ---------------- | --------- | ------------------ | --------- | ----- | --------------- | ----- | --------- | ----------------- || 1       | Understand SQL   | John Doe  | Canada             | E-book    | 10    | SQL, Database   | 200   | Amazon    | US                || 2       | Understand SQL   | John Doe  | US                 | Paperback | 30    | SQL, Database   | 200   | Amazon    | US                || 3       | Understand NoSQL | John Snow | US                 | Paperback | 35    | NoSQL, Database | 200   | Amazon    | US                |First Normal Form (1NF)To satisfy 1NF, the values in each column of a table must be atomic or must not contain repeating groups of data.In our table, subject contains multiple values which mean it doesn’t comply. To fix it, we can separate them into a single table:| subject_id | subject  || ---------- | -------- || 1          | SQL      || 2          | NoSQL    || 3          | Database || book_id | subject_id || ------- | ---------- || 1       | 1          || 1       | 3          || 2       | 1          || 2       | 3          || 3       | 2          || 3       | 3          |Second Normal Form (2NF)To satisfy 2NF, no field should only be partially dependent on any candidate key in the table.In our table, price depends on format. To fix it, we can separate them into a single table:| book_id | format     | price || ------- | ---------- | ----- || 1       | E-book     | 10    || 2       | Paperback  | 30    || 3       | Paperback  | 35    |Third Normal Form (3NF)To satisfy 3NF, columns should depend only upon the primary key of the table. It means that any column that is not related to the primary should be moved out, and potentially into its own table.That said, we can move author, author_nationality into a table, publisher and publisher_country into a table as well. This results in our final version as follow:| book_id | title            | pages | | ------- | ---------------- | ----- || 1       | Understand SQL   | 200   || 2       | Understand SQL   | 200   || 3       | Understand NoSQL | 200   || book_id | author_id | | ------- | --------- || 1       | 1         | | 2       | 1         || 3       | 2         || author_id | name      | nationality || --------- | --------- | ----------- || 1         | John Doe  | Canada      || 2         | John Snow | US          || book_id | publisher_id || ------- | ------------ || 1       | 1            || 2       | 1            || 3       | 1            || publisher_id | name   | country || ------------ | ------ | ------- || 1            | Amazon | US      || book_id | format     | price || ------- | ---------- | ----- || 1       | E-book     | 10    || 2       | Paperback  | 30    || 3       | Paperback  | 35    || book_id | subject_id || ------- | ---------- || 1       | 1          || 1       | 3          || 2       | 1          || 2       | 3          || 3       | 2          || 3       | 3          || subject_id | subject  || ---------- | -------- || 1          | SQL      || 2          | NoSQL    || 3          | Database |ConclusionEven though normalization is a design goal, it’s not always practical. As we can see from the example above, before normalizing it, it has more readability and usability in a sense that it’s easier for us to view and query all the data with simple commands. After normalizing it, querying the same things requires JOIN queries, which can sometimes result in performance hit. That said, it really depends on our unique use cases to make trade-off among scalability, readability, and performance.References:  https://www.dreamincode.net/forums/topic/179103-relational-database-design-normalization/  https://en.wikipedia.org/wiki/Database_normalization",
            "content_html": "<h2 id=\"definitions\">Definitions</h2><p>Database normalization is the process of structuring a relational database with a series of Normal Forms (NF) in order to:</p><ul>  <li>Reduce data redundancy, eliminate useless data.</li>  <li>Improve data integrity, make sure data is logically stored, ensure its dependencies make sense.</li></ul><h2 id=\"normal-forms\">Normal Forms</h2><p>There are at least 6 NFs, ranging for 1NF to 6NF, and couple of other forms in between. Informally, a relational database is often considered “normalized” if it meets 3NF.</p><h2 id=\"example-walkthrough\">Example walkthrough</h2><p>Assume our initial table look like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>| book_id | title            | author    | author_nationality | format    | price | subject         | pages | publisher | publisher_country || ------- | ---------------- | --------- | ------------------ | --------- | ----- | --------------- | ----- | --------- | ----------------- || 1       | Understand SQL   | John Doe  | Canada             | E-book    | 10    | SQL, Database   | 200   | Amazon    | US                || 2       | Understand SQL   | John Doe  | US                 | Paperback | 30    | SQL, Database   | 200   | Amazon    | US                || 3       | Understand NoSQL | John Snow | US                 | Paperback | 35    | NoSQL, Database | 200   | Amazon    | US                |</code></pre></div></div><h3 id=\"first-normal-form-1nf\">First Normal Form (1NF)</h3><p>To satisfy 1NF, the values in each column of a table must be atomic or must not contain repeating groups of data.</p><p>In our table, <code class=\"highlighter-rouge\">subject</code> contains multiple values which mean it doesn’t comply. To fix it, we can separate them into a single table:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>| subject_id | subject  || ---------- | -------- || 1          | SQL      || 2          | NoSQL    || 3          | Database || book_id | subject_id || ------- | ---------- || 1       | 1          || 1       | 3          || 2       | 1          || 2       | 3          || 3       | 2          || 3       | 3          |</code></pre></div></div><h3 id=\"second-normal-form-2nf\">Second Normal Form (2NF)</h3><p>To satisfy 2NF, no field should only be partially dependent on any candidate key in the table.</p><p>In our table, <code class=\"highlighter-rouge\">price</code> depends on <code class=\"highlighter-rouge\">format</code>. To fix it, we can separate them into a single table:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>| book_id | format     | price || ------- | ---------- | ----- || 1       | E-book     | 10    || 2       | Paperback  | 30    || 3       | Paperback  | 35    |</code></pre></div></div><h3 id=\"third-normal-form-3nf\">Third Normal Form (3NF)</h3><p>To satisfy 3NF, columns should depend only upon the primary key of the table. It means that any column that is not related to the primary should be moved out, and potentially into its own table.</p><p>That said, we can move <code class=\"highlighter-rouge\">author</code>, <code class=\"highlighter-rouge\">author_nationality</code> into a table, <code class=\"highlighter-rouge\">publisher</code> and <code class=\"highlighter-rouge\">publisher_country</code> into a table as well. This results in our final version as follow:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>| book_id | title            | pages | | ------- | ---------------- | ----- || 1       | Understand SQL   | 200   || 2       | Understand SQL   | 200   || 3       | Understand NoSQL | 200   || book_id | author_id | | ------- | --------- || 1       | 1         | | 2       | 1         || 3       | 2         || author_id | name      | nationality || --------- | --------- | ----------- || 1         | John Doe  | Canada      || 2         | John Snow | US          || book_id | publisher_id || ------- | ------------ || 1       | 1            || 2       | 1            || 3       | 1            || publisher_id | name   | country || ------------ | ------ | ------- || 1            | Amazon | US      || book_id | format     | price || ------- | ---------- | ----- || 1       | E-book     | 10    || 2       | Paperback  | 30    || 3       | Paperback  | 35    || book_id | subject_id || ------- | ---------- || 1       | 1          || 1       | 3          || 2       | 1          || 2       | 3          || 3       | 2          || 3       | 3          || subject_id | subject  || ---------- | -------- || 1          | SQL      || 2          | NoSQL    || 3          | Database |</code></pre></div></div><h2 id=\"conclusion\">Conclusion</h2><p>Even though normalization is a design goal, it’s not always practical. As we can see from the example above, before normalizing it, it has more readability and usability in a sense that it’s easier for us to view and query all the data with simple commands. After normalizing it, querying the same things requires JOIN queries, which can sometimes result in performance hit. That said, it really depends on our unique use cases to make trade-off among scalability, readability, and performance.</p><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.dreamincode.net/forums/topic/179103-relational-database-design-normalization/\">https://www.dreamincode.net/forums/topic/179103-relational-database-design-normalization/</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/Database_normalization\">https://en.wikipedia.org/wiki/Database_normalization</a></li></ul>",
            "url": "https://hoanhan101.github.io/database-normalization",
            
            
            
            "tags": ["architecture","database","normalization"],
            
            "date_published": "2020-11-22T00:00:00-05:00",
            "date_modified": "2020-11-22T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/competing-against-luck",
            "title": "Competing Against Luck by Clayton Christensen",
            "summary": null,
            "content_text": " Table of Contents   Correlation is not the same as causality  Introducing Job Theory          Job insights are more like stories and statistics        Applying Job Theory          5 ways to search for unresolved jobs      Social and emotional dimensions are just important as functional dimensions      What customers hire is equally important as what they fire      Customers might not be able to tell you what they want but can tell you about their struggles      Once you figure out the job function, you want to create the desired experience      Correlation is not the same as causalityThe masses of data that companies accumulated are not organized in a way that enables them to predictwhich ideas will succeed. For examples, your height, age, shoe size, shopping habits,… don’tnecessarily cause you to buy this or that product. There might be a correlation between some ofcollected characteristics and the tendency of customers who purchase the same product. However, they don’tcause you to go and buy them.Introducing Job TheoryInstead of trying to find patterns and cross-references in the data sets of a product, it’s better tofigure out what its job function actually is. Essentially, when we buy a product, we hire it to geta job done in a specific circumstance or to make the progress we were struggling to achieve. For example,some people use Netflix because they want to be entertained, some use it to kill time, some use itfor educational purposes. Depending on the context and their unique circumstances, they hire Netflixto do different jobs which might not match what Netflix creators make it to do.That said, a job is defined as the progress that one is trying to make in a particular circumstance(where you at, when it is, what you are doing, who you are with, and so on). However, not only does a job hasfunctional dimensions (what it does), it also has social and emotional dimensions. For example, the jobfunction could be to hire childcare because of your busy schedule, the emotional dimensions then dependon who will you trust with your children.Job insights are more like stories and statisticsOne helpful way to grasp a job function is to go through this list of questions:  What progress is the person trying to achieve? What are the functional, social, emotional dimensions?  What are the circumstances? Who, when, where, while doing what?  What obstacles are getting in the way?  What have they tried so far? Are they use a workaround?  What would a better solution mean for them? At what trade-offs?Applying Job Theory5 ways to search for unresolved jobs  Look for jobs in your personal life: What are you struggling with?  Find opportunity in people who are not hiring any product. This mean they can’t find a solution that work for them so they give up.  Pay attention to people to create their own solutions, workarounds.  Look for what people don’t want to do because they feel frustrating about the process or something.  Spot unusual uses that are different from what your company has envisioned.Social and emotional dimensions are just important as functional dimensionsSometimes, faster, more features, more colors,… are not what customers want, but the ease of using might. Let’s takeP&amp;G’s example when they introduced diapers to China. They already knew how to sell to Western customersand assumed that if the diaper were affordable enough in developing country like China, it could be sold easily.However, it did not take off. After years of research, they realized that they focused too much on the functional aspectwithout taking into account the social and emotional dimensions of customer’s struggle. They found that babies whowore diapers fell asleep 30% faster and slept longer every night. Not only better sleep improves children’s cognitivedevelopment, because the babies had slept, parents could also have more time to rest and sleep as well. Using thisfinding explicitly in the ads and launch eventually made P&amp;G a top-selling brand in China.What customers hire is equally important as what they fireThe moment customers buy the product is equally important as the moment they actually consume it.There are 2 main forces that battle in their mind:  Habits of the present: “I’m used to doing it this way”, “I don’t love it but I’m comfortable with how I deal with it now”  Anxiety of choosing something new: “What if it’s not better?”Customers might not be able to tell you what they want but can tell you about their strugglesBefore launching, Airbnb storyboarded 45 different emotional moments for their hosts and guests in details.They tried to look for surprises, unexpected behavior, unusual product uses, product limitations, and so onbecause those were incredibly important to develop a more attractive product.  “One of the critical storyboard moments, for example, is the first Little Hire moment for guests-when they first turn up at the home in which they’ll stay. How are they greeted? If they’re expecting a place that has been described as relaxing, is that evident? Maybe there should be soft music playing or a scented candle, says Airbnb’s Chip Conley. Has the host made them feel at ease with their decision? Has the host made clear how they will solve any issues or problems that arise during the stay? And so on. The experience must match the customers’ vision of what they hired Airbnb to do. The Airbnb storyboards—which have been constantly tweaked and improved since its founding—reflect the importance of the combination of pushes and pulls that drive their customers’ Big Hires and Little Hires.”Once you figure out the job function, you want to create the desired experienceIf you can successfully nail the job, you can transform your company’s brand into a purpose branch such that customers automatically associate with your solutions:  IKEA: finish my apartment today  FedEx: send my documents fast  Apple: assure technology is easy to used and elegantly designed  Google: search anything immediatelyReferences:  https://www.goodreads.com/book/show/28820024-competing-against-luck",
            "content_html": "<h2> Table of Contents </h2><ul id=\"markdown-toc\">  <li><a href=\"#correlation-is-not-the-same-as-causality\" id=\"markdown-toc-correlation-is-not-the-same-as-causality\">Correlation is not the same as causality</a></li>  <li><a href=\"#introducing-job-theory\" id=\"markdown-toc-introducing-job-theory\">Introducing Job Theory</a>    <ul>      <li><a href=\"#job-insights-are-more-like-stories-and-statistics\" id=\"markdown-toc-job-insights-are-more-like-stories-and-statistics\">Job insights are more like stories and statistics</a></li>    </ul>  </li>  <li><a href=\"#applying-job-theory\" id=\"markdown-toc-applying-job-theory\">Applying Job Theory</a>    <ul>      <li><a href=\"#5-ways-to-search-for-unresolved-jobs\" id=\"markdown-toc-5-ways-to-search-for-unresolved-jobs\">5 ways to search for unresolved jobs</a></li>      <li><a href=\"#social-and-emotional-dimensions-are-just-important-as-functional-dimensions\" id=\"markdown-toc-social-and-emotional-dimensions-are-just-important-as-functional-dimensions\">Social and emotional dimensions are just important as functional dimensions</a></li>      <li><a href=\"#what-customers-hire-is-equally-important-as-what-they-fire\" id=\"markdown-toc-what-customers-hire-is-equally-important-as-what-they-fire\">What customers hire is equally important as what they fire</a></li>      <li><a href=\"#customers-might-not-be-able-to-tell-you-what-they-want-but-can-tell-you-about-their-struggles\" id=\"markdown-toc-customers-might-not-be-able-to-tell-you-what-they-want-but-can-tell-you-about-their-struggles\">Customers might not be able to tell you what they want but can tell you about their struggles</a></li>      <li><a href=\"#once-you-figure-out-the-job-function-you-want-to-create-the-desired-experience\" id=\"markdown-toc-once-you-figure-out-the-job-function-you-want-to-create-the-desired-experience\">Once you figure out the job function, you want to create the desired experience</a></li>    </ul>  </li></ul><hr /><h2 id=\"correlation-is-not-the-same-as-causality\">Correlation is not the same as causality</h2><p>The masses of data that companies accumulated are not organized in a way that enables them to predictwhich ideas will succeed. For examples, your height, age, shoe size, shopping habits,… <strong>don’tnecessarily cause</strong> you to buy this or that product. There might be a correlation between some ofcollected characteristics and the tendency of customers who purchase the same product. However, they don’tcause you to go and buy them.</p><h2 id=\"introducing-job-theory\">Introducing Job Theory</h2><p>Instead of trying to find patterns and cross-references in the data sets of a product, it’s better tofigure out what its job function actually is. Essentially, when we buy a product, we hire it to geta job done in a specific circumstance or to make the progress we were struggling to achieve. For example,some people use Netflix because they want to be entertained, some use it to kill time, some use itfor educational purposes. Depending on the context and their unique circumstances, they hire Netflixto do different jobs which might not match what Netflix creators make it to do.</p><p>That said, a job is defined as the progress that one is trying to make in a particular circumstance(where you at, when it is, what you are doing, who you are with, and so on). However, not only does a job hasfunctional dimensions (what it does), it also has social and emotional dimensions. For example, the jobfunction could be to hire childcare because of your busy schedule, the emotional dimensions then dependon who will you trust with your children.</p><h3 id=\"job-insights-are-more-like-stories-and-statistics\">Job insights are more like stories and statistics</h3><p>One helpful way to grasp a job function is to go through this list of questions:</p><ul>  <li>What progress is the person trying to achieve? What are the functional, social, emotional dimensions?</li>  <li>What are the circumstances? Who, when, where, while doing what?</li>  <li>What obstacles are getting in the way?</li>  <li>What have they tried so far? Are they use a workaround?</li>  <li>What would a better solution mean for them? At what trade-offs?</li></ul><h2 id=\"applying-job-theory\">Applying Job Theory</h2><h3 id=\"5-ways-to-search-for-unresolved-jobs\">5 ways to search for unresolved jobs</h3><ul>  <li>Look for jobs in your personal life: What are you struggling with?</li>  <li>Find opportunity in people who are not hiring any product. This mean they can’t find a solution that work for them so they give up.</li>  <li>Pay attention to people to create their own solutions, workarounds.</li>  <li>Look for what people don’t want to do because they feel frustrating about the process or something.</li>  <li>Spot unusual uses that are different from what your company has envisioned.</li></ul><h3 id=\"social-and-emotional-dimensions-are-just-important-as-functional-dimensions\">Social and emotional dimensions are just important as functional dimensions</h3><p>Sometimes, faster, more features, more colors,… are not what customers want, but the ease of using might. Let’s takeP&amp;G’s example when they introduced diapers to China. They already knew how to sell to Western customersand assumed that if the diaper were affordable enough in developing country like China, it could be sold easily.However, it did not take off. After years of research, they realized that they focused too much on the functional aspectwithout taking into account the social and emotional dimensions of customer’s struggle. They found that babies whowore diapers fell asleep 30% faster and slept longer every night. Not only better sleep improves children’s cognitivedevelopment, because the babies had slept, parents could also have more time to rest and sleep as well. Using thisfinding explicitly in the ads and launch eventually made P&amp;G a top-selling brand in China.</p><h3 id=\"what-customers-hire-is-equally-important-as-what-they-fire\">What customers hire is equally important as what they fire</h3><p>The moment customers buy the product is equally important as the moment they actually consume it.There are 2 main forces that battle in their mind:</p><ul>  <li>Habits of the present: “I’m used to doing it this way”, “I don’t love it but I’m comfortable with how I deal with it now”</li>  <li>Anxiety of choosing something new: “What if it’s not better?”</li></ul><h3 id=\"customers-might-not-be-able-to-tell-you-what-they-want-but-can-tell-you-about-their-struggles\">Customers might not be able to tell you what they want but can tell you about their struggles</h3><p>Before launching, Airbnb storyboarded 45 different emotional moments for their hosts and guests in details.They tried to look for surprises, unexpected behavior, unusual product uses, product limitations, and so onbecause those were incredibly important to develop a more attractive product.</p><blockquote>  <p>“One of the critical storyboard moments, for example, is the first Little Hire moment for guests-when they first turn up at the home in which they’ll stay. How are they greeted? If they’re expecting a place that has been described as relaxing, is that evident? Maybe there should be soft music playing or a scented candle, says Airbnb’s Chip Conley. Has the host made them feel at ease with their decision? Has the host made clear how they will solve any issues or problems that arise during the stay? And so on. The experience must match the customers’ vision of what they hired Airbnb to do. The Airbnb storyboards—which have been constantly tweaked and improved since its founding—reflect the importance of the combination of pushes and pulls that drive their customers’ Big Hires and Little Hires.”</p></blockquote><h3 id=\"once-you-figure-out-the-job-function-you-want-to-create-the-desired-experience\">Once you figure out the job function, you want to create the desired experience</h3><p>If you can successfully nail the job, you can transform your company’s brand into a purpose branch such that customers automatically associate with your solutions:</p><ul>  <li>IKEA: finish my apartment today</li>  <li>FedEx: send my documents fast</li>  <li>Apple: assure technology is easy to used and elegantly designed</li>  <li>Google: search anything immediately</li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/28820024-competing-against-luck\">https://www.goodreads.com/book/show/28820024-competing-against-luck</a></li></ul>",
            "url": "https://hoanhan101.github.io/competing-against-luck",
            
            
            
            "tags": ["book","innovation","customer"],
            
            "date_published": "2020-11-09T00:00:00-05:00",
            "date_modified": "2020-11-09T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/shutdown-motion",
            "title": "Moving forward with Motion",
            "summary": null,
            "content_text": "Hi friend,I’m here to tell you that Motion was shut down at 5 P.M. EST today. Thank you so much for your supportover the past months. It means a lot to me.The reason that I built Motion in the first place was to make it easier for me and you to achieve our goals.However, after using it myself for the last month and asking people for feedback, I came to the conclusionthat it was not as useful as I thought it would be. Now, there are many features that could make it betterthough it’s becoming harder and harder for me to support it alone, considering that I do have a 9-5 job anda family that I need to take care of. That said, even though it’s a hard decision to make, I have to makethis trade-off to discontinue Motion.In the meantime, I’m still writing on this blog. If you have additional questions or concerns, feel free tocontact me here and I’ll do my best to help.Best,Hoanh",
            "content_html": "<p>Hi friend,</p><p>I’m here to tell you that <a href=\"/motion\">Motion</a> was shut down at 5 P.M. EST today. Thank you so much for your supportover the past months. It means a lot to me.</p><p>The reason that I built Motion in the first place was to make it easier for me and you to achieve our goals.However, after using it myself for the last month and asking people for feedback, I came to the conclusionthat it was not as useful as I thought it would be. Now, there are many features that could make it betterthough it’s becoming harder and harder for me to support it alone, considering that I do have a 9-5 job anda family that I need to take care of. That said, even though it’s a hard decision to make, I have to makethis trade-off to discontinue Motion.</p><p>In the meantime, I’m still writing on this blog. If you have additional questions or concerns, feel free tocontact me here and I’ll do my best to help.</p><p>Best,</p><p>Hoanh</p>",
            "url": "https://hoanhan101.github.io/shutdown-motion",
            
            
            
            
            
            "date_published": "2020-10-30T00:00:00-04:00",
            "date_modified": "2020-10-30T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2-minute-rule",
            "title": "Get started with 2-minute rule",
            "summary": null,
            "content_text": "Whenever you find it hard to get started on a task, consider scaling it down into a 2-minute version. For example,  Read a book → Read one page  Write an essay → Write one sentence  Run 10 miles → Wear my running shoes  Do 100 push-ups → Do 1 push up  Eat more vegetables → Eat an apple  Study for interview → Skim through my notes  Build a program → Code a functionThe idea is to make it super easy to get started. Once you pass the starting point, which is arguably the hardest step,you start to gain momentum to keep doing the task itself:  Read one page → Read 10 pages → Finish the first chapter  Write one sentence → Write an opening paragraph → Write the body  Wear my running shoes → Walk for 5 minutes → Run for 5 minutesAs you can see, once you start, it is much easier to continue doing it. Sometimes, you’ll find yourself completing thetask even before you even notice it.  For more insights on system planning and goal setting, feel free to check out this guide. If you’re curiousabout how I apply it on a daily basis, check this out →References:  https://jamesclear.com/how-to-stop-procrastinating  https://www.lifehack.org/articles/productivity/how-stop-procrastinating-and-stick-good-habits-using-the-2-minute-rule.html",
            "content_html": "<p>Whenever you find it hard to get started on a task, consider scaling it down into a 2-minute version. For example,</p><ul>  <li>Read a book → Read one page</li>  <li>Write an essay → Write one sentence</li>  <li>Run 10 miles → Wear my running shoes</li>  <li>Do 100 push-ups → Do 1 push up</li>  <li>Eat more vegetables → Eat an apple</li>  <li>Study for interview → Skim through my notes</li>  <li>Build a program → Code a function</li></ul><p>The idea is to make it super easy to get started. Once you pass the starting point, which is arguably the hardest step,you start to gain momentum to keep doing the task itself:</p><ul>  <li>Read one page → Read 10 pages → Finish the first chapter</li>  <li>Write one sentence → Write an opening paragraph → Write the body</li>  <li>Wear my running shoes → Walk for 5 minutes → Run for 5 minutes</li></ul><p>As you can see, once you start, it is much easier to continue doing it. Sometimes, you’ll find yourself completing thetask even before you even notice it.</p><blockquote>  <p>For more insights on system planning and goal setting, feel free to check out <a href=\"/motion\">this guide</a>. If you’re curiousabout how I apply it on a daily basis, <a href=\"https://motion.hoanhan.co/goals/hoanhan/\">check this out →</a></p></blockquote><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://jamesclear.com/how-to-stop-procrastinating\">https://jamesclear.com/how-to-stop-procrastinating</a></li>  <li><a href=\"https://www.lifehack.org/articles/productivity/how-stop-procrastinating-and-stick-good-habits-using-the-2-minute-rule.html\">https://www.lifehack.org/articles/productivity/how-stop-procrastinating-and-stick-good-habits-using-the-2-minute-rule.html</a></li></ul>",
            "url": "https://hoanhan101.github.io/2-minute-rule",
            
            
            
            "tags": ["motion.hoanhan.co","consistency","start"],
            
            "date_published": "2020-10-27T00:00:00-04:00",
            "date_modified": "2020-10-27T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/what-sacrifices-you-need-achive-your-goal",
            "title": "What sacrifices do you need to take in order to achieve your goal?",
            "summary": null,
            "content_text": "Let me know if you agree to these:  Everyone wants to have an amazing job and financial independence but not everyone wantsto sacrifice their late nights and weekends, do unpleasant paperwork, practice networking, ortake lots of risks even though it’s not guaranteed to be successful.  Everyone wants to have a great relationship but not everyone wants to go through toughconversations and discuss about feelings and emotions.  Everyone wants to have a strong and healthy body but not everyone appreciates the painof working out and eating strictly.If you want something, you have to understand the cost that comes with it. Apparently, everythinghas a price, no matter how big or small it is. The bigger/exceptional the thing is, the more expensiveprice you have to pay. Take these examples from real-life successful people:  Michael Jordan took takes hundreds of jump shots a day even in his off seasons to stay on top.  Howard Schultz worked more than 13+ hours a day consistently to build Starbucks.  Mark Cuban didn’t take a vacation for seven years while starting his first business.  Tim Cooked started his day at 4:30 to build Apple.  Li Ka-Shing outsold his colleague to become the best salesman in the factory and general manager by 19.  Marissa Mayer used to put in 130-hour weeks at Google.These people understood their costs well, chose to accept the immediatepain, and focused on the big picture. As a result, they all had what they wanted. Now, to better understandyour cost, it’s always a good idea to write it down and have a simple way to keep track of it. I’ve writtenabout system planning and goal setting here if you’re interested in checking it out →References:  https://markmanson.net/question  https://www.businessinsider.com/16-people-who-worked-incredibly-hard-to-succeed-2012-9",
            "content_html": "<p>Let me know if you agree to these:</p><ul>  <li>Everyone wants to have an amazing job and financial independence but not everyone wantsto sacrifice their late nights and weekends, do unpleasant paperwork, practice networking, ortake lots of risks even though it’s not guaranteed to be successful.</li>  <li>Everyone wants to have a great relationship but not everyone wants to go through toughconversations and discuss about feelings and emotions.</li>  <li>Everyone wants to have a strong and healthy body but not everyone appreciates the painof working out and eating strictly.</li></ul><p>If you want something, you have to understand the cost that comes with it. Apparently, everythinghas a price, no matter how big or small it is. The bigger/exceptional the thing is, the more expensiveprice you have to pay. Take these examples from real-life successful people:</p><ul>  <li>Michael Jordan took takes hundreds of jump shots a day even in his off seasons to stay on top.</li>  <li>Howard Schultz worked more than 13+ hours a day consistently to build Starbucks.</li>  <li>Mark Cuban didn’t take a vacation for seven years while starting his first business.</li>  <li>Tim Cooked started his day at 4:30 to build Apple.</li>  <li>Li Ka-Shing outsold his colleague to become the best salesman in the factory and general manager by 19.</li>  <li>Marissa Mayer used to put in 130-hour weeks at Google.</li></ul><p>These people understood their costs well, chose to accept the immediatepain, and focused on the big picture. As a result, they all had what they wanted. Now, to better understandyour cost, it’s always a good idea to write it down and have a simple way to keep track of it. I’ve writtenabout system planning and goal setting here if you’re interested in <a href=\"/motion\">checking it out →</a></p><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://markmanson.net/question\">https://markmanson.net/question</a></li>  <li><a href=\"https://www.businessinsider.com/16-people-who-worked-incredibly-hard-to-succeed-2012-9\">https://www.businessinsider.com/16-people-who-worked-incredibly-hard-to-succeed-2012-9</a></li></ul>",
            "url": "https://hoanhan101.github.io/what-sacrifices-you-need-achive-your-goal",
            
            
            
            "tags": ["motion.hoanhan.co","goal","consistency","sacrifice"],
            
            "date_published": "2020-10-20T00:00:00-04:00",
            "date_modified": "2020-10-20T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/original-masterpiece",
            "title": "How creative geniuses maximized their odds of creating a masterpiece",
            "summary": null,
            "content_text": "According to Adam M. Grant’s Originals,many creative geniuses came up with a large number of ideas throughout the years. For example,  Shakespeare produced 37 plays and 154 sonnets in the span of 2 decades.  Mozart composed more than 600 pieces before his death at 35.  Beethoven produced 650 pieces in his lifetime.  Bach wrote over a thousand.  Picasso had more than 1800 paintings, 1200 sculptures, 2800 ceramics, 1200 drawings, not to mention prints, rugs.  Maya Angelou wrote more than 165 poems, 6 autobiographies.  Albert Einstein published more than 300 scientific works.  Thomas Edison filed 2332 patents.These works were not necessarily better than their peers’. However, by producing a greatervolume of work, they increased the odds of having influential and successful ones. At thesame time, not only were their works outstanding, they also had the highest originality duringthe period where they produced the largest volume.That said, to do better work, you want to do more of it. Instead of obsessing about quality,you want to focus on quantity. Putting more works out there also means that you gather feedbackfaster, have more time to reflect and improve your pieces.Now, the thing is, doing work itself is hard, doing more of it is harder, doing it consistentlyis incredibly hard. That’s why having a good system to keep you in check frequently as well as keeping trackof your work is crucial to your success. I’ve written about system planning and goal setting here if you’reinterested in checking it out →",
            "content_html": "<p>According to <a href=\"https://www.goodreads.com/book/show/25614523-originals?ac=1&amp;from_search=true&amp;qid=hmhJm1ODZL&amp;rank=3\">Adam M. Grant’s Originals</a>,many creative geniuses came up with <strong>a large number of ideas</strong> throughout the years. For example,</p><ul>  <li>Shakespeare produced 37 plays and 154 sonnets in the span of 2 decades.</li>  <li>Mozart composed more than 600 pieces before his death at 35.</li>  <li>Beethoven produced 650 pieces in his lifetime.</li>  <li>Bach wrote over a thousand.</li>  <li>Picasso had more than 1800 paintings, 1200 sculptures, 2800 ceramics, 1200 drawings, not to mention prints, rugs.</li>  <li>Maya Angelou wrote more than 165 poems, 6 autobiographies.</li>  <li>Albert Einstein published more than 300 scientific works.</li>  <li>Thomas Edison filed 2332 patents.</li></ul><p>These works were not necessarily better than their peers’. However, by producing a greatervolume of work, they increased the odds of having influential and successful ones. At thesame time, not only were their works outstanding, they also had the highest originality duringthe period where they produced the largest volume.</p><p>That said, to do better work, you want to do more of it. Instead of obsessing about quality,you want to focus on quantity. Putting more works out there also means that you gather feedbackfaster, have more time to reflect and improve your pieces.</p><p>Now, the thing is, doing work itself is hard, doing more of it is harder, <strong>doing it consistentlyis incredibly hard</strong>. That’s why having a good system to keep you in check frequently as well as keeping trackof your work is crucial to your success. I’ve written about system planning and goal setting here if you’reinterested in <a href=\"/motion\">checking it out →</a></p>",
            "url": "https://hoanhan101.github.io/original-masterpiece",
            
            
            
            "tags": ["motion.hoanhan.co","consistency","genius","masterpiece"],
            
            "date_published": "2020-10-13T00:00:00-04:00",
            "date_modified": "2020-10-13T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/19-traction-channels",
            "title": "19 Traction Channels",
            "summary": null,
            "content_text": " Table of Contents   Viral Marketing  Public Relations (PR)  Unconventional PR  Search Engine Marketing (SEM)  Social and Display Ads  Offline Ads  Search Engine Optimization (SEO)  Content Marketing  Email Marketing  Engineering as Marketing  Target Market Blogs  Business Development (BD)  Sales  Affiliate Programs  Existing Platforms  Trade Shows  Offline Events  Speaking Engagements  Community BuildingViral MarketingViral marketing is the process of getting your existing users to refer others to your product.It can come from different forms:  Pure word of mouth: people naturally tell people about your product.  Inherent virality: people can only get value by inviting others (chat app, social media app).  Collaboration: the product becomes more valuable when used collaboratively (Google Docs).  Embedded communication from the product (Apple’s “Sent from my iPhone”).  Incentive (refer friends to get more space on DropBox).  Embedded buttons &amp; widgets (Youtube’s embedded videos, Facebook’s Like button).  Social networks.Public Relations (PR)PR focus on getting coverage from traditional media like news, newspapers, magazines. Most makemoney from ads, meaning the more view they have, the better. So if you have a compelling story,they want to hear from you.Top news get stories from smaller news or blogs. That said, to target these effectively, start smalland pitch to niche blogs or ones who often get picked up by larger ones like TechCrunch, Lifehacker,Hacker News, Reddit, and so on.Follow influencers in your industry and target blogs they often link to. Ask them for comment/feedbackon your product, and also to share it with their audience if possible.Figure out specific reporters covering your market and build relationship with them (read their articles,comment, offer help). Pitch when you have a compelling story (raising money, launching products, hittinga usage barrier). Refer to the book for pitch templates.Unconventional PRThere are two types of unconventional PR:  Publicly stunt: Richard Branson dressing like a woman, DuckDuckGo’s billboard in Google’sbackyard highlighting its privacy focus, Dollar Shave Club’s viral video.  Customer appreciation: sending gits, hand-written notes to customers, contests and giveaways,having amazing customer support.Unconventional PR is really effective if done right.Search Engine Marketing (SEM)SEM refers to placing advertisements on search engine like Google. You can use SEM to test productpositioning even before you build it.3 terminologies to focus on are:  Click-Through Rate (CTR): if 100 people see your ad, 3 of them click, your CTR is 3%.  Cost per Click (CPC): amount it costs to buy a click.  Cost per Acquisition (CPA): amount it costs to acquire a customer.The higher your CTR is, the higher quality your ad is, the better placement and pricing you can have.If your CPC is $1, 10% of people click on your ad and make a purchase, your CPA is$1/10% = $10. If your product costs $1 and it costs you $10 to acquire a customer, SEM might not worth it.Social and Display AdsDisplay Ads are ones you see on websites all over the Internet where they are run by ad networks.  Large Networks: Google Display Network, Advertising.com.  Niche Networks: BuySell Ads.  Direct Networks: ask sites owners to place your ads.To know the ads your competitors are running, use tools like MixRank, Adbeat. To determine whethera site’s audience is the right fit, use tools like Alexa, Quantcast.Social Ads is when you use social media (LinkedIn, Twitter, Facebook, reddit) to generate interests,awareness, start a conversation, deliver a message, build an audience rather than conversion purposes(completing a sale, generating sign-up).Offline AdsThere are many kinds of offline ads, such as TV, radio, magazines, newspapers, billboards, direct mail.The most important factor to consider while making an offline ads purchase is the demographics.You can run cheap tests by targeting local markets first and scale up to national ones. To track it,use unique codes or web addresses.Search Engine Optimization (SEO)SEO is the process of improving your ranking in search engines.Moz’s The Beginner’s Guide to SEO is a good start for beginners.SEO comes down to two things: contents and links.  The more aligned your content is with the keywords, the better it will rank.  The more links you can get from credible and varying sources, the better it will rank. This can be achievedvia PR, content marketing, and so on.Content MarketingBlogging is proven to be a great way to promote your product. Having a strong blog can positively impactother traction channels as well.Some use their blogs as a marketing platform before they even have a product.Some use their blogs as their main channel for customers acquisition.Other than blogging, courses, ebooks, infographics,… are also be used in content marketing.  “In the early days, it’s unlikely that your blog will see much traffic, regardless of content quality.Even Unbounce was receiving less than 800 monthly visits after six months of consistently putting out content.It took a while for them to grow to 20,000 monthly visitors.”One of the best way to grow your audience is to do guest posting on popular blogs.To succeed, you have to create quality content and publish consistently.  Write about problems your target customers have.  Use data from your product to produce in-depth posts.Email MarketingEmail marketing works best when it’s personalized as they sit next to email updates from friends and family in yourcustomer’s inbox.Email can be used in all stages of the customer lifecycle:  Finding customers: include an email list in your blog, offer materials over email, and so on.  Engaging customers: what you really want is an email list of active users. What it means depends on your product.For Dropbox, it means uploading at least 1 file. For Twitter, it means sending out a tweet or following at least 5 people.  Retaining customers: send out lifecycle emails to slowly expose customers to new features, weekly summary,…  Upselling cusomters.  Generating referrals.Checkout Copyhackers for copywriting tips.Engineering as MarketingBuild useful tools and resources to reach more people. For example, HubSpot built a free marketing review tool, Marketing Grader,to automate the process of evaluating websites’ marketing effectiveness and at the same time build a bigger customer base.The key features of these tools are that they’re free, very to easy use, and an immediate value.Target Market BlogsTargeting blogs your customer read is one of the most effective way to get your first customers.Mint used this strategy to acquire 20k sign up before they launched:  They got several blogs to write about them.  They sponsored blogs to put ads.  They partnered with larger sites like The Motley Fool.  They asked people on their pre-launch list to share in return for priority product access.To find influential bloggers, can search for “top blogs/best blogs for x” in search engines, Youtube, social media.Business Development (BD)BD focuses on exchanging value through partnerships. Some of the major types are:  Standard partnership: two parties work together to leverage each or both products (Nike+ is the result of Apple and Nike).  Join venture: two parties work together to create a new product offering (Starbucks Frappuccino is the result of Starbucks and Pepsi).  Licensing: an upstart can use a stronger branch to have more credibility.  Distribution deal: one party provides a service to other in return for access to potential customers (Groupon work with restaurants to offer discounts to their mailing list).SalesSales is the process of generating leads and converting them into paying customers. It works best for high-priced products.For more information, refer to the book as well as The Mom Test.Affiliate ProgramsAn affiliate program is an arrangement where you pay people to perform a certain action. Some of the major categories are:  Coupon/deal: offer discounts and take a sale cut (Amazon).  Loyalty program: offer cash back on purchases made through partnered networks (Upromise, Ebates).  Aggregator: aggregate products from retailers.  Email list.  Niche sites.Your ability to use affiliate programs effectively depends on how much you’re willing to pay out of pocket to acquire acustomer.  Use affiliate networks such as ClickBank, Commission Junction, Pepperjam,…  Create your own: even though you don’t have to pay for affiliates in cash, you have to recruit partners yourself.Existing PlatformsExisting platforms are websites, apps with huge number of users (Apple App Store, Google add-ons/extensions).  For app stores, you want to get high ranking or featured.  For social platform, you want to focus on missing features.Trade ShowsTrade shows allow companies to show their products in person.Look at how other companies do it and decide yourself.Offline EventsConferences are the most popular type of offline events. Alongside, throwing parties is a successful strategy to attractand reward prospective customers.Meetups are also good ways to build local communities.Speaking EngagementsIf you’re a good fit for a event, you’re doing the event organizers by presenting.Community Building  “Community building can give you traction by magnifying your essential purpose, building a core asset,creating evangelists for your service, contributing to product development and even giving you a hiring pool.”References:  https://www.goodreads.com/book/show/22091581-traction",
            "content_html": "<h2> Table of Contents </h2><ul id=\"markdown-toc\">  <li><a href=\"#viral-marketing\" id=\"markdown-toc-viral-marketing\">Viral Marketing</a></li>  <li><a href=\"#public-relations-pr\" id=\"markdown-toc-public-relations-pr\">Public Relations (PR)</a></li>  <li><a href=\"#unconventional-pr\" id=\"markdown-toc-unconventional-pr\">Unconventional PR</a></li>  <li><a href=\"#search-engine-marketing-sem\" id=\"markdown-toc-search-engine-marketing-sem\">Search Engine Marketing (SEM)</a></li>  <li><a href=\"#social-and-display-ads\" id=\"markdown-toc-social-and-display-ads\">Social and Display Ads</a></li>  <li><a href=\"#offline-ads\" id=\"markdown-toc-offline-ads\">Offline Ads</a></li>  <li><a href=\"#search-engine-optimization-seo\" id=\"markdown-toc-search-engine-optimization-seo\">Search Engine Optimization (SEO)</a></li>  <li><a href=\"#content-marketing\" id=\"markdown-toc-content-marketing\">Content Marketing</a></li>  <li><a href=\"#email-marketing\" id=\"markdown-toc-email-marketing\">Email Marketing</a></li>  <li><a href=\"#engineering-as-marketing\" id=\"markdown-toc-engineering-as-marketing\">Engineering as Marketing</a></li>  <li><a href=\"#target-market-blogs\" id=\"markdown-toc-target-market-blogs\">Target Market Blogs</a></li>  <li><a href=\"#business-development-bd\" id=\"markdown-toc-business-development-bd\">Business Development (BD)</a></li>  <li><a href=\"#sales\" id=\"markdown-toc-sales\">Sales</a></li>  <li><a href=\"#affiliate-programs\" id=\"markdown-toc-affiliate-programs\">Affiliate Programs</a></li>  <li><a href=\"#existing-platforms\" id=\"markdown-toc-existing-platforms\">Existing Platforms</a></li>  <li><a href=\"#trade-shows\" id=\"markdown-toc-trade-shows\">Trade Shows</a></li>  <li><a href=\"#offline-events\" id=\"markdown-toc-offline-events\">Offline Events</a></li>  <li><a href=\"#speaking-engagements\" id=\"markdown-toc-speaking-engagements\">Speaking Engagements</a></li>  <li><a href=\"#community-building\" id=\"markdown-toc-community-building\">Community Building</a></li></ul><hr /><h2 id=\"viral-marketing\">Viral Marketing</h2><p>Viral marketing is the process of getting your existing users to refer others to your product.It can come from different forms:</p><ul>  <li>Pure word of mouth: people naturally tell people about your product.</li>  <li>Inherent virality: people can only get value by inviting others (chat app, social media app).</li>  <li>Collaboration: the product becomes more valuable when used collaboratively (Google Docs).</li>  <li>Embedded communication from the product (Apple’s “Sent from my iPhone”).</li>  <li>Incentive (refer friends to get more space on DropBox).</li>  <li>Embedded buttons &amp; widgets (Youtube’s embedded videos, Facebook’s Like button).</li>  <li>Social networks.</li></ul><h2 id=\"public-relations-pr\">Public Relations (PR)</h2><p>PR focus on getting coverage from traditional media like news, newspapers, magazines. Most makemoney from ads, meaning the more view they have, the better. So if you have a compelling story,they want to hear from you.</p><p>Top news get stories from smaller news or blogs. That said, to target these effectively, start smalland pitch to niche blogs or ones who often get picked up by larger ones like TechCrunch, Lifehacker,Hacker News, Reddit, and so on.</p><p>Follow influencers in your industry and target blogs they often link to. Ask them for comment/feedbackon your product, and also to share it with their audience if possible.</p><p>Figure out specific reporters covering your market and build relationship with them (read their articles,comment, offer help). Pitch when you have a compelling story (raising money, launching products, hittinga usage barrier). Refer to the book for pitch templates.</p><h2 id=\"unconventional-pr\">Unconventional PR</h2><p>There are two types of unconventional PR:</p><ul>  <li>Publicly stunt: Richard Branson dressing like a woman, DuckDuckGo’s billboard in Google’sbackyard highlighting its privacy focus, Dollar Shave Club’s viral video.</li>  <li>Customer appreciation: sending gits, hand-written notes to customers, contests and giveaways,having amazing customer support.</li></ul><p>Unconventional PR is really effective if done right.</p><h2 id=\"search-engine-marketing-sem\">Search Engine Marketing (SEM)</h2><p>SEM refers to placing advertisements on search engine like Google. You can use SEM to test productpositioning even before you build it.</p><p>3 terminologies to focus on are:</p><ul>  <li>Click-Through Rate (CTR): if 100 people see your ad, 3 of them click, your CTR is 3%.</li>  <li>Cost per Click (CPC): amount it costs to buy a click.</li>  <li>Cost per Acquisition (CPA): amount it costs to acquire a customer.</li></ul><p>The higher your CTR is, the higher quality your ad is, the better placement and pricing you can have.</p><p>If your CPC is $1, 10% of people click on your ad and <em>make a purchase</em>, your CPA is$1/10% = $10. If your product costs $1 and it costs you $10 to acquire a customer, SEM might not worth it.</p><h2 id=\"social-and-display-ads\">Social and Display Ads</h2><p>Display Ads are ones you see on websites all over the Internet where they are run by ad networks.</p><ul>  <li>Large Networks: Google Display Network, Advertising.com.</li>  <li>Niche Networks: BuySell Ads.</li>  <li>Direct Networks: ask sites owners to place your ads.</li></ul><p>To know the ads your competitors are running, use tools like MixRank, Adbeat. To determine whethera site’s audience is the right fit, use tools like Alexa, Quantcast.</p><p>Social Ads is when you use social media (LinkedIn, Twitter, Facebook, reddit) to generate interests,awareness, start a conversation, deliver a message, build an audience rather than conversion purposes(completing a sale, generating sign-up).</p><h2 id=\"offline-ads\">Offline Ads</h2><p>There are many kinds of offline ads, such as TV, radio, magazines, newspapers, billboards, direct mail.The most important factor to consider while making an offline ads purchase is the demographics.</p><p>You can run cheap tests by targeting local markets first and scale up to national ones. To track it,use unique codes or web addresses.</p><h2 id=\"search-engine-optimization-seo\">Search Engine Optimization (SEO)</h2><p>SEO is the process of improving your ranking in search engines.</p><p><a href=\"https://moz.com/beginners-guide-to-seo\">Moz’s The Beginner’s Guide to SEO</a> is a good start for beginners.</p><p>SEO comes down to two things: contents and links.</p><ul>  <li>The more aligned your content is with the keywords, the better it will rank.</li>  <li>The more links you can get from credible and varying sources, the better it will rank. This can be achievedvia PR, content marketing, and so on.</li></ul><h2 id=\"content-marketing\">Content Marketing</h2><p>Blogging is proven to be a great way to promote your product. Having a strong blog can positively impactother traction channels as well.</p><p>Some use their blogs as a marketing platform before they even have a product.Some use their blogs as their main channel for customers acquisition.</p><p>Other than blogging, courses, ebooks, infographics,… are also be used in content marketing.</p><blockquote>  <p>“In the early days, it’s unlikely that your blog will see much traffic, regardless of content quality.Even Unbounce was receiving less than 800 monthly visits after six months of consistently putting out content.It took a while for them to grow to 20,000 monthly visitors.”</p></blockquote><p>One of the best way to grow your audience is to do guest posting on popular blogs.</p><p>To succeed, you have to create quality content and <strong><a href=\"/james-clear-on-writing-consistently\">publish consistently</a></strong>.</p><ul>  <li>Write about problems your target customers have.</li>  <li>Use data from your product to produce in-depth posts.</li></ul><h2 id=\"email-marketing\">Email Marketing</h2><p>Email marketing works best when it’s personalized as they sit next to email updates from friends and family in yourcustomer’s inbox.</p><p>Email can be used in all stages of the customer lifecycle:</p><ul>  <li>Finding customers: include an email list in your blog, offer materials over email, and so on.</li>  <li>Engaging customers: what you really want is an email list of <strong>active users</strong>. What it means depends on your product.For Dropbox, it means uploading at least 1 file. For Twitter, it means sending out a tweet or following at least 5 people.</li>  <li>Retaining customers: send out lifecycle emails to slowly expose customers to new features, weekly summary,…</li>  <li>Upselling cusomters.</li>  <li>Generating referrals.</li></ul><p>Checkout Copyhackers for copywriting tips.</p><h2 id=\"engineering-as-marketing\">Engineering as Marketing</h2><p>Build useful tools and resources to reach more people. For example, HubSpot built a free marketing review tool, Marketing Grader,to automate the process of evaluating websites’ marketing effectiveness and at the same time build a bigger customer base.</p><p>The key features of these tools are that they’re free, very to easy use, and an immediate value.</p><h2 id=\"target-market-blogs\">Target Market Blogs</h2><p>Targeting blogs your customer read is one of the most effective way to get your first customers.</p><p>Mint used this strategy to acquire 20k sign up before they launched:</p><ul>  <li>They got several blogs to write about them.</li>  <li>They sponsored blogs to put ads.</li>  <li>They partnered with larger sites like The Motley Fool.</li>  <li>They asked people on their pre-launch list to share in return for priority product access.</li></ul><p>To find influential bloggers, can search for “top blogs/best blogs for x” in search engines, Youtube, social media.</p><h2 id=\"business-development-bd\">Business Development (BD)</h2><p>BD focuses on exchanging value through partnerships. Some of the major types are:</p><ul>  <li>Standard partnership: two parties work together to leverage each or both products (Nike+ is the result of Apple and Nike).</li>  <li>Join venture: two parties work together to create a new product offering (Starbucks Frappuccino is the result of Starbucks and Pepsi).</li>  <li>Licensing: an upstart can use a stronger branch to have more credibility.</li>  <li>Distribution deal: one party provides a service to other in return for access to potential customers (Groupon work with restaurants to offer discounts to their mailing list).</li></ul><h2 id=\"sales\">Sales</h2><p>Sales is the process of generating leads and converting them into paying customers. It works best for high-priced products.</p><p>For more information, refer to the book as well as <a href=\"/the-mom-test\">The Mom Test</a>.</p><h2 id=\"affiliate-programs\">Affiliate Programs</h2><p>An affiliate program is an arrangement where you pay people to perform a certain action. Some of the major categories are:</p><ul>  <li>Coupon/deal: offer discounts and take a sale cut (Amazon).</li>  <li>Loyalty program: offer cash back on purchases made through partnered networks (Upromise, Ebates).</li>  <li>Aggregator: aggregate products from retailers.</li>  <li>Email list.</li>  <li>Niche sites.</li></ul><p>Your ability to use affiliate programs effectively depends on how much you’re willing to pay out of pocket to acquire acustomer.</p><ul>  <li>Use affiliate networks such as ClickBank, Commission Junction, Pepperjam,…</li>  <li>Create your own: even though you don’t have to pay for affiliates in cash, you have to recruit partners yourself.</li></ul><h2 id=\"existing-platforms\">Existing Platforms</h2><p>Existing platforms are websites, apps with huge number of users (Apple App Store, Google add-ons/extensions).</p><ul>  <li>For app stores, you want to get high ranking or featured.</li>  <li>For social platform, you want to focus on missing features.</li></ul><h2 id=\"trade-shows\">Trade Shows</h2><p>Trade shows allow companies to show their products in person.</p><p>Look at how other companies do it and decide yourself.</p><h2 id=\"offline-events\">Offline Events</h2><p>Conferences are the most popular type of offline events. Alongside, throwing parties is a successful strategy to attractand reward prospective customers.</p><p>Meetups are also good ways to build local communities.</p><h2 id=\"speaking-engagements\">Speaking Engagements</h2><p>If you’re a good fit for a event, you’re doing the event organizers by presenting.</p><h2 id=\"community-building\">Community Building</h2><blockquote>  <p>“Community building can give you traction by magnifying your essential purpose, building a core asset,creating evangelists for your service, contributing to product development and even giving you a hiring pool.”</p></blockquote><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/22091581-traction\">https://www.goodreads.com/book/show/22091581-traction</a></li></ul>",
            "url": "https://hoanhan101.github.io/19-traction-channels",
            
            
            
            "tags": ["book","traction","customer"],
            
            "date_published": "2020-10-10T00:00:00-04:00",
            "date_modified": "2020-10-10T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/james-clear-on-writing-consistently",
            "title": "How writing consistently helped James Clear gain millions of fans",
            "summary": null,
            "content_text": "For nearly three years, James Clear has pushed out a new article on his blog every Monday and Thursday.No matter how long, short, compelling an article was, it got published on the site on time. He said thathe wanted to write consistently to find his voice, build an audience, churn through average ideas todiscover great ones. He didn’t know whether an article was popularor not, but he believed that if he did not miss a day, he would eventually become a better writer andhopefully make it big someday.We all knew the result. James became extremely well-known for his blog. As of today, he has 10 millionpeople visited his site per year. Along with that, he has sold over 1 million copies of his books and hasspoken at tons of major events. All thanks to a simple strategy that he setup in the very beginning whenhe first started: publish an article consistently every Monday and Thursday.So, what can we learn? What are the key takeaways here?First, consistency is key. It doesn’t matter what is it that you’re doing, if you show up consistently,stick to the schedule, reflect frequently, it is not guaranteed that you will be successful but it isextremely possible that you’ll become better at your craft.Second, instead of focusing on goal setting alone, focus on designing a good system. As for the case ofJames Clear, instead of focusing on attracting million of fans or selling 1 million book copies (goal),he focused on publishing every Monday and Thursday (system), playing the long game while building hissite and his audience. His success did not come overnight but hours of hours writing, planning weekby week.That’s it! If you’re interested in learning more about how to design better goals and systems and JamesClear’s Goal Setting technique, feel free to check out my definitive guide here andMotion. If you’re curious about how I am using it on a daily basis, check outmy public page here.",
            "content_html": "<p>For nearly three years, James Clear has pushed out a new article on his blog <strong>every Monday and Thursday</strong>.No matter how long, short, compelling an article was, it got published on the site on time. He said thathe wanted to write consistently to <a href=\"https://jamesclear.com/once-per-week\">find his voice, build an audience, churn through average ideas todiscover great ones</a>. He didn’t know whether an article was popularor not, but he believed that if he did not miss a day, he would eventually become a better writer andhopefully make it big someday.</p><p>We all knew the result. James became extremely well-known for his blog. As of today, he has 10 millionpeople visited his site per year. Along with that, he has sold over 1 million copies of his books and hasspoken at tons of major events. All thanks to a simple strategy that he setup in the very beginning whenhe first started: <strong>publish an article consistently every Monday and Thursday</strong>.</p><p><strong>So, what can we learn? What are the key takeaways here?</strong></p><p>First, <strong>consistency is key</strong>. It doesn’t matter what is it that you’re doing, if you show up consistently,stick to the schedule, reflect frequently, it is not guaranteed that you will be successful but it isextremely possible that you’ll become better at your craft.</p><p>Second, instead of focusing on goal setting alone, <strong>focus on designing a good system</strong>. As for the case ofJames Clear, instead of focusing on attracting million of fans or selling 1 million book copies (goal),he focused on publishing every Monday and Thursday (system), playing the long game while building hissite and his audience. His success did not come overnight but hours of hours writing, planning weekby week.</p><p>That’s it! If you’re interested in learning more about how to design better goals and systems and JamesClear’s Goal Setting technique, feel free to check out my <strong><a href=\"/motion\">definitive guide here</a></strong> and<strong><a href=\"https://motion.hoanhan.co\">Motion</a></strong>. If you’re curious about how I am using it on a daily basis, check out<strong><a href=\"https://motion.hoanhan.co/goals/hoanhan/\">my public page here</a></strong>.</p>",
            "url": "https://hoanhan101.github.io/james-clear-on-writing-consistently",
            
            
            
            "tags": ["motion.hoanhan.co","consistency"],
            
            "date_published": "2020-10-06T00:00:00-04:00",
            "date_modified": "2020-10-06T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/motion",
            "title": "The Most Simple Way to Set Goals You Actually Follow",
            "summary": null,
            "content_text": "Hi friends,Let me confess. I’ve always been struggling to set goals and achieve them consistently.I’ve tried multiple goal setting methods and habit apps in the past but normally I would find thempretty complicated after 1-2 uses. However, since I heard about James Clear’s GoalSetting Method, I’ve been using it actively since.Personally, I think it’s a super clean, simple, yet effective way to set better goals using 4 main strategies:  Besides asking “What do you want to achieve?”, it’s worthwhile to figure out “What sacrifices do you need to take in order to achieve your goal?”. For example, if your goal is to get stronger, your sacrifices would be spending 3-6 hours every week after work to exercise consistently no matter how tired you are. At the end of the day, the hard part is to accept the sacrifices required to achieve your goal.  Instead of focusing on goal setting alone, focus on designing a good system. For example, if your goal is to get stronger, your system could be to exercise 3 times a week and eat healthy every day.   For each day that you make a progress, you would want to note it on a calendar consistently. You’ll have a chain after a few days. You’ll like seeing that chain, especially when you get a few weeks done.   Finally, only by measuring and clear tracking can you verify if you’re getting better. For example, if your goal is to run 10 miles after 2 months and your system is to run every day, you can start with a version that is incredibly easy, which is to run for 5 miles. Each time, you increase it in an incredibly small way such as 5.1 miles, then 5.2 miles, and so on. If you’re able to increase 0.1 miles each time, by the second months, you could cross out your goal to run 10 miles easily. For the longest time, I’ve been using the above method on a piece a paper or a spreadsheet. Until recently I came up with the idea of putting together an app that helps me keep track of them better. Below are several screenshots of what the app looks like and how it works.You can see my actual progress day by day here. For more information on how it works, feel free to check it out at Motion.If you have any questions/comments/feedbacks, please let me know. Otherwise, have a good day!Best,Hoanh",
            "content_html": "<p>Hi friends,</p><p>Let me confess. I’ve always been struggling to <strong>set goals and achieve them consistently</strong>.I’ve tried multiple goal setting methods and habit apps in the past but normally I would find thempretty complicated after 1-2 uses. However, since I heard about <a href=\"https://jamesclear.com/goal-setting\">James Clear’s GoalSetting Method</a>, I’ve been using it actively since.Personally, I think it’s a super clean, simple, yet effective way to set better goals using <strong>4 main strategies</strong>:</p><ol>  <li>Besides asking <strong>“What do you want to achieve?”</strong>, it’s worthwhile to figure out <strong>“What sacrifices do you need to take in order to achieve your goal?”</strong>. For example, if your goal is to get stronger, your sacrifices would be spending 3-6 hours every week after work to exercise consistently no matter how tired you are. At the end of the day, the hard part is to <a href=\"/what-sacrifices-you-need-achive-your-goal\">accept the sacrifices required to achieve your goal.</a></li>  <li>Instead of focusing on goal setting alone, <strong>focus on designing a good system</strong>. For example, if your goal is to get stronger, your system could be to exercise 3 times a week and eat healthy every day. </li>  <li>For each day that you make a progress, you would want to <a href=\"/james-clear-on-writing-consistently\"><strong>note it on a calendar consistently</strong></a>. You’ll have a chain after a few days. You’ll like seeing that chain, especially when you get a few weeks done. </li>  <li>Finally, <strong>only by measuring and clear tracking can you verify if you’re getting better</strong>. For example, if your goal is to run 10 miles after 2 months and your system is to run every day, you can <a href=\"/2-minute-rule\">start with a version that is incredibly easy</a>, which is to run for 5 miles. Each time, you increase it in an incredibly small way such as 5.1 miles, then 5.2 miles, and so on. If you’re able to increase 0.1 miles each time, by the second months, you could cross out your goal to run 10 miles easily. </li></ol><p>For the longest time, I’ve been using the above method on a piece a paper or a spreadsheet. Until recently I came up with the idea of putting together an app that helps me keep track of them better. Below are several screenshots of what the app looks like and how it works.</p><p><img src=\"/assets/images/motion_focus_on_systems.png\" alt=\"Focus on systems\" /><img src=\"/assets/images/motion_dont_break_the_chain.png\" alt=\"Don't break the chain\" /><img src=\"/assets/images/motion_chartjs.png\" alt=\"Chartjs\" /></p><p><strong><a href=\"https://motion.hoanhan.co/goals/hoanhan\">You can see my actual progress day by day here</a></strong>. For more information on how it works, feel free to check it out at <a href=\"https://motion.hoanhan.co\">Motion</a>.</p><p>If you have any questions/comments/feedbacks, please let me know. Otherwise, have a good day!</p><p>Best,</p><p>Hoanh</p>",
            "url": "https://hoanhan101.github.io/motion",
            
            
            
            
            
            "date_published": "2020-09-30T00:00:00-04:00",
            "date_modified": "2020-09-30T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/the-ultimate-go-study-guide",
            "title": "The Ultimate Go Study Guide",
            "summary": null,
            "content_text": "A year ago, in August 2019, I shared this Ultimate Go Study Guide project on GitHub, and surprisingly, it got a lot of attention from the community.Fast forward to August 2020, it now has over 11K stars, 900 forks with the help of more than 20 contributors.The project is a collection of my notes while learning Go programming language from Ardan Labs’s Ultimate Go course.Honestly, I couldn’t thank Bill Kennedy and the Ardan Labs team enough for open-sourcing this wonderful material. They’ve done such great jobs putting together their knowledge, insights into their courses and making them available to the public.Different people have different learning styles. For me, I learn best by doing and walking through examples.That said, I take notes carefully, comment directly on the source code to make sure that I understand every single lineof code as I am reading and also be mindful of the theories behind the scene.As Ultimate Go Study Guide keeps growing, there’s one issue that keeps coming up. That’s about the format of the project. Specifically,many people have requested an eBook version where the content is more streamlined and they can read it at their convenience.So, here comes The Ultimate Go Study Guide eBook version. For the last 3 months or so, I have spent most of my free time putting togethereverything here into a 200-page book. Other than all the good stuff from Ultimate Go, two new and better things in this version are:  Follow-along code input and output.  Diagrams.Hope it makes your journey of learning Go a bit easier. And again, thank you all for your support. I really appreciate it.Here’s the link for the book: https://gum.co/bpUYF.Note that I’ve made it free, though I would really appreciate your support.Regardless, you will receive the book in 2 different formats: PDF and ePub.",
            "content_html": "<p>A year ago, in August 2019, I shared this <a href=\"https://github.com/hoanhan101/ultimate-go\">Ultimate Go Study Guide project on GitHub</a>, and surprisingly, it got a lot of attention from the community.Fast forward to August 2020, it now has over 11K stars, 900 forks with the help of more than 20 contributors.</p><p>The project is a collection of my notes while learning Go programming language from <a href=\"https://www.oreilly.com/library/view/ultimate-go-programming/9780134757476/\">Ardan Labs’s Ultimate Go course</a>.Honestly, I couldn’t thank Bill Kennedy and the Ardan Labs team enough for open-sourcing this wonderful material. They’ve done such great jobs putting together their knowledge, insights into their courses and making them available to the public.</p><p>Different people have different learning styles. For me, I learn best by doing and walking through examples.That said, I take notes carefully, comment directly on the source code to make sure that I understand every single lineof code as I am reading and also be mindful of the theories behind the scene.</p><p>As Ultimate Go Study Guide keeps growing, there’s one issue that keeps coming up. That’s about the format of the project. Specifically,many people have requested an eBook version where the content is more streamlined and they can read it at their convenience.</p><p>So, here comes The Ultimate Go Study Guide eBook version. For the last 3 months or so, I have spent most of my free time putting togethereverything here into a 200-page book. Other than all the good stuff from Ultimate Go, two new and better things in this version are:</p><ul>  <li>Follow-along code input and output.</li>  <li>Diagrams.</li></ul><p>Hope it makes your journey of learning Go a bit easier. And again, thank you all for your support. I really appreciate it.</p><p><strong>Here’s the link for the book: <a href=\"https://gum.co/bpUYF\">https://gum.co/bpUYF</a>.</strong></p><p>Note that I’ve made it free, though I would really appreciate your support.Regardless, you will receive the book in 2 different formats: PDF and ePub.</p>",
            "url": "https://hoanhan101.github.io/the-ultimate-go-study-guide",
            
            
            
            "tags": ["book","go","ultimate-go"],
            
            "date_published": "2020-08-25T00:00:00-04:00",
            "date_modified": "2020-08-25T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/design-data-intensive-apps",
            "title": "Designing Data-Intensive Applications by Martin Kleppmann",
            "summary": null,
            "content_text": " Table of Contents   4 fundamental ideas that we need in order to design data-intensive applications.          Reliable, scalable, maintainable applications.      Data models and query languages.      Storage and retrieval.      Encoding and evolution.        Replication, partitioning/sharding, transactions, and what it means to achieve consistency and consensus in a distributed system.          Replication.      Partitioning/sharding.      Transactions.      Things that may go wrong in a distributed system.      Consistency and consensus.        Batch and stream processing.          Batch processing.      Stream processing.      4 fundamental ideas that we need in order to design data-intensive applications.Reliable, scalable, maintainable applications.  Reliability means continuing to work correctly, even when things go wrong. Common faults and preventions include:          Hardware faults: hard disks crash, blackout, incorrect network configuration,…                  Add redundancy to individual hardware components to reduce the failure rate.          As long as we can restore a backup onto a new machine quickly, the downtime is not fatal.                    Software faults: bug, out of shared resources, unresponsive service, cascading failure,…                  There’s no quick solution other than thorough testing, measuring, monitoring, analyzing.                    Human errors: design error, configuration error,…                  Enforce good design, good practice and training.          Decouple the places where people make the most mistake.          Automate testing: unit test, integration test, end-to-end test.          Allow quick recovery rollback strategy.          Set up details monitoring                      Scalability describes a system’s ability to cope with increased load.          Describing load: requests per second, read/write radio, active users, cache hit rate,…      Describing performance:                  When you increase a load parameter, keep system resources unchanged, how is performance affected?          When you increase a load parameter, how much do you increase the resources if you want to keep performance unchanged?                    Approaches for coping with load:                  Scaling up (vertical scaling): move to a more powerful machine.          Scaling out (horizontal scaling): distribute the load across different machines.                      Maintainability focuses on 3 design principles:          Operability: make it easy for operation teams to keep the system running smoothly.                  Provide monitoring system health.          Support for automation and integration tools.          Have Good documentation.                    Simplicity: make it easy for new engineers to understand the system.                  Provide good abstraction layers that allow us to extract parts of a large system into well-defined, reusable components.                    Evolvability: make it easy for engineers to make changes.                  Follow agile approach.                    Data models and query languages.  Data started out being represented as one big tree, though it wasn’t good for representing many-to-many relationships models, so the relational model was invented.  However, some applications didn’t fit well into the relational model, non-relational NoSQL was born:          Document database: self-contained documents, rare relationships between one model and another.      Graph database: anything is related to everything.      Storage and retrieval.  Data structres that power your database:          Hash indexes:                  Basically key-value pairs where each key is mapped to a byte offset in the data file.          Can also split it into smaller chunks/segments for easy storing.          Even though it’s easy to understand and implement, it has memory constrains that the hash table must fit in memory. Also range queries are not efficient since hashed keys are not put next to each other.                    Sorted String Table (SSTable) and Log-Structured Merge-Tree (LSM-trees):                  SSTable maintains a list of key-value pairs that is sorted by key.          The table can also be split into smaller segments and merging is simple as it is sorted.          Maintaining a sorted structure on disk is possible, though keeping it in memory is easy as we can use a tree data structure such as Red-Black trees or AVL trees (memtable).          If the database crashes, memtable might be lost though we can keep a separate log for it, inspired by LSM-tree indexing structure.                    B-trees:                  Like SSTables, B-trees keep key-value pairs sorted by key, which allows efficient key-value lookups and range queries.          Instead of breaking down the database into variable-size segments and always writing sequentially, B-trees break into fixed-size blocks/pages and reading/writing one page at a time.          Every modification is first written to a write-ahead log (WAL) so that the index can be restored to a consistent state after a crash.                      Transactional processing or analytic?          The basic database access pattern is similar to processing business transaction (create, read, update, delete record), as known as online transaction processing (OLTP).      Since OLTP are expected to be highly available as they’re critical to the operation of the business, they’re reluctant to let business analysts run ad-hoc analytic queries.      A data warehouse is a separate database that analysts can query without affecting OLTP operations.                  Data is extracted from OLTP databases, transformed into an analysis-friendly schema, cleaned up, and then loaded into the data warehouse.          A big advantage of using a separate data warehouse is that the data warehouse can be optimized for analytic access patterns.          2 popular schemas that data are stored in are star schema, snowflake schema.                      Column-oriented storage:          In most OLTP databases, storage is laid out in a row-oriented fashion: all the values from one row of a table are stored next to each other. In the column-oriented storage, all the values are stored from each column together instead.      Since the sequences of values for each column are often look repetitive (distinct values are small), they often lend themselves well to compression.        Aggregation:          Since data warehouse queries often involve an aggregate function, such as COUNT, SUM, AVG, MIN or MAX, we can cache these aggregated values that are used often.      One way of creating such a cache is a materialized view, while data cube is a special case.      Encoding and evolution.  Formats for encoding data.          Many languages come with built-in support for encoding in-memory objects to byte sequences though they are not used because it’s language-specific and don’t show good performance.      JSON, XML are widely known, supported due to the fact that they are simple, can be used by many languages and have built-in support for web browser. However, there are a lot of ambiguity around the encoding of numbers and they also don’t support binary encoding (compact, efficient encoding). Hence the development of MessagePack, BSON, BJSON, and so on.      Thrift and Protocol Buffers are binary encoding libraries that require a schema for any data that is encoded, that is clearly defined forward and backward compatibility semantics. They come with a code generation tool that produces classes that implement the schema in various programming languages.      There’s is also a binary encoding library Avro that is good for processing large files as in Hadoop’s use cases.        Modes of data flow (from one process to anther).          Databases: the process writing to the database encodes the data, and the process reading from the database decodes it.      Calls to services, REST and RPC (gRPC): client encodes a request, server decodes the request and encodes a response, and client finally decodes the response.      Asynchronous message-passing (RabbitMQ, Apache Kafka): nodes send each other messages that are encoded by the sender and decoded by the recipient.      Replication, partitioning/sharding, transactions, and what it means to achieve consistency and consensus in a distributed system.Replication.  Why would you want to replicate data?          Reduce latency by keeping data geographically close to users.      Increase availability.      Increase throughput.        2 types of algorithms are leader-based replication and leaderless replication.  Leader-based replication:          Workflow:                  One of the replicas is designed as the leader while others are followers.          Client must send write request to the leader though can send read request to both leader and followers.          After the leader writes data to its local storage, it sends the changes to all of its followers so that they can self apply accordingly.                    An important detail of a replicated system is whether the replication happens synchronously or asynchronously.                  Even though the advantage of synchronous replication is that followers is that the follower is guaranteed to have an up-to-date data, if the synchronous follower doesn’t respond, the write cannot be processed, thus the leader must block all writes and wait until one is available again.          It is impractical for all followers to be synchronous so leader-based replication is often configured to be completely asynchronous.                    From time to time, you need to set up new followers to increase the number of replicas, or to replace failed nodes. This can usually be done without downtime by maintaining a consistent snapshot of the leader’s database.      If the follower goes down, it can recover quite easily from its logs that it has received from the leader. Later when it’s able to talk to the leader again, it can request all the missing data and catch up to the leader.      If the leader goes down, a possible approach is failover: one of the followers needs to be promoted to be the new leader using a consensus algorithm, clients and followers need to be configured to talk to the new leader. However, failover can go wrong as well (two leaders, choosing the right timeout before the leader is declared dead,…) as there are no easy solutions to these.      Different implementation of replication logs:                  Statement-based replication: the leader logs every write request that it executes, and sends that statement log to its followers. Even though it seems reasonable, non-deterministic function, such as NOW() to get current date and time, is likely to generate a different value on each replica.          Write-ahead log (WAL) shipping: similar to B-tree’s approach where every modification is first written to a WAL, besides writing the log to disk, the leader also sends it to its followers so that they can build a copy of the exact same data structures as found on the leader.          Logical log replication: allow the replication log to be decoupled from the storage engine by using different log formats.          Trigger-based replication: register a trigger to only replicate subset of the data, or from one kind of database to another and so on.                    Replication lags:                  If the user view the data shortly after making the write, new data may have not yet reach the replica. In this case, we need read-after-write consistency, meaning we can read from the leader first, so that user always see their latest changes.          If a user makes several reads from different replicas and there’s lagging among replicas, they might not see the correct data. Monotonic reads guarantee that this kind of anomaly does not happen by making sure that each user always makes their reads from the same replica.          If some followers are replicated slower than others, an observer may see the answer before they see the question. Preventing this kind of anomaly requires consistent prefix reads so that if a sequence of writes happens in a certain order, then anyone reading those writes will see them appear in the same order.                      Multi-leader replication:          Use cases:                  Multi-datacenter operation: each datacenter has its own leader. This can improve perfomance, tolerance of datacenter outages though same data may be concurrently modified in two different datacenters, and those write conflicts must be resolved.          Client with offline operation: every client has a local database that acts as a leader, and there is an asynchronous multi-leader replication process (sync) between the replicas on all of your clients.          Real-time collaborative editing: when one user edits a document, the changes are instantly applied to their local replica and asynchronously replicated to the server and any other users who are editing the same document.                    Handling write conflicts:                  A write conflict can be caused by two leaders concurrently updating the same record. In a single-leader scenario, it can’t happen since the second leader will wait for the first write or abort it. In a multi-leader one, both writes are successful and the conflict can only be detected asynchronously at later point in time.          The simplest way for dealing with multi-leader write conflicts is to avoid them by making sure all writes go through the same designated leader.          Since there is no defined ordering of writes in a multi-leader database, it’s unclear what the final value should be in all replicas. A number of ways to converge to the final value include giving each writes a unique ID and picking one with the highest ID as the winner, somehow merging values together,…                    Topologies: communication paths along which writes are propagated from one node to another.                  The most general topology is all-to-all where every leader sends its writes to every other leader. Other popular ones are circular and star topology.          A problem with circular and star topologies is that if one node fails, the path is broken, resulting in some nodes are not connected others.          Even though all-to-all topologies avoid a single point of failure, they can also have issues that some replications are faster and can overtake others. A technique called version vectors can be used to order these events correctly.                      Leaderless replication: client writes to several replicas or a coordinator node does this on behalf of the client.          A failover does not exist in a leaderless replication. If a node is down, client writes to all available replicas in parallel, verify if they’re successful and simply ignore the one unavailable replica. Read requests are also sent to several nodes in parallel to avoid stale values.      To ensure all up-to-date data is copied to every replica, two often used mechanisms are read repair (make requests to several nodes in parallel and detect stale values using versioning), anti-entropy process (background process that constantly looks for differences in the data between replicas and copies any missing data from one replica to another).      If there are n replicas, every write must be confirmed by w nodes to be considered successful, and we must query at least r nodes for each read, as long as w + r &gt; n, we expect to get an up-to-date value when reading, because at least one of the r nodes we’re reading from must be up-to-date. However, there’re still edge cases when stale values are return:                  Using a sloppy quorum.          Two writes happen concurrently, or with read.          A node carrying a failed value.                    For multi-datacenter operation, some implementation of leaderless replication keeps all communication between clients and database nodes local to one datacenter, so n describes the number of replicas within one datacenter. Cross-datacenter replication works similarly to multi-leader replication.      Handling concurrent write conflicts:                  Last write wins: attach a timestamp to each write, pick the biggest timestamp as the most ‘recent’, and discard any writes with a lower timestamp.          Version vectors:                          For a singple replica, the algorithm works as follow:                                  A server maintains a version number for every key, increments the version number every time that key is written, and stores the new version number along with the value written.                  A client must read a key before writing. When a client writes a key, it must include the version number from the prior read, and it must merge together all values that it received in the prior read.                  When the server receives a write with a particular version number, it can overwrite all values with that version number or below but it must keep all values with a higher version number.                                            For multiple replicas:                                  We need to use a version number per replica as well as per key.                  Each replica increments its own version number when processing a write, and also keeps track of the version numbers it has seen from all of the other replicas.                                                                        Partitioning/sharding.  The main reason for partitioning is scalability: partitions can be distributed across many nodes, disks, and so on.  It is usually combined with replication so that copies of each partitions are stored on multiple nodes.  The goal of partitioning is to spread the data and query load evenly across nodes.  Partitioning of key-value data.          One way of partitioning is to assign a continuous range of keys to each partition. However, the downside is that certain patterns can lead to high load.      Another way is to use a hash function to determine the partition for a given key. A downside is the ability to efficiently do range queries as adjacent keys are now scattered across all partitions.        Partitioning and secondary indexes.          Partitioning becomes more complicated if secondary indexes are involved since they don’t identify records uniquely but rather, it’s a way of searching for occurrences of a particular value.      Two main approaches are document-based partitioning and term-based partitioning.      With document-based partitioning, each partition maintains its own secondary indexes covering only the documents in that partition. Since it doesn’t care about other partitions, reading from it can be quite expensive since one need to query all partitions and aggregate everything for more exact results.      With term-based partitioning, rather than each partition having its own secondary index, we can construct a global index that covers data in all partitions. This can make reads more efficient rather than doing scatter/gather over all partitions. The downside is that writes are now slower and more complicated, because a write to a single document may now affect multiple partitions of the index.        Rebalancing partitions as we increase our nodes and machines over time.          Mod N approach is problematic when the number of nodes N changes, most of the keys need to be moved as well.      A simple solution is to create many more partitions than there are nodes, and assign several partitions to each node. If a new node is added, it can steal a few partitions from every existing node.      Rebalancing can be done automatically, though it won’t hurt to have a human in the loop to help prevent operational surprises.        Request routing/service discovery.          After the partitioning and rebalancing, how does the client know which node to connection to?                  Client can talk to any node and forward the request to the appropriate node if needed.          Client can talk to a routing tier that determines the node that should handle the request and forwards it accordingly.                    Transactions.  Atomicity, Consistency, Isolation and Durability (ACID).          Since transactions are often composed of multiple statements, atomicity guarantees that each transaction is treated as a single “unit”, which either succeeds completely, or fails completely.      Consistency ensures that a transaction can only bring the database from one valid state to another, maintaining database invariants.      Isolation means that concurrently executing transactions are isolated from each other.      Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure.        Weak isolation levels.          Database hides concurrency issues from application developers by providing transaction isolation, especially serializable isolation, by guaranteeing that have transactions the same effect as if they ran serially, one at a time without any concurrency.      In practice, serializable isolation has a performance cost and many databases don’t want to pay that price. Instead, they use weaker levels of isolation.      Read committed.                  When reading from the database, you will only see data that has been committed.          When writing to the database, you will only overwrite data that has been committed.                    Snapshot isolation or Multiversion Concurrency Control (MVCC).                  Each transaction read from a consistent snapshot of the database. Each transaction sees the latest data from the time it starts.                    Preventing lost update.                  Lost update can occur if two transations modify the value concurrently that one modification is lost.          2 popular approaches are to use atomic write and locking.                    Preventing write skew and phantoms.                  Write skew is a generalization of lost update. It happens when two transaction update some of the same objects, not just the same object.          Phantom happens while a write in one transaction change the result of a search query in another transaction.          Since multiple objects are involved, atomic single-object or snapshot isolation write doesn’t help as it doesn’t prevent valid conflicting concurrent writes.          A simple and straightforward solution is to use serializable isolation.                      Implementation of serializable isolation.          Actual serial execution.                  The best way to avoid concurrency issue is to execute only one transaction at a time, in serial order, on a single thread.          The entire transaction is submitted as a stored procedure as the data must be small and fast.                    Two-phase locking (2PL).                  2PL has really strong requirements where writers don’t just block writers, readers also block writers and vice versa.          The big downside is performance as it hasn’t used a lot in practice.                    Serializable snapshot isolation (SSI).                  As serial isolation doesn’t scale well and 2PL doesn’t perform well, SSI is promising since it provides full serializability and has only a small performance penalty compared to snapshot isolation.          It allows transactions to proceed without blocking. When a transaction wants to commit, it is checked, and aborted if the execution was not serializable.                    Things that may go wrong in a distributed system.  A partial failure is when there are some parts of the system that are broken in some unpredictable ways even though the rest are working fine. And since partial failures are non-deterministic in a sense that your solution might sometimes unpredictably fail, it distributed systems hard to work with.  Unreliable networks.          There are many things could go wrong with a networking request such as your request may have been lost, be waiting in a queue, the remote node may have failed, the response has been lost, delayed, and so on.      Network problem can be surprisingly common in practice.      Timeout is normally a good way to detect a fault. Rather than using a configured constant timeouts, system can automatically adjust timeouts according to the observed response time distribution.        Unreliable clocks.          Time is tricky since communication is not instantaneous, it takes time for a message to travel from one point to another, and because of variable delayed in network with multiple machines are involved, it’s hard to determine the order of operations.      Modern computers have at least two different kinds of clock:                  A time-of-day clock, which are usually synchronized with Network Time Protocol (NTP), which means that a timestamp from one machine (ideally) means the same as a timestamp on another machine.          A monotonic clock is suitable for measuring a duration such as a timeout or a service’s response time.                    Time-of-day clocks need to be set according to an NTP in order to be useful though this isn’t as reliable as we hope as he quartz clock in a computer is not very accurate, if a computer’s clock differs too much from an NTP server, it may refuse to synchronize, NTP synchronization can only be as good as the network delay, NTP servers could be wrong or misconfigured, the hardware clock is virtualized in virtual machines, and so on.      If you use software that requires synchronized clocks, it is essential that you also carefully monitor the clock offsets between all the machines.        Knowledge, truth and lies.          A distributed system cannot exclusively rely on a single node, because a node may fail at any time, potentially leaving the system stuck and unable to recover. Instead, many distributed algorithms rely on a quorum where decisions are made by a majority of nodes.      Distributed systems problems become much harder if there is a risk that nodes may lie, such as claiming unreceived messages from other node or sending untrue messages to other nodes, it’s known as Byzantine fault.      Consistency and consensus.  Most replicated databases provide at least eventual consistency, which means that if you stop writing to the database and wait for some unspecified length of time, then eventually all read requests will return the same value. However, this is a very weak guarantee as it doesn’t say anything about when the replicas will converge. Below we’re looking at stronger consistency models and discussing their trade-offs.  Linearizability makes a system appear as if there was only one copy of the data, and all operations on it are atomic.          It is useful in such circumstances:                  A system needs to ensure that there is indeed only one leader.          Constraints and uniqueness guarantees in database: user’s username or email must be unique, two people can’t have the same seat on a flight,…          Cross-channel timing dependencies: web server and image resizer communicate both through file storage and a message queue, opening the potential for race conditions,…                    CAP (Consistency, Availability, Partition tolerance) theorem to pick 2 out of 3:                  If the application requires linearizability, some replicas are disconnected from the other replicas due to a network problem, then some replicas cannot process requests while they are disconnected, or unavailable.          If the application does not require linearizability, each replica can process requests independently, even if it is disconnected from other replica.          A better way of phrasing CAP would be either Consistent or Available when Partitioned                    Few systems are actually linearizable in practice since most of them concern about their performance and availability.        Ordering guarantees.          In order to maintain causality, you need to know which operation happened before which other operation. One way is to use sequence numbers or timestamps to order events such as Lamport timestamp.      However, in order to implement something like a uniqueness constraint for usernames, it’s not sufficient to have a total ordering of operations as you also need to know when that order is finalized, aka total order broadcast.      Total order broadcast says that if every message represents a write to the database, and every replica processes the same writes in the same order, then the replicas will remain consistent with each other.        Distributed transaction and consensus.          There are several situations in which it is important for nodes to reach consensus such as leader election and atomic commit in database.      2-phase commit (2PC) algorithm is the most common way for achieving atomic transaction commit across multiple nodes.                  2PC uses a new component as a coordinator to manage all nodes.          The application first requests a globally unique transaction ID from the coordinator for transaction.          When the application is ready to commit, the coordinator begins phase 1: send a prepare request to each of the nodes, tagged with the ID, asking them whether they are able to commit.          If all participants reply “yes”, the coordinator sends out a commit request to all nodes in phase 2, while if any of them says “no”, the coordinator sends an abort request.          If the coordinator fails after all participants reply “yes” in phase 1, participants have no way of knowing whether to commit or abort in phase 2. The only way how this can complete is to wait for the coordinator to recover.          Three-phase commit (3PC) has been proposed as alternative to 2PC. However, it assumes a network with bounded delay and nodes with bounded response times which is not practical in most systems.                    Distributed transactions in practice has mixed reputation. On one hand, they provide an important safety guarantee. On the other hand, it causes operational problems, kill perfomance and so on.                  There are two types of distributed transaction are often conflated: database-internal distributed transactions (distributed databases that support internal transactions among the nodes of that database) and heterogeneous distributed transactions (participants are two or more different technologies).          That said, database-internal distributed transactions can often work quite well though transactions spanning heterogeneous technologies are a lot more challenging.                    The best-known fault-tolerant consensus algorithms are Viewstamped Replication (VSR), Paxos, Raft and Zab as most of them provide total order broadcast. However, they’re not used everywhere since they all come with performance costs.      ZooKeeper or etcd implements a consensus algorithm though they are often described as distributed key-value stores. They are not use directly in your application but via some other projects for distributed coordination, work allocation, service discovery, membership services.      Batch and stream processing.Batch processing.  With basic Unix tools (awk, sed, grep, sort, uniq, xarg, pipe,…), one can do a lot of powerful data processing jobs. A simple chain of Unix commands can actually perform surprisingly well as it can easily scale to large datasets, without running out of memory.  MapReduce is a bit like Unix tools, but distributed across potentially thousands of machines.          While Unix tools use stdin and stdout as input and output, MapReduce jobs read and write files on a distributed filesystem like Google’s GFS.      As the name suggested, 2 callback functions in MapReduce are map and reduce. Map extracts they key and value from the input record while reduce iterates over that collection of values with the same key and produce zero or more outputs. They’re stateless function as they also don’t modify output. Since the input is also bounded, the output is guaranteed to be completed.      The main difference to pipelines of Unix commands is that MapReduce can parallelize a computation across many machines out-of-the-box.      Your code does not need to worry about implementing fault tolerance mechanisms since the framework can guarantee that the final output of a job is the same as if no faults had occurred, even though in reality various tasks perhaps had to be retried.      It’s common for MapReduce jobs to be chained together into workflows, such that the output of one job becomes the input to the next job.      There are several join algorithms for MapReduce such as sort-merge joins, broadcast hash joins, partitioned hash joins that allow us to use joins more efficiently.      Stream processing.  In batch process, the input is bounded that it’s known and have finite size. In reality, a lot of data is unbounded, arrives gradually over time and never complete in any meaningful way, that batch processors must divide and process them in chunks. However, that takes a long time for impatient users. Stream processing is introduced as it simply processes every event as it happens.  An event is generated once by a producer/publisher/sender and processed by multiple consumers/subscribers/recipients.  A common approach for notifying consumers about new events is to use a messaging system: a producer sends a message containing the event, which is then pushed to consumers.          A number of messaging systems use direct network communication between producers and consumers, without going via intermediary nodes such as UDP multicast, ZeroMQ, webhooks,…      A widely-used alternative is to send messages via a message broker/message queue. Two types of them are:                  AMQP/JMS-style message brokers: the broker assigned individual messages to consumers, consumers acknowledge when they have been successfully processed.          Log-based message brokers: the broker assigns all messages in a partition to the same consumer node, and always delivers messages in the same order while consumers keep their logs.                    When multiple consumers are reading messages in the same topic, two main patterns of messaging are load balancing and fan out.        It’s also useful to think of the writes to a database as a stream that it can capture the changelog, either implicitly through change data capture or explicitly through event sourcing as it also opens up powerful opportunities for integrating systems.          You can keep derived data systems such as search indexes, caches and analytics systems continually up-to-date by consuming the log of changes and applying them to the derived system.      You can even build fresh views onto existing data by starting from scratch and consuming the log of changes from the beginning all the way to the present.        Stream processing has long been used for monitoring purposes, where an organization wants to be alerted if certain things happen. However, other uses of stream processing have also emerged over time.          Complex event processing (CEP) allows you to specify rules to search for certain patterns of events in a stream.      Analytics that are more oriented towards aggregations and statistical metrics over a large number of events are also used.      It can be used to maintain materialized views onto some dataset, so that you can query it efficiently, and updating that view whenever the underlying data changes.        Stream processing frameworks use the local system clock on the processing machine to determine windowing. Even though it’s simple to implement and reason about, it breaks down if there is any significant processing lag.  There are 3 types of join that may appear in stream processes:          Stream-stream joins: matching two events that occur within some window of time.      Stream-table joins: one input stream consists of activity events, while the other is a database changelog.      Table-table joins: both input streams are database changelogs where every change on one side is joined with the latest state of the other side.        To tolerate faults, one solution is to break the stream into small blocks, and treat each block like a miniature batch process (microbatching). Other is to use idempotent writes.References:  https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications  https://en.wikipedia.org/wiki/ACID",
            "content_html": "<h2> Table of Contents </h2><ul id=\"markdown-toc\">  <li><a href=\"#4-fundamental-ideas-that-we-need-in-order-to-design-data-intensive-applications\" id=\"markdown-toc-4-fundamental-ideas-that-we-need-in-order-to-design-data-intensive-applications\">4 fundamental ideas that we need in order to design data-intensive applications.</a>    <ul>      <li><a href=\"#reliable-scalable-maintainable-applications\" id=\"markdown-toc-reliable-scalable-maintainable-applications\">Reliable, scalable, maintainable applications.</a></li>      <li><a href=\"#data-models-and-query-languages\" id=\"markdown-toc-data-models-and-query-languages\">Data models and query languages.</a></li>      <li><a href=\"#storage-and-retrieval\" id=\"markdown-toc-storage-and-retrieval\">Storage and retrieval.</a></li>      <li><a href=\"#encoding-and-evolution\" id=\"markdown-toc-encoding-and-evolution\">Encoding and evolution.</a></li>    </ul>  </li>  <li><a href=\"#replication-partitioningsharding-transactions-and-what-it-means-to-achieve-consistency-and-consensus-in-a-distributed-system\" id=\"markdown-toc-replication-partitioningsharding-transactions-and-what-it-means-to-achieve-consistency-and-consensus-in-a-distributed-system\">Replication, partitioning/sharding, transactions, and what it means to achieve consistency and consensus in a distributed system.</a>    <ul>      <li><a href=\"#replication\" id=\"markdown-toc-replication\">Replication.</a></li>      <li><a href=\"#partitioningsharding\" id=\"markdown-toc-partitioningsharding\">Partitioning/sharding.</a></li>      <li><a href=\"#transactions\" id=\"markdown-toc-transactions\">Transactions.</a></li>      <li><a href=\"#things-that-may-go-wrong-in-a-distributed-system\" id=\"markdown-toc-things-that-may-go-wrong-in-a-distributed-system\">Things that may go wrong in a distributed system.</a></li>      <li><a href=\"#consistency-and-consensus\" id=\"markdown-toc-consistency-and-consensus\">Consistency and consensus.</a></li>    </ul>  </li>  <li><a href=\"#batch-and-stream-processing\" id=\"markdown-toc-batch-and-stream-processing\">Batch and stream processing.</a>    <ul>      <li><a href=\"#batch-processing\" id=\"markdown-toc-batch-processing\">Batch processing.</a></li>      <li><a href=\"#stream-processing\" id=\"markdown-toc-stream-processing\">Stream processing.</a></li>    </ul>  </li></ul><hr /><h2 id=\"4-fundamental-ideas-that-we-need-in-order-to-design-data-intensive-applications\">4 fundamental ideas that we need in order to design data-intensive applications.</h2><h3 id=\"reliable-scalable-maintainable-applications\">Reliable, scalable, maintainable applications.</h3><ul>  <li>Reliability means continuing to work correctly, even when things go wrong. Common faults and preventions include:    <ul>      <li>Hardware faults: hard disks crash, blackout, incorrect network configuration,…        <ul>          <li>Add redundancy to individual hardware components to reduce the failure rate.</li>          <li>As long as we can restore a backup onto a new machine quickly, the downtime is not fatal.</li>        </ul>      </li>      <li>Software faults: bug, out of shared resources, unresponsive service, cascading failure,…        <ul>          <li>There’s no quick solution other than thorough testing, measuring, monitoring, analyzing.</li>        </ul>      </li>      <li>Human errors: design error, configuration error,…        <ul>          <li>Enforce good design, good practice and training.</li>          <li>Decouple the places where people make the most mistake.</li>          <li>Automate testing: unit test, integration test, end-to-end test.</li>          <li>Allow quick recovery rollback strategy.</li>          <li>Set up details monitoring</li>        </ul>      </li>    </ul>  </li>  <li>Scalability describes a system’s ability to cope with increased load.    <ul>      <li>Describing load: requests per second, read/write radio, active users, cache hit rate,…</li>      <li>Describing performance:        <ul>          <li>When you increase a load parameter, keep system resources unchanged, how is performance affected?</li>          <li>When you increase a load parameter, how much do you increase the resources if you want to keep performance unchanged?</li>        </ul>      </li>      <li>Approaches for coping with load:        <ul>          <li>Scaling up (vertical scaling): move to a more powerful machine.</li>          <li>Scaling out (horizontal scaling): distribute the load across different machines.</li>        </ul>      </li>    </ul>  </li>  <li>Maintainability focuses on 3 design principles:    <ul>      <li>Operability: make it easy for operation teams to keep the system running smoothly.        <ul>          <li>Provide monitoring system health.</li>          <li>Support for automation and integration tools.</li>          <li>Have Good documentation.</li>        </ul>      </li>      <li>Simplicity: make it easy for new engineers to understand the system.        <ul>          <li>Provide good abstraction layers that allow us to extract parts of a large system into well-defined, reusable components.</li>        </ul>      </li>      <li>Evolvability: make it easy for engineers to make changes.        <ul>          <li>Follow agile approach.</li>        </ul>      </li>    </ul>  </li></ul><h3 id=\"data-models-and-query-languages\">Data models and query languages.</h3><ul>  <li>Data started out being represented as one big tree, though it wasn’t good for representing many-to-many relationships models, so the relational model was invented.</li>  <li>However, some applications didn’t fit well into the relational model, non-relational NoSQL was born:    <ul>      <li>Document database: self-contained documents, rare relationships between one model and another.</li>      <li>Graph database: anything is related to everything.</li>    </ul>  </li></ul><h3 id=\"storage-and-retrieval\">Storage and retrieval.</h3><ul>  <li>Data structres that power your database:    <ul>      <li>Hash indexes:        <ul>          <li>Basically key-value pairs where each key is mapped to a byte offset in the data file.</li>          <li>Can also split it into smaller chunks/segments for easy storing.</li>          <li>Even though it’s easy to understand and implement, it has memory constrains that the hash table must fit in memory. Also range queries are not efficient since hashed keys are not put next to each other.</li>        </ul>      </li>      <li>Sorted String Table (SSTable) and Log-Structured Merge-Tree (LSM-trees):        <ul>          <li>SSTable maintains a list of key-value pairs that is sorted by key.</li>          <li>The table can also be split into smaller segments and merging is simple as it is sorted.</li>          <li>Maintaining a sorted structure on disk is possible, though keeping it in memory is easy as we can use a tree data structure such as Red-Black trees or AVL trees (memtable).</li>          <li>If the database crashes, memtable might be lost though we can keep a separate log for it, inspired by LSM-tree indexing structure.</li>        </ul>      </li>      <li>B-trees:        <ul>          <li>Like SSTables, B-trees keep key-value pairs sorted by key, which allows efficient key-value lookups and range queries.</li>          <li>Instead of breaking down the database into variable-size segments and always writing sequentially, B-trees break into fixed-size blocks/pages and reading/writing one page at a time.</li>          <li>Every modification is first written to a write-ahead log (WAL) so that the index can be restored to a consistent state after a crash.</li>        </ul>      </li>    </ul>  </li>  <li>Transactional processing or analytic?    <ul>      <li>The basic database access pattern is similar to processing business transaction (create, read, update, delete record), as known as online transaction processing (OLTP).</li>      <li>Since OLTP are expected to be highly available as they’re critical to the operation of the business, they’re reluctant to let business analysts run ad-hoc analytic queries.</li>      <li>A data warehouse is a separate database that analysts can query without affecting OLTP operations.        <ul>          <li>Data is extracted from OLTP databases, transformed into an analysis-friendly schema, cleaned up, and then loaded into the data warehouse.</li>          <li>A big advantage of using a separate data warehouse is that the data warehouse can be optimized for analytic access patterns.</li>          <li>2 popular schemas that data are stored in are star schema, snowflake schema.</li>        </ul>      </li>    </ul>  </li>  <li>Column-oriented storage:    <ul>      <li>In most OLTP databases, storage is laid out in a row-oriented fashion: all the values from one row of a table are stored next to each other. In the column-oriented storage, all the values are stored from each column together instead.</li>      <li>Since the sequences of values for each column are often look repetitive (distinct values are small), they often lend themselves well to compression.</li>    </ul>  </li>  <li>Aggregation:    <ul>      <li>Since data warehouse queries often involve an aggregate function, such as COUNT, SUM, AVG, MIN or MAX, we can cache these aggregated values that are used often.</li>      <li>One way of creating such a cache is a materialized view, while data cube is a special case.</li>    </ul>  </li></ul><h3 id=\"encoding-and-evolution\">Encoding and evolution.</h3><ul>  <li>Formats for encoding data.    <ul>      <li>Many languages come with built-in support for encoding in-memory objects to byte sequences though they are not used because it’s language-specific and don’t show good performance.</li>      <li>JSON, XML are widely known, supported due to the fact that they are simple, can be used by many languages and have built-in support for web browser. However, there are a lot of ambiguity around the encoding of numbers and they also don’t support binary encoding (compact, efficient encoding). Hence the development of MessagePack, BSON, BJSON, and so on.</li>      <li>Thrift and Protocol Buffers are binary encoding libraries that require a schema for any data that is encoded, that is clearly defined forward and backward compatibility semantics. They come with a code generation tool that produces classes that implement the schema in various programming languages.</li>      <li>There’s is also a binary encoding library Avro that is good for processing large files as in Hadoop’s use cases.</li>    </ul>  </li>  <li>Modes of data flow (from one process to anther).    <ul>      <li>Databases: the process writing to the database encodes the data, and the process reading from the database decodes it.</li>      <li>Calls to services, REST and RPC (gRPC): client encodes a request, server decodes the request and encodes a response, and client finally decodes the response.</li>      <li>Asynchronous message-passing (RabbitMQ, Apache Kafka): nodes send each other messages that are encoded by the sender and decoded by the recipient.</li>    </ul>  </li></ul><h2 id=\"replication-partitioningsharding-transactions-and-what-it-means-to-achieve-consistency-and-consensus-in-a-distributed-system\">Replication, partitioning/sharding, transactions, and what it means to achieve consistency and consensus in a distributed system.</h2><h3 id=\"replication\">Replication.</h3><ul>  <li>Why would you want to replicate data?    <ul>      <li>Reduce latency by keeping data geographically close to users.</li>      <li>Increase availability.</li>      <li>Increase throughput.</li>    </ul>  </li>  <li>2 types of algorithms are leader-based replication and leaderless replication.</li>  <li>Leader-based replication:    <ul>      <li>Workflow:        <ul>          <li>One of the replicas is designed as the leader while others are followers.</li>          <li>Client must send write request to the leader though can send read request to both leader and followers.</li>          <li>After the leader writes data to its local storage, it sends the changes to all of its followers so that they can self apply accordingly.</li>        </ul>      </li>      <li>An important detail of a replicated system is whether the replication happens synchronously or asynchronously.        <ul>          <li>Even though the advantage of synchronous replication is that followers is that the follower is guaranteed to have an up-to-date data, if the synchronous follower doesn’t respond, the write cannot be processed, thus the leader must block all writes and wait until one is available again.</li>          <li>It is impractical for all followers to be synchronous so leader-based replication is often configured to be completely asynchronous.</li>        </ul>      </li>      <li>From time to time, you need to set up new followers to increase the number of replicas, or to replace failed nodes. This can usually be done without downtime by maintaining a consistent snapshot of the leader’s database.</li>      <li>If the follower goes down, it can recover quite easily from its logs that it has received from the leader. Later when it’s able to talk to the leader again, it can request all the missing data and catch up to the leader.</li>      <li>If the leader goes down, a possible approach is failover: one of the followers needs to be promoted to be the new leader using a consensus algorithm, clients and followers need to be configured to talk to the new leader. However, failover can go wrong as well (two leaders, choosing the right timeout before the leader is declared dead,…) as there are no easy solutions to these.</li>      <li>Different implementation of replication logs:        <ul>          <li>Statement-based replication: the leader logs every write request that it executes, and sends that statement log to its followers. Even though it seems reasonable, non-deterministic function, such as NOW() to get current date and time, is likely to generate a different value on each replica.</li>          <li>Write-ahead log (WAL) shipping: similar to B-tree’s approach where every modification is first written to a WAL, besides writing the log to disk, the leader also sends it to its followers so that they can build a copy of the exact same data structures as found on the leader.</li>          <li>Logical log replication: allow the replication log to be decoupled from the storage engine by using different log formats.</li>          <li>Trigger-based replication: register a trigger to only replicate subset of the data, or from one kind of database to another and so on.</li>        </ul>      </li>      <li>Replication lags:        <ul>          <li>If the user view the data shortly after making the write, new data may have not yet reach the replica. In this case, we need read-after-write consistency, meaning we can read from the leader first, so that user always see their latest changes.</li>          <li>If a user makes several reads from different replicas and there’s lagging among replicas, they might not see the correct data. Monotonic reads guarantee that this kind of anomaly does not happen by making sure that each user always makes their reads from the same replica.</li>          <li>If some followers are replicated slower than others, an observer may see the answer before they see the question. Preventing this kind of anomaly requires consistent prefix reads so that if a sequence of writes happens in a certain order, then anyone reading those writes will see them appear in the same order.</li>        </ul>      </li>    </ul>  </li>  <li>Multi-leader replication:    <ul>      <li>Use cases:        <ul>          <li>Multi-datacenter operation: each datacenter has its own leader. This can improve perfomance, tolerance of datacenter outages though same data may be concurrently modified in two different datacenters, and those write conflicts must be resolved.</li>          <li>Client with offline operation: every client has a local database that acts as a leader, and there is an asynchronous multi-leader replication process (sync) between the replicas on all of your clients.</li>          <li>Real-time collaborative editing: when one user edits a document, the changes are instantly applied to their local replica and asynchronously replicated to the server and any other users who are editing the same document.</li>        </ul>      </li>      <li>Handling write conflicts:        <ul>          <li>A write conflict can be caused by two leaders concurrently updating the same record. In a single-leader scenario, it can’t happen since the second leader will wait for the first write or abort it. In a multi-leader one, both writes are successful and the conflict can only be detected asynchronously at later point in time.</li>          <li>The simplest way for dealing with multi-leader write conflicts is to avoid them by making sure all writes go through the same designated leader.</li>          <li>Since there is no defined ordering of writes in a multi-leader database, it’s unclear what the final value should be in all replicas. A number of ways to converge to the final value include giving each writes a unique ID and picking one with the highest ID as the winner, somehow merging values together,…</li>        </ul>      </li>      <li>Topologies: communication paths along which writes are propagated from one node to another.        <ul>          <li>The most general topology is all-to-all where every leader sends its writes to every other leader. Other popular ones are circular and star topology.</li>          <li>A problem with circular and star topologies is that if one node fails, the path is broken, resulting in some nodes are not connected others.</li>          <li>Even though all-to-all topologies avoid a single point of failure, they can also have issues that some replications are faster and can overtake others. A technique called version vectors can be used to order these events correctly.</li>        </ul>      </li>    </ul>  </li>  <li>Leaderless replication: client writes to several replicas or a coordinator node does this on behalf of the client.    <ul>      <li>A failover does not exist in a leaderless replication. If a node is down, client writes to all available replicas in parallel, verify if they’re successful and simply ignore the one unavailable replica. Read requests are also sent to several nodes in parallel to avoid stale values.</li>      <li>To ensure all up-to-date data is copied to every replica, two often used mechanisms are read repair (make requests to several nodes in parallel and detect stale values using versioning), anti-entropy process (background process that constantly looks for differences in the data between replicas and copies any missing data from one replica to another).</li>      <li>If there are n replicas, every write must be confirmed by w nodes to be considered successful, and we must query at least r nodes for each read, as long as w + r &gt; n, we expect to get an up-to-date value when reading, because at least one of the r nodes we’re reading from must be up-to-date. However, there’re still edge cases when stale values are return:        <ul>          <li>Using a sloppy quorum.</li>          <li>Two writes happen concurrently, or with read.</li>          <li>A node carrying a failed value.</li>        </ul>      </li>      <li>For multi-datacenter operation, some implementation of leaderless replication keeps all communication between clients and database nodes local to one datacenter, so n describes the number of replicas within one datacenter. Cross-datacenter replication works similarly to multi-leader replication.</li>      <li>Handling concurrent write conflicts:        <ul>          <li>Last write wins: attach a timestamp to each write, pick the biggest timestamp as the most ‘recent’, and discard any writes with a lower timestamp.</li>          <li>Version vectors:            <ul>              <li>For a singple replica, the algorithm works as follow:                <ul>                  <li>A server maintains a version number for every key, increments the version number every time that key is written, and stores the new version number along with the value written.</li>                  <li>A client must read a key before writing. When a client writes a key, it must include the version number from the prior read, and it must merge together all values that it received in the prior read.</li>                  <li>When the server receives a write with a particular version number, it can overwrite all values with that version number or below but it must keep all values with a higher version number.</li>                </ul>              </li>              <li>For multiple replicas:                <ul>                  <li>We need to use a version number per replica as well as per key.</li>                  <li>Each replica increments its own version number when processing a write, and also keeps track of the version numbers it has seen from all of the other replicas.</li>                </ul>              </li>            </ul>          </li>        </ul>      </li>    </ul>  </li></ul><h3 id=\"partitioningsharding\">Partitioning/sharding.</h3><ul>  <li>The main reason for partitioning is scalability: partitions can be distributed across many nodes, disks, and so on.</li>  <li>It is usually combined with replication so that copies of each partitions are stored on multiple nodes.</li>  <li>The goal of partitioning is to spread the data and query load evenly across nodes.</li>  <li>Partitioning of key-value data.    <ul>      <li>One way of partitioning is to assign a continuous range of keys to each partition. However, the downside is that certain patterns can lead to high load.</li>      <li>Another way is to use a hash function to determine the partition for a given key. A downside is the ability to efficiently do range queries as adjacent keys are now scattered across all partitions.</li>    </ul>  </li>  <li>Partitioning and secondary indexes.    <ul>      <li>Partitioning becomes more complicated if secondary indexes are involved since they don’t identify records uniquely but rather, it’s a way of searching for occurrences of a particular value.</li>      <li>Two main approaches are document-based partitioning and term-based partitioning.</li>      <li>With document-based partitioning, each partition maintains its own secondary indexes covering only the documents in that partition. Since it doesn’t care about other partitions, reading from it can be quite expensive since one need to query all partitions and aggregate everything for more exact results.</li>      <li>With term-based partitioning, rather than each partition having its own secondary index, we can construct a global index that covers data in all partitions. This can make reads more efficient rather than doing scatter/gather over all partitions. The downside is that writes are now slower and more complicated, because a write to a single document may now affect multiple partitions of the index.</li>    </ul>  </li>  <li>Rebalancing partitions as we increase our nodes and machines over time.    <ul>      <li>Mod N approach is problematic when the number of nodes N changes, most of the keys need to be moved as well.</li>      <li>A simple solution is to create many more partitions than there are nodes, and assign several partitions to each node. If a new node is added, it can steal a few partitions from every existing node.</li>      <li>Rebalancing can be done automatically, though it won’t hurt to have a human in the loop to help prevent operational surprises.</li>    </ul>  </li>  <li>Request routing/service discovery.    <ul>      <li>After the partitioning and rebalancing, how does the client know which node to connection to?        <ul>          <li>Client can talk to any node and forward the request to the appropriate node if needed.</li>          <li>Client can talk to a routing tier that determines the node that should handle the request and forwards it accordingly.</li>        </ul>      </li>    </ul>  </li></ul><h3 id=\"transactions\">Transactions.</h3><ul>  <li>Atomicity, Consistency, Isolation and Durability (ACID).    <ul>      <li>Since transactions are often composed of multiple statements, atomicity guarantees that each transaction is treated as a single “unit”, which either succeeds completely, or fails completely.</li>      <li>Consistency ensures that a transaction can only bring the database from one valid state to another, maintaining database invariants.</li>      <li>Isolation means that concurrently executing transactions are isolated from each other.</li>      <li>Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure.</li>    </ul>  </li>  <li>Weak isolation levels.    <ul>      <li>Database hides concurrency issues from application developers by providing transaction isolation, especially serializable isolation, by guaranteeing that have transactions the same effect as if they ran serially, one at a time without any concurrency.</li>      <li>In practice, serializable isolation has a performance cost and many databases don’t want to pay that price. Instead, they use weaker levels of isolation.</li>      <li>Read committed.        <ul>          <li>When reading from the database, you will only see data that has been committed.</li>          <li>When writing to the database, you will only overwrite data that has been committed.</li>        </ul>      </li>      <li>Snapshot isolation or Multiversion Concurrency Control (MVCC).        <ul>          <li>Each transaction read from a consistent snapshot of the database. Each transaction sees the latest data from the time it starts.</li>        </ul>      </li>      <li>Preventing lost update.        <ul>          <li>Lost update can occur if two transations modify the value concurrently that one modification is lost.</li>          <li>2 popular approaches are to use atomic write and locking.</li>        </ul>      </li>      <li>Preventing write skew and phantoms.        <ul>          <li>Write skew is a generalization of lost update. It happens when two transaction update <strong>some</strong> of the same objects, not just the same object.</li>          <li>Phantom happens while a write in one transaction change the result of a search query in another transaction.</li>          <li>Since multiple objects are involved, atomic single-object or snapshot isolation write doesn’t help as it doesn’t prevent valid conflicting concurrent writes.</li>          <li>A simple and straightforward solution is to use serializable isolation.</li>        </ul>      </li>    </ul>  </li>  <li>Implementation of serializable isolation.    <ul>      <li>Actual serial execution.        <ul>          <li>The best way to avoid concurrency issue is to execute only one transaction at a time, in serial order, on a single thread.</li>          <li>The entire transaction is submitted as a stored procedure as the data must be small and fast.</li>        </ul>      </li>      <li>Two-phase locking (2PL).        <ul>          <li>2PL has really strong requirements where writers don’t just block writers, readers also block writers and vice versa.</li>          <li>The big downside is performance as it hasn’t used a lot in practice.</li>        </ul>      </li>      <li>Serializable snapshot isolation (SSI).        <ul>          <li>As serial isolation doesn’t scale well and 2PL doesn’t perform well, SSI is promising since it provides full serializability and has only a small performance penalty compared to snapshot isolation.</li>          <li>It allows transactions to proceed without blocking. When a transaction wants to commit, it is checked, and aborted if the execution was not serializable.</li>        </ul>      </li>    </ul>  </li></ul><h3 id=\"things-that-may-go-wrong-in-a-distributed-system\">Things that may go wrong in a distributed system.</h3><ul>  <li>A partial failure is when there are some parts of the system that are broken in some unpredictable ways even though the rest are working fine. And since partial failures are non-deterministic in a sense that your solution might sometimes unpredictably fail, it distributed systems hard to work with.</li>  <li>Unreliable networks.    <ul>      <li>There are many things could go wrong with a networking request such as your request may have been lost, be waiting in a queue, the remote node may have failed, the response has been lost, delayed, and so on.</li>      <li>Network problem can be surprisingly common in practice.</li>      <li>Timeout is normally a good way to detect a fault. Rather than using a configured constant timeouts, system can automatically adjust timeouts according to the observed response time distribution.</li>    </ul>  </li>  <li>Unreliable clocks.    <ul>      <li>Time is tricky since communication is not instantaneous, it takes time for a message to travel from one point to another, and because of variable delayed in network with multiple machines are involved, it’s hard to determine the order of operations.</li>      <li>Modern computers have at least two different kinds of clock:        <ul>          <li>A time-of-day clock, which are usually synchronized with Network Time Protocol (NTP), which means that a timestamp from one machine (ideally) means the same as a timestamp on another machine.</li>          <li>A monotonic clock is suitable for measuring a duration such as a timeout or a service’s response time.</li>        </ul>      </li>      <li>Time-of-day clocks need to be set according to an NTP in order to be useful though this isn’t as reliable as we hope as he quartz clock in a computer is not very accurate, if a computer’s clock differs too much from an NTP server, it may refuse to synchronize, NTP synchronization can only be as good as the network delay, NTP servers could be wrong or misconfigured, the hardware clock is virtualized in virtual machines, and so on.</li>      <li>If you use software that requires synchronized clocks, it is essential that you also carefully monitor the clock offsets between all the machines.</li>    </ul>  </li>  <li>Knowledge, truth and lies.    <ul>      <li>A distributed system cannot exclusively rely on a single node, because a node may fail at any time, potentially leaving the system stuck and unable to recover. Instead, many distributed algorithms rely on a quorum where decisions are made by a majority of nodes.</li>      <li>Distributed systems problems become much harder if there is a risk that nodes may lie, such as claiming unreceived messages from other node or sending untrue messages to other nodes, it’s known as Byzantine fault.</li>    </ul>  </li></ul><h3 id=\"consistency-and-consensus\">Consistency and consensus.</h3><ul>  <li>Most replicated databases provide at least eventual consistency, which means that if you stop writing to the database and wait for some unspecified length of time, then eventually all read requests will return the same value. However, this is a very weak guarantee as it doesn’t say anything about when the replicas will converge. Below we’re looking at stronger consistency models and discussing their trade-offs.</li>  <li>Linearizability makes a system appear as if there was only one copy of the data, and all operations on it are atomic.    <ul>      <li>It is useful in such circumstances:        <ul>          <li>A system needs to ensure that there is indeed only one leader.</li>          <li>Constraints and uniqueness guarantees in database: user’s username or email must be unique, two people can’t have the same seat on a flight,…</li>          <li>Cross-channel timing dependencies: web server and image resizer communicate both through file storage and a message queue, opening the potential for race conditions,…</li>        </ul>      </li>      <li>CAP (Consistency, Availability, Partition tolerance) theorem to pick 2 out of 3:        <ul>          <li>If the application requires linearizability, some replicas are disconnected from the other replicas due to a network problem, then some replicas cannot process requests while they are disconnected, or unavailable.</li>          <li>If the application does not require linearizability, each replica can process requests independently, even if it is disconnected from other replica.</li>          <li>A better way of phrasing CAP would be either Consistent or Available when Partitioned</li>        </ul>      </li>      <li>Few systems are actually linearizable in practice since most of them concern about their performance and availability.</li>    </ul>  </li>  <li>Ordering guarantees.    <ul>      <li>In order to maintain causality, you need to know which operation happened before which other operation. One way is to use sequence numbers or timestamps to order events such as Lamport timestamp.</li>      <li>However, in order to implement something like a uniqueness constraint for usernames, it’s not sufficient to have a total ordering of operations as you also need to know when that order is finalized, aka total order broadcast.</li>      <li>Total order broadcast says that if every message represents a write to the database, and every replica processes the same writes in the same order, then the replicas will remain consistent with each other.</li>    </ul>  </li>  <li>Distributed transaction and consensus.    <ul>      <li>There are several situations in which it is important for nodes to reach consensus such as leader election and atomic commit in database.</li>      <li>2-phase commit (2PC) algorithm is the most common way for achieving atomic transaction commit across multiple nodes.        <ul>          <li>2PC uses a new component as a coordinator to manage all nodes.</li>          <li>The application first requests a globally unique transaction ID from the coordinator for transaction.</li>          <li>When the application is ready to commit, the coordinator begins phase 1: send a prepare request to each of the nodes, tagged with the ID, asking them whether they are able to commit.</li>          <li>If all participants reply “yes”, the coordinator sends out a commit request to all nodes in phase 2, while if any of them says “no”, the coordinator sends an abort request.</li>          <li>If the coordinator fails after all participants reply “yes” in phase 1, participants have no way of knowing whether to commit or abort in phase 2. The only way how this can complete is to wait for the coordinator to recover.</li>          <li>Three-phase commit (3PC) has been proposed as alternative to 2PC. However, it assumes a network with bounded delay and nodes with bounded response times which is not practical in most systems.</li>        </ul>      </li>      <li>Distributed transactions in practice has mixed reputation. On one hand, they provide an important safety guarantee. On the other hand, it causes operational problems, kill perfomance and so on.        <ul>          <li>There are two types of distributed transaction are often conflated: database-internal distributed transactions (distributed databases that support internal transactions among the nodes of that database) and heterogeneous distributed transactions (participants are two or more different technologies).</li>          <li>That said, database-internal distributed transactions can often work quite well though transactions spanning heterogeneous technologies are a lot more challenging.</li>        </ul>      </li>      <li>The best-known fault-tolerant consensus algorithms are Viewstamped Replication (VSR), Paxos, Raft and Zab as most of them provide total order broadcast. However, they’re not used everywhere since they all come with performance costs.</li>      <li>ZooKeeper or etcd implements a consensus algorithm though they are often described as distributed key-value stores. They are not use directly in your application but via some other projects for distributed coordination, work allocation, service discovery, membership services.</li>    </ul>  </li></ul><h2 id=\"batch-and-stream-processing\">Batch and stream processing.</h2><h3 id=\"batch-processing\">Batch processing.</h3><ul>  <li>With basic Unix tools (awk, sed, grep, sort, uniq, xarg, pipe,…), one can do a lot of powerful data processing jobs. A simple chain of Unix commands can actually perform surprisingly well as it can easily scale to large datasets, without running out of memory.</li>  <li>MapReduce is a bit like Unix tools, but distributed across potentially thousands of machines.    <ul>      <li>While Unix tools use stdin and stdout as input and output, MapReduce jobs read and write files on a distributed filesystem like Google’s GFS.</li>      <li>As the name suggested, 2 callback functions in MapReduce are map and reduce. Map extracts they key and value from the input record while reduce iterates over that collection of values with the same key and produce zero or more outputs. They’re stateless function as they also don’t modify output. Since the input is also bounded, the output is guaranteed to be completed.</li>      <li>The main difference to pipelines of Unix commands is that MapReduce can parallelize a computation across many machines out-of-the-box.</li>      <li>Your code does not need to worry about implementing fault tolerance mechanisms since the framework can guarantee that the final output of a job is the same as if no faults had occurred, even though in reality various tasks perhaps had to be retried.</li>      <li>It’s common for MapReduce jobs to be chained together into workflows, such that the output of one job becomes the input to the next job.</li>      <li>There are several join algorithms for MapReduce such as sort-merge joins, broadcast hash joins, partitioned hash joins that allow us to use joins more efficiently.</li>    </ul>  </li></ul><h3 id=\"stream-processing\">Stream processing.</h3><ul>  <li>In batch process, the input is bounded that it’s known and have finite size. In reality, a lot of data is unbounded, arrives gradually over time and never complete in any meaningful way, that batch processors must divide and process them in chunks. However, that takes a long time for impatient users. Stream processing is introduced as it simply processes every event as it happens.</li>  <li>An event is generated once by a producer/publisher/sender and processed by multiple consumers/subscribers/recipients.</li>  <li>A common approach for notifying consumers about new events is to use a messaging system: a producer sends a message containing the event, which is then pushed to consumers.    <ul>      <li>A number of messaging systems use direct network communication between producers and consumers, without going via intermediary nodes such as UDP multicast, ZeroMQ, webhooks,…</li>      <li>A widely-used alternative is to send messages via a message broker/message queue. Two types of them are:        <ul>          <li>AMQP/JMS-style message brokers: the broker assigned individual messages to consumers, consumers acknowledge when they have been successfully processed.</li>          <li>Log-based message brokers: the broker assigns all messages in a partition to the same consumer node, and always delivers messages in the same order while consumers keep their logs.</li>        </ul>      </li>      <li>When multiple consumers are reading messages in the same topic, two main patterns of messaging are load balancing and fan out.</li>    </ul>  </li>  <li>It’s also useful to think of the writes to a database as a stream that it can capture the changelog, either implicitly through change data capture or explicitly through event sourcing as it also opens up powerful opportunities for integrating systems.    <ul>      <li>You can keep derived data systems such as search indexes, caches and analytics systems continually up-to-date by consuming the log of changes and applying them to the derived system.</li>      <li>You can even build fresh views onto existing data by starting from scratch and consuming the log of changes from the beginning all the way to the present.</li>    </ul>  </li>  <li>Stream processing has long been used for monitoring purposes, where an organization wants to be alerted if certain things happen. However, other uses of stream processing have also emerged over time.    <ul>      <li>Complex event processing (CEP) allows you to specify rules to search for certain patterns of events in a stream.</li>      <li>Analytics that are more oriented towards aggregations and statistical metrics over a large number of events are also used.</li>      <li>It can be used to maintain materialized views onto some dataset, so that you can query it efficiently, and updating that view whenever the underlying data changes.</li>    </ul>  </li>  <li>Stream processing frameworks use the local system clock on the processing machine to determine windowing. Even though it’s simple to implement and reason about, it breaks down if there is any significant processing lag.</li>  <li>There are 3 types of join that may appear in stream processes:    <ul>      <li>Stream-stream joins: matching two events that occur within some window of time.</li>      <li>Stream-table joins: one input stream consists of activity events, while the other is a database changelog.</li>      <li>Table-table joins: both input streams are database changelogs where every change on one side is joined with the latest state of the other side.</li>    </ul>  </li>  <li>To tolerate faults, one solution is to break the stream into small blocks, and treat each block like a miniature batch process (microbatching). Other is to use idempotent writes.</li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications\">https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/ACID\">https://en.wikipedia.org/wiki/ACID</a></li></ul>",
            "url": "https://hoanhan101.github.io/design-data-intensive-apps",
            
            
            
            "tags": ["book","architecture","data","system"],
            
            "date_published": "2020-07-05T00:00:00-04:00",
            "date_modified": "2020-07-05T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/the-mom-test",
            "title": "The Mom Test by Rob Fitzpatrick",
            "summary": null,
            "content_text": "  Taking to customer is hard.          Conversations take time and easy to screw up.      Bad conversations give you a false positive which convince you that you’re on the right path when you’re not.        You shouldn’t ask your mom or anyone whether your business is a good idea because it’s a bad question and invites everyone to lie to you at least a little.  The Mom Test is a set of 3 simple rules for crating good questions that even your mom can’t lie about:          Talk about their lives instead of your idea.      Ask about specifics in the past instead of generics or opinions about the future.      Talk less and listen more.        Fix a bad question.          “Do you think it’s a good idea?”                  Only the market can tell you if your idea is good. Everything else is just opinion.          Instead, ask how they currently do it, which parts they love and hate, which solutions they tried before settling in this one, are they actively seeking for replacement, why and why not,…                    “Would you buy a product which did X?”                  You’re asking overly optimistic people who want to make you happy by always answering “Yes”.          Instead, ask how they currently solve X, how much it costs to do so, how much time it takes, talk through what happened last time X came up, why and why not, are they seeking for better solutions,…                    “How much would you pay for X”                  Similar to the last one, except the number makes it feel truthy.          Instead, ask how much does the problem cost them, how much do they currently pay to solve it, how big is their budget,…                    “Would you pay X for a product which did Y?”                  As always, ask what they currently do now, not what they believe they might do in the future.                      None of good these questions are about what you should build but customers’ problems, cares and goals. People don’t know what they want in a product, it’s your job to gather good information, come up with a solution and verify it.          “What would your dream product do?” and ask follow-up questions to try to understand why they want these features as well.      “Why do you bother?” to dig down into their goals, pain points and motivations.      “What are the implications of that?” to distinguishes between I-will-pay-to-solve-that problems and thats-kind-of-annoying-but-I-can-deal-with-it problem since some problems don’t matter or worth spending time with.      “Talk me through the last time that happened” to learn through their actions instead of their opinions.      “What else have you tried?”, “How are you dealing with it now?”,  what they love/hate, how much does it cost, how much would those fixes be worth, how big of a pain would it be for them to switch to a new solution.      “Where does the money come from?”, whose budget the purchase will come from, who holds the power to seal the deal.      End every conversation with “Who else should I talk to?”, “Is there anything else I should have asked?” can lead to more deals.        Avoiding 3 types of bad data.          Compliments.                  They don’t give you any meaningful data.          Try to be more specific. Why did that person like the idea, how much money would it save him, what else has he tried which failed to solve his problem,…                    Fluff: generics (“usually”, “always”, “never”), hypotheticals (“might”, “could”), and the future (“would”, “will”).                  Be more specific.          Ask when it last happened, talk through it, how they solved it, what else they tried.                    Ideas.                  Take a moment to dig into the motivations behind the idea/feature request.          Why do you want that? What would that let you do? How are you coping without it? Do you think we could push back the launch to add that feature? How would that fit into your day?          Tell me more about that. That seems to really bug you. What makes it so awful? Why haven’t you been able to fix it already? Is this a big deal? Why so happy?                      Keeping it casual.          Strip all the formality from the process.      Make it a quick and casual chat.        Commitment and advancement.          A meeting has succeeded when it ends with a commitment to advance to the next step.      Commitment can either be time, reputation risk, or finance.                  Time commitment include: having a clear next meeting with known goals, sitting down to give feedback, using a trial.          Reputation risk include: intro to peers/team or a decision maker (boss, lawyer), giving a public testimonial or case study.          Financial commitment include: letter of intent to purchase, pre-order, deposit.                    A bad meeting can be saved just pushing for a commitment at the end.                  “That’s so cool. I love it!”: deflect the compliment and get back to business.          “Looks great. Let me know when it launches.”: look for a commitment I could ask for today.          “There are a couple people I can intro you to when you’re ready.”: ask who they want to introduce you to, what “ready” means, why he can’t make the intro now,…          “I would definitely buy that.”: ask for a letter of intent/a pre-purchase/deposit/intros to other decision makers and team members,…                      If you already know your customers, go talk to them. If you don’t know, how to find these conversations?          Cold calls are hard, though having only one is enough to start the train.                  Try to keep it informal. Don’t even need to mention you have a business. Have a good conversation. Be interested in other people’s problems.                    Instead of reaching out to them, what can you offer what will make them want to talk to you?                  Organize meet-ups, give talks at conferences, host workshops, teach through videos, blogging,…                    Reach out to general audiences and ask for references. Everyone knows someone. We just need to ask.      Find advisors, including industry experts as well as professors.      Find investors.      5 key elements of a good reach-out:                  You’re trying to solve problem X. Don’t mention your idea.          Mention what stage you’re at and you don’t have anything to sell.          Mention specific problems you need their help on.          Show them how much they can help.          Ask for help.                    For example:                  “Hey Scott, I run a startup trying to make advertising more playful and ultimately effective.”          “We’re having a load of trouble figuring out how all the pieces of the industry fit together and where we can best fit into it (weakness). You know more about this industry than anyone and could really save us from a ton of mistakes (pedestal).”          “We’re funded and have a couple products out already, but this is in no way a sales meeting – we’re just moving into a new area and could really use some of your expertise (framing).”          “Can you spare a bit of time in the next week to help point us in the right direction over a coffee? (ask)”                      Talking to a lot of different people leads to confusing signals and overwhelming options and feedbacks that hard to make sense of. How do you choose then?          Categorize customers in different group and evaluate which group seems most profitable, easy to read and rewarding for us.        Running the process.          Before the conversation: decide 3 big learning goals, guess what they care about so that we can compare with our notes later.      During the conversation: keep it casual, ask good questions, take good notes, press for commitment and next steps.      After the conversation: review notes with team, transfer to a permanent storage that is searchable.      References:  http://momtestbook.com/",
            "content_html": "<ul>  <li>Taking to customer is hard.    <ul>      <li>Conversations take time and easy to screw up.</li>      <li>Bad conversations give you a false positive which convince you that you’re on the right path when you’re not.</li>    </ul>  </li>  <li>You shouldn’t ask your mom or anyone whether your business is a good idea because it’s a bad question and invites everyone to lie to you at least a little.</li>  <li>The Mom Test is a set of 3 simple rules for crating good questions that even your mom can’t lie about:    <ul>      <li>Talk about their lives instead of your idea.</li>      <li>Ask about specifics in the past instead of generics or opinions about the future.</li>      <li>Talk less and listen more.</li>    </ul>  </li>  <li>Fix a bad question.    <ul>      <li>“Do you think it’s a good idea?”        <ul>          <li>Only the market can tell you if your idea is good. Everything else is just opinion.</li>          <li>Instead, ask how they currently do it, which parts they love and hate, which solutions they tried before settling in this one, are they actively seeking for replacement, why and why not,…</li>        </ul>      </li>      <li>“Would you buy a product which did X?”        <ul>          <li>You’re asking overly optimistic people who want to make you happy by always answering “Yes”.</li>          <li>Instead, ask how they currently solve X, how much it costs to do so, how much time it takes, talk through what happened last time X came up, why and why not, are they seeking for better solutions,…</li>        </ul>      </li>      <li>“How much would you pay for X”        <ul>          <li>Similar to the last one, except the number makes it feel truthy.</li>          <li>Instead, ask how much does the problem cost them, how much do they currently pay to solve it, how big is their budget,…</li>        </ul>      </li>      <li>“Would you pay X for a product which did Y?”        <ul>          <li>As always, ask what they currently do now, not what they believe they might do in the future.</li>        </ul>      </li>    </ul>  </li>  <li>None of good these questions are about what you should build but customers’ problems, cares and goals. People don’t know what they want in a product, it’s your job to gather good information, come up with a solution and verify it.    <ul>      <li>“What would your dream product do?” and ask follow-up questions to try to understand why they want these features as well.</li>      <li>“Why do you bother?” to dig down into their goals, pain points and motivations.</li>      <li>“What are the implications of that?” to distinguishes between I-will-pay-to-solve-that problems and thats-kind-of-annoying-but-I-can-deal-with-it problem since some problems don’t matter or worth spending time with.</li>      <li>“Talk me through the last time that happened” to learn through their <strong>actions</strong> instead of their opinions.</li>      <li>“What else have you tried?”, “How are you dealing with it now?”,  what they love/hate, how much does it cost, how much would those fixes be worth, how big of a pain would it be for them to switch to a new solution.</li>      <li>“Where does the money come from?”, whose budget the purchase will come from, who holds the power to seal the deal.</li>      <li>End every conversation with “Who else should I talk to?”, “Is there anything else I should have asked?” can lead to more deals.</li>    </ul>  </li>  <li>Avoiding 3 types of bad data.    <ul>      <li>Compliments.        <ul>          <li>They don’t give you any meaningful data.</li>          <li>Try to be more specific. Why did that person like the idea, how much money would it save him, what else has he tried which failed to solve his problem,…</li>        </ul>      </li>      <li>Fluff: generics (“usually”, “always”, “never”), hypotheticals (“might”, “could”), and the future (“would”, “will”).        <ul>          <li>Be more specific.</li>          <li>Ask when it last happened, talk through it, how they solved it, what else they tried.</li>        </ul>      </li>      <li>Ideas.        <ul>          <li>Take a moment to dig into the <strong>motivations</strong> behind the idea/feature request.</li>          <li>Why do you want that? What would that let you do? How are you coping without it? Do you think we could push back the launch to add that feature? How would that fit into your day?</li>          <li>Tell me more about that. That seems to really bug you. What makes it so awful? Why haven’t you been able to fix it already? Is this a big deal? Why so happy?</li>        </ul>      </li>    </ul>  </li>  <li>Keeping it casual.    <ul>      <li>Strip all the formality from the process.</li>      <li>Make it a quick and casual chat.</li>    </ul>  </li>  <li>Commitment and advancement.    <ul>      <li>A meeting has succeeded when it ends with a commitment to advance to the next step.</li>      <li>Commitment can either be time, reputation risk, or finance.        <ul>          <li>Time commitment include: having a clear next meeting with known goals, sitting down to give feedback, using a trial.</li>          <li>Reputation risk include: intro to peers/team or a decision maker (boss, lawyer), giving a public testimonial or case study.</li>          <li>Financial commitment include: letter of intent to purchase, pre-order, deposit.</li>        </ul>      </li>      <li>A bad meeting can be saved just pushing for a commitment at the end.        <ul>          <li>“That’s so cool. I love it!”: deflect the compliment and get back to business.</li>          <li>“Looks great. Let me know when it launches.”: look for a commitment I could ask for today.</li>          <li>“There are a couple people I can intro you to when you’re ready.”: ask who they want to introduce you to, what “ready” means, why he can’t make the intro now,…</li>          <li>“I would definitely buy that.”: ask for a letter of intent/a pre-purchase/deposit/intros to other decision makers and team members,…</li>        </ul>      </li>    </ul>  </li>  <li>If you already know your customers, go talk to them. If you don’t know, how to find these conversations?    <ul>      <li>Cold calls are hard, though having only one is enough to start the train.        <ul>          <li>Try to keep it informal. Don’t even need to mention you have a business. Have a good conversation. Be interested in other people’s problems.</li>        </ul>      </li>      <li>Instead of reaching out to them, what can you offer what will make them want to talk to you?        <ul>          <li>Organize meet-ups, give talks at conferences, host workshops, teach through videos, blogging,…</li>        </ul>      </li>      <li>Reach out to general audiences and ask for references. Everyone knows someone. We just need to ask.</li>      <li>Find advisors, including industry experts as well as professors.</li>      <li>Find investors.</li>      <li>5 key elements of a good reach-out:        <ul>          <li>You’re trying to solve problem X. Don’t mention your idea.</li>          <li>Mention what stage you’re at and you don’t have anything to sell.</li>          <li>Mention specific problems you need their help on.</li>          <li>Show them how much they can help.</li>          <li>Ask for help.</li>        </ul>      </li>      <li>For example:        <ul>          <li>“Hey Scott, I run a startup trying to make advertising more playful and ultimately effective.”</li>          <li>“We’re having a load of trouble figuring out how all the pieces of the industry fit together and where we can best fit into it (weakness). You know more about this industry than anyone and could really save us from a ton of mistakes (pedestal).”</li>          <li>“We’re funded and have a couple products out already, but this is in no way a sales meeting – we’re just moving into a new area and could really use some of your expertise (framing).”</li>          <li>“Can you spare a bit of time in the next week to help point us in the right direction over a coffee? (ask)”</li>        </ul>      </li>    </ul>  </li>  <li>Talking to a lot of different people leads to confusing signals and overwhelming options and feedbacks that hard to make sense of. How do you choose then?    <ul>      <li>Categorize customers in different group and evaluate which group seems most profitable, easy to read and rewarding for us.</li>    </ul>  </li>  <li>Running the process.    <ul>      <li>Before the conversation: decide 3 big learning goals, guess what they care about so that we can compare with our notes later.</li>      <li>During the conversation: keep it casual, ask good questions, take good notes, press for commitment and next steps.</li>      <li>After the conversation: review notes with team, transfer to a permanent storage that is searchable.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"http://momtestbook.com/\">http://momtestbook.com/</a></li></ul>",
            "url": "https://hoanhan101.github.io/the-mom-test",
            
            
            
            "tags": ["book","business","customer"],
            
            "date_published": "2020-06-23T00:00:00-04:00",
            "date_modified": "2020-06-23T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/the-effective-engineer",
            "title": "The Effective Engineer by Edmond Lau",
            "summary": null,
            "content_text": "  Focus on high-leverage activities.          Leverage: impact produced / time invested.      80/20 rule: 80% impact comes from 20% work.      Focus on not more hours but more value per limited time on the task.      Increase leverage by:                  Reduce the time it takes to complete the activity (default to half-hour meeting instead of one-hour one, automate manual dev process).          Increase the value produced (have a clear agenda beforehand, prioritize tasks based on launch date).          Shift to higher-leverage activities (use email instead of in-person discussion, talk to customer).                    Output can be measured by:                  Number of projects launched          Bug fixes          Users acquired          Engineers hired          Quality          Revenue generated                      Understand the power of compound interest.          Compounding leads to an exponential growth curve.      The earlier compounding starts, the sooner it hits the exponential growth, the faster you can reap its benefits.      Small deltas in the interest rate can make massive differences in the long run:                  Improving by 1% per day makes us 37x better at the end of year.          Google idea of 20% where engineers spend about 1 day a week on a side project to make the company better results in successful products such as Gmail , Google News, Adsense,…                      Optimize for learning because learning compounds.          Find fast growing work environment.      Take advantage of the resources at your work.                  Study code from best engineers.          Write more code.          Go through technical, educational material.          Send code views to the harshest critics.          Participate in design discussions - don’t wait for invitation.          Team with senior engineers.                    Invest in other skills too.                  Invest in skills that are in high demand.          Build strong relationships.          Read books.          Write to teach.          Pursue side projects.                      Prioritize regularly.          Track TODO list in a single list.      Sort the list frequently by asking yourself on a recurring basis:                  Is there anything else I could be doing that’s higher-leverage?                          Focus on what directly produce value (products shipped, user acquired, business metrics moved, sales made).              Focus on the important and non-urgent (planning career goals, building relationships, personal development, improving workflow).                                          Preserve larger blocks of focused time + learn to say no to unimportant activities.      Limit the amount of work in progress + resist the urge to work on too many projects at once.      Make it a habit.        Iterate quickly to build more and learn faster.          Invest in time-saving tools.                  Bringing the release time down to several minutes helps the team deploy more frequently, 40-50 times a day - skyrockets growth.          If it saves you 1 hour a day, it saves 10 people 10 times as much.                    Measure the progress frequently.        Validate early and often.          A well tested, clean design, scalable product doesn’t deliver much value if users don’t engage or customers don’t buy it.      Bounce ideas off teammates.        Define measurable milestones.References:  https://www.effectiveengineer.com/book",
            "content_html": "<ul>  <li>Focus on high-leverage activities.    <ul>      <li>Leverage: impact produced / time invested.</li>      <li>80/20 rule: 80% impact comes from 20% work.</li>      <li>Focus on not more hours but more value per limited time on the task.</li>      <li>Increase leverage by:        <ul>          <li>Reduce the time it takes to complete the activity (default to half-hour meeting instead of one-hour one, automate manual dev process).</li>          <li>Increase the value produced (have a clear agenda beforehand, prioritize tasks based on launch date).</li>          <li>Shift to higher-leverage activities (use email instead of in-person discussion, talk to customer).</li>        </ul>      </li>      <li>Output can be measured by:        <ul>          <li>Number of projects launched</li>          <li>Bug fixes</li>          <li>Users acquired</li>          <li>Engineers hired</li>          <li>Quality</li>          <li>Revenue generated</li>        </ul>      </li>    </ul>  </li>  <li>Understand the power of compound interest.    <ul>      <li>Compounding leads to an exponential growth curve.</li>      <li>The earlier compounding starts, the sooner it hits the exponential growth, the faster you can reap its benefits.</li>      <li>Small deltas in the interest rate can make massive differences in the long run:        <ul>          <li>Improving by 1% per day makes us 37x better at the end of year.</li>          <li>Google idea of 20% where engineers spend about 1 day a week on a side project to make the company better results in successful products such as Gmail , Google News, Adsense,…</li>        </ul>      </li>    </ul>  </li>  <li>Optimize for learning because learning compounds.    <ul>      <li>Find fast growing work environment.</li>      <li>Take advantage of the resources at your work.        <ul>          <li>Study code from best engineers.</li>          <li>Write more code.</li>          <li>Go through technical, educational material.</li>          <li>Send code views to the harshest critics.</li>          <li>Participate in design discussions - don’t wait for invitation.</li>          <li>Team with senior engineers.</li>        </ul>      </li>      <li>Invest in other skills too.        <ul>          <li>Invest in skills that are in high demand.</li>          <li>Build strong relationships.</li>          <li>Read books.</li>          <li>Write to teach.</li>          <li>Pursue side projects.</li>        </ul>      </li>    </ul>  </li>  <li>Prioritize regularly.    <ul>      <li>Track TODO list in a single list.</li>      <li>Sort the list frequently by asking yourself on a recurring basis:        <ul>          <li>Is there anything else I could be doing that’s higher-leverage?            <ul>              <li>Focus on what directly produce value (products shipped, user acquired, business metrics moved, sales made).</li>              <li>Focus on the important and non-urgent (planning career goals, building relationships, personal development, improving workflow).</li>            </ul>          </li>        </ul>      </li>      <li>Preserve larger blocks of focused time + learn to say no to unimportant activities.</li>      <li>Limit the amount of work in progress + resist the urge to work on too many projects at once.</li>      <li>Make it a habit.</li>    </ul>  </li>  <li>Iterate quickly to build more and learn faster.    <ul>      <li>Invest in time-saving tools.        <ul>          <li>Bringing the release time down to several minutes helps the team deploy more frequently, 40-50 times a day - skyrockets growth.</li>          <li>If it saves you 1 hour a day, it saves 10 people 10 times as much.</li>        </ul>      </li>      <li>Measure the progress frequently.</li>    </ul>  </li>  <li>Validate early and often.    <ul>      <li>A well tested, clean design, scalable product doesn’t deliver much value if users don’t engage or customers don’t buy it.</li>      <li>Bounce ideas off teammates.</li>    </ul>  </li>  <li>Define measurable milestones.</li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.effectiveengineer.com/book\">https://www.effectiveengineer.com/book</a></li></ul>",
            "url": "https://hoanhan101.github.io/the-effective-engineer",
            
            
            
            "tags": ["book","productivity","impact","compound"],
            
            "date_published": "2020-05-16T00:00:00-04:00",
            "date_modified": "2020-05-16T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/guide-to-the-good-life",
            "title": "A Guide to the Good Life by William Braxton Irvine",
            "summary": null,
            "content_text": "  What is a good life according to Stoicism?          Having a good life is not about making a good living, aka having a high-paying job since one could hate the job or have conflicting thoughts about its moral.      A person must be virtuous in order to have a good life.                  A person’s virtue depends on their excellence as a human being, how well one performs the function for which humans were designed.                          A virtuous hammer is one that can drive nails well, a virtuous scissors is one that can cut well.                                To be virtuous is to live as we were designed to live, that is to reason, to do certain things, to have certain duties. For example, one of which is the social duty that is to honor our parents, be agreeable to our friends,…                      Psychological techniques to practice Stoicism for attaining a good life:          Negative visualization:                  Bad things happen, no matter how hard we try to prevent them. Assuming we will always be able to enjoy things we value causes us distress when they are taken from us.          We are unhappy largely because we’re insatiable. After working hard for what we desire, we quickly get bored, dissatisfied, take things for granted and eventually chase new desire.                          Consumer purchase: longing for a new TV, laptop, phone after buying one several weeks ago              Job: wanting higher pay, new workplace, new boss after landing the job of our dreams              Relationship: fantasizing about starting a new relationship after marriage                                The solution is to forestall the adaptation process, even better reverse it so that we stop taking things for granted and desire what we already have.                          Image that we have lost the things we value, our wife has left, our relatives and friends were death, we lost our job, our house, our money and so on.              As we go about our day, reflect periodically that we will not live forever and this day could be our last. The goal is not to change our activities but our state of mind that we carry out these activities and appreciate today.                                Most of us are already living the dream, having a wonderful partner, a dream job, a good car though we take things for granted other than delighting in them. Some are less fortunate, still the practice of negative still can be applied.          Being satisfied with what we’ve got doesn’t mean we shouldn’t seek certain things in life or strive to become better.                    Trichotomy of control:                  There are things over which we have:                          Complete control: goals we set for ourself, opinions and values we form              No control: whether the sun will rise tomorrow              Some but not complete control: whether we will win a competition or become a millionaire though we try really hard for it                                We should not concern ourselves with things that we have no control of.          If we want things that we have less or no control, we will sometimes fail to get what we want, be upset and anxious about it.          A strategy to deal with things that we have less or no control is to be careful about the goals and values that we form.                          Instead of setting a goal to win a competition, which we only have partial control, set a goal to do our best in the match, which we have complete control.              We’ll free ourself from frustration or disappointment if we lose.                                          Fatalism:                  We must learn to welcome whatever comes to us and trust that it happens is for the best.          We have no control of the past as well as the present (this very moment). That said, we’re wasting time worrying about past and present events.          Instead of wishing it could be different, embrace it.                    Self-denial (extension of negative visualization):                  Besides contemplating bad things happening, we should sometimes live as if they had happened, cause ourselves to experience discomfort that we could have avoided (experience cold weather even though clothes are at hand).          Benefits of voluntary discomfort:                          Harden ourselves against misfortune that might happen in the future.              Grow confident that we can withstand major discomfort.              Help us appreciate what we have.                                Besides practicing voluntary discomfort, we should sometimes forgo opportunities to experience pleasure, choose not to do things that make us feel good (eating carb and sugar).          Willpower is like muscle power: the more exercise, the stronger they are; the more will power we have, the more self-control and courage we have.                    Meditation:                  On the events of daily living at bedtime:                          Did something disrupt our tranquility?              Did we experience anger/envy/lust?              Is there something that I could avoid?                                On our Stoic progress:                          Do we periodically engage in negative visualization?              Do we take time to distinguish between these things over which we have control, less and no control?              Are we careful to initialize our goals?              Have we refrained from dwelling on the past and instead focused our attention on the future?              Have we consciously practiced acts of self-denial?                                            Advice on daily living:          How to think about social duty:                  We were designed to live among other people and interact with them in a manner that is advantageous.          To fulfill this social duty, we must feel a concern for all humankind, to do good and bear with them.                    How to preserve tranquility while interacting with other people:                  We can’t be selective in doing our social duty (dealing with annoying, misguided people) though we can be selective about whom we befriend, ones that share our values.          When dealing with annoying people, keep in mind that there are people that find us annoying as well so that we can also reflect on our shortcomings and become more empathetic to others’ faults.          Due to fatalism, we should operate on the assumption that annoying people are fated to behave that way and it’s expectable (though they can be changed of course).          The risk in dealing with annoying people is that they will make us hate them, though that only makes us more like them. The best revenge is to refuse to do so.                    How to deal with insult:                  What upsets us is not things themselves but our judgments about these things.          When insulted, pause and consider if what the insulter said is true, how well-inform the insulter is, or if we respect him.                          If it’s true or we respect the insulter, we should reflect on ourselves and strive to be better.              If not, we should feel relived because it’s the right thing to do as we don’t need their approval.                                  If a dog barks us, we don’t be upset by the fact that he might dislike us.                                                              One of the best way to respond to insult is with humor, especially self-deprecating jokes. Another way is with no response.                          By not responding to the insulter, we are robbing him the pleasure of having upset us which is likely to make him upset as a result.              Also, no one wants to be ignored and the insulter is likely to feel humiliated then.                                          How to respond to the death:                  It’s not possible to eliminate grief but possible to minimize the amount of grief we experience in our life.          One strategy that is mentioned above is negative visualization.          Remember that the person whose death that we’re grieving wouldn’t want us to be tortured with tears.                    How to overcome anger/anti-joy:                  We should fight our tendency to believe the worst about other and our tendency to jump to conclusion about their motivations.          Things that anger us generally don’t do us any real harm. Sometimes things that we think are important are actually are not that important.          Humor can help if we choose to think that bad things happening to us is funny and amusing.          When angry, force ourselves to relax our face, soften our voice, slow our pace of walking and so on.                    How to think about fame:                  If we seek social status, we give other people power over us in a sense that we have to do things that make them admire us. In other words, we will have enslaved ourselves.          We should be confident about ourselves and our values and ignore what people think of us.                    How to think about wealth/luxurious living:                  There’s a danger that if we’re exposed to a luxurious lifestyle, we will lose our ability to take delight in simple things.                          We become harder to please.              Our standards are constantly getting higher as we want nothing but the best.              Once it starts, it’s difficult to stop.                                Luxurious lifestyle is harder to maintain and keep up with.          People who achieve luxurious lifestyle are rarely satisfied or happy since they will only learn that they crave even more luxury.          Even though a Stoic doesn’t pursue wealth, they nevertheless acquire it. It’s acceptable for them to enjoy wealth, as long as they are careful not to cling to it. Also, by the practice of negative visualization, they should be prepared as their wealth can be taken away from them anytime.                    References:  https://www.goodreads.com/book/show/5617966-a-guide-to-the-good-life",
            "content_html": "<ul>  <li>What is a good life according to Stoicism?    <ul>      <li>Having a good life is not about making a good living, aka having a high-paying job since one could hate the job or have conflicting thoughts about its moral.</li>      <li>A person must be virtuous in order to have a good life.        <ul>          <li>A person’s virtue depends on their excellence as a human being, how well one performs the function for which humans were designed.            <ul>              <li>A virtuous hammer is one that can drive nails well, a virtuous scissors is one that can cut well.</li>            </ul>          </li>          <li>To be virtuous is to live as we were designed to live, that is to reason, to do certain things, to have certain duties. For example, one of which is the social duty that is to honor our parents, be agreeable to our friends,…</li>        </ul>      </li>    </ul>  </li>  <li>Psychological techniques to practice Stoicism for attaining a good life:    <ul>      <li>Negative visualization:        <ul>          <li>Bad things happen, no matter how hard we try to prevent them. Assuming we will always be able to enjoy things we value causes us distress when they are taken from us.</li>          <li>We are unhappy largely because we’re insatiable. After working hard for what we desire, we quickly get bored, dissatisfied, take things for granted and eventually chase new desire.            <ul>              <li>Consumer purchase: longing for a new TV, laptop, phone after buying one several weeks ago</li>              <li>Job: wanting higher pay, new workplace, new boss after landing the job of our dreams</li>              <li>Relationship: fantasizing about starting a new relationship after marriage</li>            </ul>          </li>          <li>The solution is to forestall the adaptation process, even better reverse it so that we stop taking things for granted and desire what we already have.            <ul>              <li>Image that we have lost the things we value, our wife has left, our relatives and friends were death, we lost our job, our house, our money and so on.</li>              <li>As we go about our day, reflect periodically that we will not live forever and this day could be our last. The goal is not to change our activities but our state of mind that we carry out these activities and appreciate today.</li>            </ul>          </li>          <li>Most of us are already living the dream, having a wonderful partner, a dream job, a good car though we take things for granted other than delighting in them. Some are less fortunate, still the practice of negative still can be applied.</li>          <li>Being satisfied with what we’ve got doesn’t mean we shouldn’t seek certain things in life or strive to become better.</li>        </ul>      </li>      <li>Trichotomy of control:        <ul>          <li>There are things over which we have:            <ul>              <li>Complete control: goals we set for ourself, opinions and values we form</li>              <li>No control: whether the sun will rise tomorrow</li>              <li>Some but not complete control: whether we will win a competition or become a millionaire though we try really hard for it</li>            </ul>          </li>          <li>We should not concern ourselves with things that we have no control of.</li>          <li>If we want things that we have less or no control, we will sometimes fail to get what we want, be upset and anxious about it.</li>          <li>A strategy to deal with things that we have less or no control is to be careful about the goals and values that we form.            <ul>              <li>Instead of setting a goal to win a competition, which we only have partial control, set a goal to do our best in the match, which we have complete control.</li>              <li>We’ll free ourself from frustration or disappointment if we lose.</li>            </ul>          </li>        </ul>      </li>      <li>Fatalism:        <ul>          <li>We must learn to welcome whatever comes to us and trust that it happens is for the best.</li>          <li>We have no control of the past as well as the present (this very moment). That said, we’re wasting time worrying about past and present events.</li>          <li>Instead of wishing it could be different, embrace it.</li>        </ul>      </li>      <li>Self-denial (extension of negative visualization):        <ul>          <li>Besides contemplating bad things happening, we should sometimes live as if they had happened, cause ourselves to experience discomfort that we could have avoided (experience cold weather even though clothes are at hand).</li>          <li>Benefits of voluntary discomfort:            <ul>              <li>Harden ourselves against misfortune that might happen in the future.</li>              <li>Grow confident that we can withstand major discomfort.</li>              <li>Help us appreciate what we have.</li>            </ul>          </li>          <li>Besides practicing voluntary discomfort, we should sometimes forgo opportunities to experience pleasure, choose not to do things that make us feel good (eating carb and sugar).</li>          <li>Willpower is like muscle power: the more exercise, the stronger they are; the more will power we have, the more self-control and courage we have.</li>        </ul>      </li>      <li>Meditation:        <ul>          <li>On the events of daily living at bedtime:            <ul>              <li>Did something disrupt our tranquility?</li>              <li>Did we experience anger/envy/lust?</li>              <li>Is there something that I could avoid?</li>            </ul>          </li>          <li>On our Stoic progress:            <ul>              <li>Do we periodically engage in negative visualization?</li>              <li>Do we take time to distinguish between these things over which we have control, less and no control?</li>              <li>Are we careful to initialize our goals?</li>              <li>Have we refrained from dwelling on the past and instead focused our attention on the future?</li>              <li>Have we consciously practiced acts of self-denial?</li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Advice on daily living:    <ul>      <li>How to think about social duty:        <ul>          <li>We were designed to live among other people and interact with them in a manner that is advantageous.</li>          <li>To fulfill this social duty, we must feel a concern for all humankind, to do good and bear with them.</li>        </ul>      </li>      <li>How to preserve tranquility while interacting with other people:        <ul>          <li>We can’t be selective in doing our social duty (dealing with annoying, misguided people) though we can be selective about whom we befriend, ones that share our values.</li>          <li>When dealing with annoying people, keep in mind that there are people that find us annoying as well so that we can also reflect on our shortcomings and become more empathetic to others’ faults.</li>          <li>Due to fatalism, we should operate on the assumption that annoying people are fated to behave that way and it’s expectable (though they can be changed of course).</li>          <li>The risk in dealing with annoying people is that they will make us hate them, though that only makes us more like them. The best revenge is to refuse to do so.</li>        </ul>      </li>      <li>How to deal with insult:        <ul>          <li>What upsets us is not things themselves but our judgments about these things.</li>          <li>When insulted, pause and consider if what the insulter said is true, how well-inform the insulter is, or if we respect him.            <ul>              <li>If it’s true or we respect the insulter, we should reflect on ourselves and strive to be better.</li>              <li>If not, we should feel relived because it’s the right thing to do as we don’t need their approval.                <ul>                  <li>If a dog barks us, we don’t be upset by the fact that he might dislike us.</li>                </ul>              </li>            </ul>          </li>          <li>One of the best way to respond to insult is with humor, especially self-deprecating jokes. Another way is with no response.            <ul>              <li>By not responding to the insulter, we are robbing him the pleasure of having upset us which is likely to make him upset as a result.</li>              <li>Also, no one wants to be ignored and the insulter is likely to feel humiliated then.</li>            </ul>          </li>        </ul>      </li>      <li>How to respond to the death:        <ul>          <li>It’s not possible to eliminate grief but possible to minimize the amount of grief we experience in our life.</li>          <li>One strategy that is mentioned above is negative visualization.</li>          <li>Remember that the person whose death that we’re grieving wouldn’t want us to be tortured with tears.</li>        </ul>      </li>      <li>How to overcome anger/anti-joy:        <ul>          <li>We should fight our tendency to believe the worst about other and our tendency to jump to conclusion about their motivations.</li>          <li>Things that anger us generally don’t do us any real harm. Sometimes things that we think are important are actually are not that important.</li>          <li>Humor can help if we choose to think that bad things happening to us is funny and amusing.</li>          <li>When angry, force ourselves to relax our face, soften our voice, slow our pace of walking and so on.</li>        </ul>      </li>      <li>How to think about fame:        <ul>          <li>If we seek social status, we give other people power over us in a sense that we have to do things that make them admire us. In other words, we will have enslaved ourselves.</li>          <li>We should be confident about ourselves and our values and ignore what people think of us.</li>        </ul>      </li>      <li>How to think about wealth/luxurious living:        <ul>          <li>There’s a danger that if we’re exposed to a luxurious lifestyle, we will lose our ability to take delight in simple things.            <ul>              <li>We become harder to please.</li>              <li>Our standards are constantly getting higher as we want nothing but the best.</li>              <li>Once it starts, it’s difficult to stop.</li>            </ul>          </li>          <li>Luxurious lifestyle is harder to maintain and keep up with.</li>          <li>People who achieve luxurious lifestyle are rarely satisfied or happy since they will only learn that they crave even more luxury.</li>          <li>Even though a Stoic doesn’t pursue wealth, they nevertheless acquire it. It’s acceptable for them to enjoy wealth, as long as they are careful not to cling to it. Also, by the practice of negative visualization, they should be prepared as their wealth can be taken away from them anytime.</li>        </ul>      </li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/5617966-a-guide-to-the-good-life\">https://www.goodreads.com/book/show/5617966-a-guide-to-the-good-life</a></li></ul>",
            "url": "https://hoanhan101.github.io/guide-to-the-good-life",
            
            
            
            "tags": ["book","stoic","happiness","meaning","life","death","wealth"],
            
            "date_published": "2020-04-26T00:00:00-04:00",
            "date_modified": "2020-04-26T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/dont-call-yourself-a-programmer",
            "title": "Don't Call Yourself A Programmer by Patrick McKenzie",
            "summary": null,
            "content_text": "  Software solves business problems. It doesn’t matter if your app has the most elegant architecture, it must create value for the company aka brings in revenue.  Engineers are hired to create business value.          Non-goals: produce the beautiful software, solve complex technical problems, use sexy frameworks.      Actual goals: add revenue, reduce costs - “wrote the backend billing code that 97% of Google’s revenue passes through”.      That’s why Quants makes more in bonuses in a good year than many talented engineers will earn in a lifetime.        Angel investor is a polite synonym for rich.  Most hiring happens privately.          Resume is not the primary way to get job interviews, but connections do.      Networking means:                  Meet people at some point can help you.          Make a favorable impression on them.                    Strive to help people first so it’s harder for them to refuse to help you later.        Academia is not like the real world.  People who are skilled in negotiation make more than those who are not.          Sell solution to a business need rather than your programming skill.      Learn to negotiate better (refer to Getting to Yes).        Working at a startup vs megacorp is more of a lifestyle choice.  Your most important professional skill is communication.  Engineers are not hired to create programs. They are hired to create business value. The dominant quality which gets you jobs is the ability to give people the perception that you will create value.  This is not necessarily coextensive with ability to create value.  Try for “It was a privilege to assist my team by leading their efforts with regards to $YOUR_SPECIALTY.” instead of “I owe it all to my team”.  Read Never Eat Alone for some social grooming hack.  Work to live, don’t live to work.References:  https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/",
            "content_html": "<ul>  <li>Software solves business problems. It doesn’t matter if your app has the most elegant architecture, it must create value for the company aka brings in revenue.</li>  <li>Engineers are hired to create business value.    <ul>      <li>Non-goals: produce the beautiful software, solve complex technical problems, use sexy frameworks.</li>      <li>Actual goals: add revenue, reduce costs - “wrote the backend billing code that 97% of Google’s revenue passes through”.</li>      <li>That’s why Quants makes more in bonuses in a good year than many talented engineers will earn in a lifetime.</li>    </ul>  </li>  <li>Angel investor is a polite synonym for rich.</li>  <li>Most hiring happens privately.    <ul>      <li>Resume is not the primary way to get job interviews, but connections do.</li>      <li>Networking means:        <ul>          <li>Meet people at some point can help you.</li>          <li>Make a favorable impression on them.</li>        </ul>      </li>      <li>Strive to help people first so it’s harder for them to refuse to help you later.</li>    </ul>  </li>  <li>Academia is not like the real world.</li>  <li>People who are skilled in negotiation make more than those who are not.    <ul>      <li>Sell solution to a business need rather than your programming skill.</li>      <li>Learn to negotiate better (refer to <a href=\"https://www.goodreads.com/book/show/313605.Getting_to_Yes\">Getting to Yes</a>).</li>    </ul>  </li>  <li>Working at a startup vs megacorp is more of a lifestyle choice.</li>  <li>Your most important professional skill is communication.</li>  <li>Engineers are not hired to create programs. They are hired to create business value. The dominant quality which gets you jobs is the ability to give people the perception that you will create value.  This is not necessarily coextensive with ability to create value.</li>  <li>Try for “It was a privilege to assist my team by leading their efforts with regards to $YOUR_SPECIALTY.” instead of “I owe it all to my team”.</li>  <li>Read Never Eat Alone for some social grooming hack.</li>  <li>Work to live, don’t live to work.</li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/\">https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/</a></li></ul>",
            "url": "https://hoanhan101.github.io/dont-call-yourself-a-programmer",
            
            
            
            "tags": ["blog","business","negotiation"],
            
            "date_published": "2020-04-16T00:00:00-04:00",
            "date_modified": "2020-04-16T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/unlimited-memory",
            "title": "Unlimited Memory by Kevin Horsley",
            "summary": null,
            "content_text": "  Concentrate:          Do one thing at a time.                  Exceptional work is always associated with periods of deep concentration.                    Have a clear purpose on what you want to learn about.                  What does it matter?          How is it applicable to my life? How can I apply it?          How can it help me achieve my goals?                      Create and connect:          People that learn quickly or have a so-called photographic memory apply their creativity to everything they learn, using the SEE principles.                  S-Senses: the more senses you engage, the more lively the images become, the more memorable they are          E-Exaggeration: exaggerate with humor, make the images illogical, make the learning more fun and easy to memorize          E-Energize: give images action, make a movie, like how Disney does with their objects                    A tip to remember abstract concepts or complex words is to rhyme or break it own to more meaningful concepts. For examples:                  Tiger in Spanish is Tigre, which sounds like tea grey: imagine a tiger drinking grey tea          The capital of Greece is Athens, which sounds like eight hens: imagine them swimming in Greece                    Long-term memory can be used to trap short-term information.                  The car method: use your car image (long-term) and store new information on parts of the car (short-term)          The body method: use parts of your body to store new information          The peg method: use rhyming words to store ordered lists (one-bu, two-shoe, three-tree, four-door, five-hive, six-stick, seven-heaven, eight-gate, nine-vine, ten-hen)                    Linking thoughts, associating concepts, developing a story line are great ways to create a relationship between the known and unknown and strengthen the memory capacity.                  Recall, reinforce, compare different features of what you have already known to what you don’t know                      Continuous use:          Have self-discipline to stick the practice/review sessions.                  Again, have a strong vision and a clear purpose on what you want.          Make it part of your DAILY routine.          Stop listening to your feelings, just do it whether you feel like it or not.                    References:  https://www.goodreads.com/book/show/20958539-unlimited-memory",
            "content_html": "<ul>  <li>Concentrate:    <ul>      <li>Do one thing at a time.        <ul>          <li>Exceptional work is always associated with periods of deep concentration.</li>        </ul>      </li>      <li>Have a clear purpose on what you want to learn about.        <ul>          <li>What does it matter?</li>          <li>How is it applicable to my life? How can I apply it?</li>          <li>How can it help me achieve my goals?</li>        </ul>      </li>    </ul>  </li>  <li>Create and connect:    <ul>      <li>People that learn quickly or have a so-called photographic memory apply their creativity to everything they learn, using the SEE principles.        <ul>          <li>S-Senses: the more senses you engage, the more lively the images become, the more memorable they are</li>          <li>E-Exaggeration: exaggerate with humor, make the images illogical, make the learning more fun and easy to memorize</li>          <li>E-Energize: give images action, make a movie, like how Disney does with their objects</li>        </ul>      </li>      <li>A tip to remember abstract concepts or complex words is to rhyme or break it own to more meaningful concepts. For examples:        <ul>          <li>Tiger in Spanish is Tigre, which sounds like tea grey: imagine a tiger drinking grey tea</li>          <li>The capital of Greece is Athens, which sounds like eight hens: imagine them swimming in Greece</li>        </ul>      </li>      <li>Long-term memory can be used to trap short-term information.        <ul>          <li>The car method: use your car image (long-term) and store new information on parts of the car (short-term)</li>          <li>The body method: use parts of your body to store new information</li>          <li>The peg method: use rhyming words to store ordered lists (one-bu, two-shoe, three-tree, four-door, five-hive, six-stick, seven-heaven, eight-gate, nine-vine, ten-hen)</li>        </ul>      </li>      <li>Linking thoughts, associating concepts, developing a story line are great ways to create a relationship between the known and unknown and strengthen the memory capacity.        <ul>          <li>Recall, reinforce, compare different features of what you have already known to what you don’t know</li>        </ul>      </li>    </ul>  </li>  <li>Continuous use:    <ul>      <li>Have self-discipline to stick the practice/review sessions.        <ul>          <li>Again, have a strong vision and a clear purpose on what you want.</li>          <li>Make it part of your DAILY routine.</li>          <li>Stop listening to your feelings, just do it whether you feel like it or not.</li>        </ul>      </li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/20958539-unlimited-memory\">https://www.goodreads.com/book/show/20958539-unlimited-memory</a></li></ul>",
            "url": "https://hoanhan101.github.io/unlimited-memory",
            
            
            
            "tags": ["book","memory","productivity"],
            
            "date_published": "2020-04-14T00:00:00-04:00",
            "date_modified": "2020-04-14T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/antifragile",
            "title": "Antifragile by Nassim Nicholas Taleb",
            "summary": null,
            "content_text": "  Fragile things are exposed to volatility, robust things resist it, antifragile things benefit from it.  The antifragile system is made up of fragile parts.          The weak one dies in the process while the strong one stays.      Individual failure can provide helpful information to strengthen the system as a whole.        Shock and stressors strengthen antifragile system by forcing them to build up capacity.          When human bounce back after traumatic accidents, hardships or failures, they become stronger.      Lifting heavy puts the body to unusual stress and makes the muscle stronger.      Even though The Titanic was a disaster, it made the ship cruising system stronger.        Trying to over-control systems often leads to fragility.          Mom who overprotects her children prevents them from developing the ability to bounce back and adapt to future difficulties.        To take advantage of antifragility, you don’t need to understand the opportunities you see, just when to seize them.          Society put too much value on theoretical or academic knowledge and not too much on a practical one.      Often the most successful traders don’t know complicated economic theory or finance; they know when to buy and sell.      The Industrial Revolution was not instigated by academics but hobbyists.        The shorter the time frame you observe an event, the higher the noise you will perceive.  Prediction in the modern world is impossible.          We always find patterns, causes, explanations in past events, but they are useless for predicting the future.      An assumption that the worst event we have witnessed must be the worst that could ever happen is simply false.      What’s most likely to stick in the future is what has already been around for long.      Instead of trying to predict what is going to happen, position yourself in such a way that you have optionality.                  The more options you have, the more ways you have to respond to unforeseen events (but not too many options).          Prepare for failure scenarios.                      Squeeze is a situation where you have no choice but to do it, regardless of the cost.          They are the opposite of options.      The larger something is, the harder the squeeze, the more damage it causes.      Still, the larger something is, the harder it will be hit by unexpected events.        The Barbell Strategy suggests to play it safe on one side so that you can take more risks on other side.          Cover your downside to protect yourself from extreme harm.      Let the upside take care of itself.                  If the risky part plays out badly, you’re still fine.          If a Black Swan event makes the risks pay off big, you profit handsomely.                      Practical activities:          Lift heavy weights or do HIIT.      Practice intermittent fasting.      Eat fermented foods, such as sauerkraut, kimchi, yogurt, pickles,…      Cold/heat exposure.                  Take cold showers, ice baths, wear less clothes and sleep only with your sheets.          Take saunas, do Bikram yoga and get a sweat on during training.                    Put most of your money in safe investments and 10% in highly lucrative ones.      Keep your day job but take massive action on your side hustle at night.      References:  https://www.goodreads.com/book/show/13530973-antifragile  http://siimland.com/become-antifragile/",
            "content_html": "<ul>  <li>Fragile things are exposed to volatility, robust things resist it, antifragile things benefit from it.</li>  <li>The antifragile system is made up of fragile parts.    <ul>      <li>The weak one dies in the process while the strong one stays.</li>      <li>Individual failure can provide helpful information to strengthen the system as a whole.</li>    </ul>  </li>  <li>Shock and stressors strengthen antifragile system by forcing them to build up capacity.    <ul>      <li>When human bounce back after traumatic accidents, hardships or failures, they become stronger.</li>      <li>Lifting heavy puts the body to unusual stress and makes the muscle stronger.</li>      <li>Even though The Titanic was a disaster, it made the ship cruising system stronger.</li>    </ul>  </li>  <li>Trying to over-control systems often leads to fragility.    <ul>      <li>Mom who overprotects her children prevents them from developing the ability to bounce back and adapt to future difficulties.</li>    </ul>  </li>  <li>To take advantage of antifragility, you don’t need to understand the opportunities you see, just when to seize them.    <ul>      <li>Society put too much value on theoretical or academic knowledge and not too much on a practical one.</li>      <li>Often the most successful traders don’t know complicated economic theory or finance; they know when to buy and sell.</li>      <li>The Industrial Revolution was not instigated by academics but hobbyists.</li>    </ul>  </li>  <li>The shorter the time frame you observe an event, the higher the noise you will perceive.</li>  <li>Prediction in the modern world is impossible.    <ul>      <li>We always find patterns, causes, explanations in past events, but they are useless for predicting the future.</li>      <li>An assumption that the worst event we have witnessed must be the worst that could ever happen is simply false.</li>      <li>What’s most likely to stick in the future is what has already been around for long.</li>      <li>Instead of trying to predict what is going to happen, position yourself in such a way that you have optionality.        <ul>          <li>The more options you have, the more ways you have to respond to unforeseen events (but not too many options).</li>          <li>Prepare for failure scenarios.</li>        </ul>      </li>    </ul>  </li>  <li>Squeeze is a situation where you have no choice but to do it, regardless of the cost.    <ul>      <li>They are the opposite of options.</li>      <li>The larger something is, the harder the squeeze, the more damage it causes.</li>      <li>Still, the larger something is, the harder it will be hit by unexpected events.</li>    </ul>  </li>  <li>The Barbell Strategy suggests to play it safe on one side so that you can take more risks on other side.    <ul>      <li>Cover your downside to protect yourself from extreme harm.</li>      <li>Let the upside take care of itself.        <ul>          <li>If the risky part plays out badly, you’re still fine.</li>          <li>If a Black Swan event makes the risks pay off big, you profit handsomely.</li>        </ul>      </li>    </ul>  </li>  <li>Practical activities:    <ul>      <li>Lift heavy weights or do HIIT.</li>      <li>Practice intermittent fasting.</li>      <li>Eat fermented foods, such as sauerkraut, kimchi, yogurt, pickles,…</li>      <li>Cold/heat exposure.        <ul>          <li>Take cold showers, ice baths, wear less clothes and sleep only with your sheets.</li>          <li>Take saunas, do Bikram yoga and get a sweat on during training.</li>        </ul>      </li>      <li>Put most of your money in safe investments and 10% in highly lucrative ones.</li>      <li>Keep your day job but take massive action on your side hustle at night.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/13530973-antifragile\">https://www.goodreads.com/book/show/13530973-antifragile</a></li>  <li><a href=\"http://siimland.com/become-antifragile/\">http://siimland.com/become-antifragile/</a></li></ul>",
            "url": "https://hoanhan101.github.io/antifragile",
            
            
            
            "tags": ["book","antifragile","investing"],
            
            "date_published": "2020-04-01T00:00:00-04:00",
            "date_modified": "2020-04-01T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/web-architectural-components",
            "title": "Modern Web Architectural Components",
            "summary": null,
            "content_text": "  Tiers          A tier is a logical separation of components in an application or service - database, backend app, user interface, messaging, caching      Single tier: user interface, backend business logic, database reside in the same machine                  Pros: no network latency          Cons: hard to maintain once is shipped                    Two-tier: client (user interface, business logic) &amp; server (database)                  Communication happens over the HTTP protocol (request-response model &amp; stateless)          REST API takes advantage of the HTTP methodologies to establish communication between the client and the server                    Three-tier: user interface, application logic, database reside in different machines      N-tier: more than 3 components involved - cache, message queues, load balancers,…                  Single Responsibility Principle: a component has only a single responsibility          Separation of concerns: keep components separate, make them reusable                      Scalability          Ability to withstand increased workload without sacrificing the latency      Latency can be divided into 2 parts:                  Network latency: amount of time the network takes to send data packet from point A to B          Application latency: amount of time the application takes to process a user request                    Type of scalability                  Vertical scaling/scaling up: adding more power to server                          Pros: not a lot of overhead on monitoring, operating and maintaining              Cons: single point of failure                                Horizontal scaling/scaling out: adding more hardware to the existing resource pool                          Pros: cheaper, better fault-tolerance              Cons: managing server is hard, writing distributed computing program is also challenging                                          Common bottlenecks that hurt scalability                  Database latency          Poor application architecture          Not caching wisely          Inefficient configuration and load balancing          Adding business logic to the database          Badly written code                    Common strategies to improve and test the scalability                  Profiling          Cache wisely          Use a CDN          Compress data          Avoid unnecessary round trips between client and sever          Run load &amp; stress tests                      High Availability          Ability to stay online despite having failures at the infrastructural level in real-time      Common reasons for system failures                  Software crashes          Hardware crashes          Human error          Planned downtime                    A common way to add more availability is to have redundancy - duplicating the components &amp; keeping them on standby to take over in case the active instances go down        Monolithic &amp; Microservices          Monolithic: entire application code in a single service                  Pros: simple to develop, test, deploy as everything resides in one repo          Cons:                          Continuous deployment means re-deploying the entire application              Single point of failure              Hard to scale                                          Microservices: tasks are split into separate services forming a larger service as a whole                  Pros:                          No single point of failure              Easier to scale independently                                Cons:                          Difficult to manage              No strong consistency                                            Database          Forms of data:                  Structured: conforms to a certain structure, stored in a normalized fashion          Unstructured: no definite structure, could be text, image, video, multimedia files, machine-generated data          Semi-structured: mix of structured and unstructured data, stored in XML or JSON          User state: user logs and activity on the platform                    Why the need for NoSQL while relational database is still doing fine?                  Scaling relational database is not trivial, which requires Sharding or Replicating          NoSQL is fast with read-write and really easy to scale out          Eventual consistency over strong consistency                          Eventual consistency: achieve high availability that informally guarantees that, if no new updates are made, return the last updated value for all accesses              Strong consistency: data has to be strongly consistent at all times                                Data analytics                    Polyglot persistence                  Use different storage technologies to handle different needs within a given software application          Multi-model databases reduce the operational complexity of using several different database models in an application by supporting multiple data models via a single API                    CAP theorem                  It is impossible for a distributed data store to simultaneously provide more than two out of the following three guarantees:                          Consistency: every read receives the most recent write              Availability: every request receives a non-error response              Partition tolerance: system continues to operate despite network failures                                          Types of databases                  Document-oriented: generally semi-structured &amp; stored in a JSON-like format                          Use cases:                                  Working with semi-structured data                  Need a flexible schema                  Examples are real-time feeds, live sport apps, web-based multiplayer games                                            Real life implementations                                  SEGA uses Mongo-DB to simply ops and improve gaming experiences                  Coinbase uses MongoDB to scale from 15k to 1.2 million requests per minute                                                              Graph: store data in nodes/vertices and edges in the form of relationships                          Use cases:                                  Maps                  Social graphs                  Recommendation engines                  Storing genetic data                                            Real life implementations                                  Walmart uses Neo4J to show product recommendations in real-time                  NASA uses Neo4J to store “lessons learned” data                                                              Key-value: use a simple key-value method to store and quickly fetch the data                          Use cases:                                  Caching                  Implementing queue                  Managing real-time data                                            Real life implementations                                  Inovonics uses Redis to drive real-time analytics on millions of sensor data                  Microsoft uses Redis to handle the traffic spike on its platforms                  Google Cloud uses Memcache to implement caching on their cloud platform                                                              Time series: optimized for tracking &amp; persisting time series data                          Use cases:                                  Managing data in real-time &amp; continually over a long period of time                  Managing data for running analytics &amp; monitoring                                            Real life implementations                                  IBM uses Influx DB to run analytics for real-time cognitive fraud detection                  Spiio uses Influx DB to remotely monitor vertical lining green walls &amp; plant installations                                                              Wide Column: primarily used to handle massive amounts of data                          Use cases:                                  Managing big data                                            Real life implementations                                  Netflix uses Cassandra as the backend database for the streaming service                  Adobe uses HBase for processing large amounts of data                                                                          Caching          Ensure low latency and high throughput      Strategies                  Cache Aside:                          First look in the cache, return if present, else fetch from the database and update cache              Has a TTL (Time To Live) period to sync up data              Works well for read-heavy workloads like user profile data                                Read-through                          Similar to Cache Aside, but the cache is always up-to-date                                Write-through                          Cache before writing to database              Works well for write-heavy workloads like MMOs                                Write-back                          Similar to Write-through, but add some delay before writing to database                                            Message queue          Features:                  Facilitate asynchronous behaviour (background processes, tasks, batch jobs)          Facilitate cross-module communication          Provide temporary storage for storing messages until they’re consumed                    Models:                  Publish-subscribe (Pub-sub): one to many relationship          Point to point: one to one relationship                    Protocols:                  Advanced Message Queuing Protocol (AMQP)          Streaming Text Oriented Messaging Protocol (STOMP)                    Real life implementations                  LinkedIn Real-Time Architecture          Facebook’s Live Streaming architecture                      Stream processing          Layers of data processing setup:                  Data collection/query layer          Data standardization layer          Data processing layer          Data analysis layer          Data visualization layer          Data storage layer          Data security layer                    Ways to ingest data:                  Real-time          Batching                    Challenges:                  Formatting, standardizing, converting data from multiple resources is a slow and tedious process          It’s resource-intensive          Moving data around is risky                    Use cases:                  Moving data into Hadoop          Streaming data to Elastic search          Log processing          Real-time streaming                    Distributed data processing                  Diverge large amounts of data to several different nodes for parallel processing          Popular frameworks:                          MapReduce - Apache Hadoop              Apache Spark              Apache Storm              Apache Kafka                                          Architecture                  Lambda leverages both real-time and batching process that consists 3 layers                          Batch: deals with results from the batching process              Speed: gets data from the real-time streaming process              Serving: combines the results from the Batch and Speed layers                                Kappa has only a single pipeline and only contains Speed and Serving layers                          Preferred if the batch and the streaming analytics results are fairly identical                                          Real life implementations                  Netflix’ Keystone Real-time Stream Processing Platform          Netflix’ Migrating Batch ETL to Stream Processing                      Other architectures          Event-driven: capable of handling a big number of concurrent requests with minimal resources      WebHooks: have an event-based mechanism that only fires an HTTP event to consumers whenever new info is available      Share Nothing: every module has its own environment      Hexagonal:                  Port: act as an API, interface          Adapter: an implementation of the interface, convert data from Port to be consumed by Domain          Domain: contain business logic                    Peer to Peer: nodes can communicate with each other without the need of a central server      Decentralized social network      References:  https://www.educative.io/courses/web-application-software-architecture-101",
            "content_html": "<ul>  <li>Tiers    <ul>      <li>A tier is a logical separation of components in an application or service - database, backend app, user interface, messaging, caching</li>      <li>Single tier: user interface, backend business logic, database reside in the same machine        <ul>          <li>Pros: no network latency</li>          <li>Cons: hard to maintain once is shipped</li>        </ul>      </li>      <li>Two-tier: client (user interface, business logic) &amp; server (database)        <ul>          <li>Communication happens over the HTTP protocol (request-response model &amp; stateless)</li>          <li>REST API takes advantage of the HTTP methodologies to establish communication between the client and the server</li>        </ul>      </li>      <li>Three-tier: user interface, application logic, database reside in different machines</li>      <li>N-tier: more than 3 components involved - cache, message queues, load balancers,…        <ul>          <li>Single Responsibility Principle: a component has only a single responsibility</li>          <li>Separation of concerns: keep components separate, make them reusable</li>        </ul>      </li>    </ul>  </li>  <li>Scalability    <ul>      <li>Ability to withstand increased workload without sacrificing the latency</li>      <li>Latency can be divided into 2 parts:        <ul>          <li>Network latency: amount of time the network takes to send data packet from point A to B</li>          <li>Application latency: amount of time the application takes to process a user request</li>        </ul>      </li>      <li>Type of scalability        <ul>          <li>Vertical scaling/scaling up: adding more power to server            <ul>              <li>Pros: not a lot of overhead on monitoring, operating and maintaining</li>              <li>Cons: single point of failure</li>            </ul>          </li>          <li>Horizontal scaling/scaling out: adding more hardware to the existing resource pool            <ul>              <li>Pros: cheaper, better fault-tolerance</li>              <li>Cons: managing server is hard, writing distributed computing program is also challenging</li>            </ul>          </li>        </ul>      </li>      <li>Common bottlenecks that hurt scalability        <ul>          <li>Database latency</li>          <li>Poor application architecture</li>          <li>Not caching wisely</li>          <li>Inefficient configuration and load balancing</li>          <li>Adding business logic to the database</li>          <li>Badly written code</li>        </ul>      </li>      <li>Common strategies to improve and test the scalability        <ul>          <li>Profiling</li>          <li>Cache wisely</li>          <li>Use a CDN</li>          <li>Compress data</li>          <li>Avoid unnecessary round trips between client and sever</li>          <li>Run load &amp; stress tests</li>        </ul>      </li>    </ul>  </li>  <li>High Availability    <ul>      <li>Ability to stay online despite having failures at the infrastructural level in real-time</li>      <li>Common reasons for system failures        <ul>          <li>Software crashes</li>          <li>Hardware crashes</li>          <li>Human error</li>          <li>Planned downtime</li>        </ul>      </li>      <li>A common way to add more availability is to have redundancy - duplicating the components &amp; keeping them on standby to take over in case the active instances go down</li>    </ul>  </li>  <li>Monolithic &amp; Microservices    <ul>      <li>Monolithic: entire application code in a single service        <ul>          <li>Pros: simple to develop, test, deploy as everything resides in one repo</li>          <li>Cons:            <ul>              <li>Continuous deployment means re-deploying the entire application</li>              <li>Single point of failure</li>              <li>Hard to scale</li>            </ul>          </li>        </ul>      </li>      <li>Microservices: tasks are split into separate services forming a larger service as a whole        <ul>          <li>Pros:            <ul>              <li>No single point of failure</li>              <li>Easier to scale independently</li>            </ul>          </li>          <li>Cons:            <ul>              <li>Difficult to manage</li>              <li>No strong consistency</li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Database    <ul>      <li>Forms of data:        <ul>          <li>Structured: conforms to a certain structure, stored in a normalized fashion</li>          <li>Unstructured: no definite structure, could be text, image, video, multimedia files, machine-generated data</li>          <li>Semi-structured: mix of structured and unstructured data, stored in XML or JSON</li>          <li>User state: user logs and activity on the platform</li>        </ul>      </li>      <li>Why the need for NoSQL while relational database is still doing fine?        <ul>          <li>Scaling relational database is not trivial, which requires Sharding or Replicating</li>          <li>NoSQL is fast with read-write and really easy to scale out</li>          <li>Eventual consistency over strong consistency            <ul>              <li>Eventual consistency: achieve high availability that informally guarantees that, if no new updates are made, return the last updated value for all accesses</li>              <li>Strong consistency: data has to be strongly consistent at all times</li>            </ul>          </li>          <li>Data analytics</li>        </ul>      </li>      <li>Polyglot persistence        <ul>          <li>Use different storage technologies to handle different needs within a given software application</li>          <li>Multi-model databases reduce the operational complexity of using several different database models in an application by supporting multiple data models via a single API</li>        </ul>      </li>      <li>CAP theorem        <ul>          <li>It is impossible for a distributed data store to simultaneously provide more than two out of the following three guarantees:            <ul>              <li>Consistency: every read receives the most recent write</li>              <li>Availability: every request receives a non-error response</li>              <li>Partition tolerance: system continues to operate despite network failures</li>            </ul>          </li>        </ul>      </li>      <li>Types of databases        <ul>          <li>Document-oriented: generally semi-structured &amp; stored in a JSON-like format            <ul>              <li>Use cases:                <ul>                  <li>Working with semi-structured data</li>                  <li>Need a flexible schema</li>                  <li>Examples are real-time feeds, live sport apps, web-based multiplayer games</li>                </ul>              </li>              <li>Real life implementations                <ul>                  <li><a href=\"https://www.mongodb.com/blog/post/sega-hardlight-migrates-to-mongodb-atlas-simplify-ops-improve-experience-mobile-gamers\">SEGA uses Mongo-DB to simply ops and improve gaming experiences</a></li>                  <li><a href=\"https://www.mongodb.com/customers/coinbase\">Coinbase uses MongoDB to scale from 15k to 1.2 million requests per minute</a></li>                </ul>              </li>            </ul>          </li>          <li>Graph: store data in nodes/vertices and edges in the form of relationships            <ul>              <li>Use cases:                <ul>                  <li>Maps</li>                  <li>Social graphs</li>                  <li>Recommendation engines</li>                  <li>Storing genetic data</li>                </ul>              </li>              <li>Real life implementations                <ul>                  <li><a href=\"https://neo4j.com/case-studies/walmart/\">Walmart uses Neo4J to show product recommendations in real-time</a></li>                  <li><a href=\"https://neo4j.com/blog/david-meza-chief-knowledge-architect-nasa/\">NASA uses Neo4J to store “lessons learned” data</a></li>                </ul>              </li>            </ul>          </li>          <li>Key-value: use a simple key-value method to store and quickly fetch the data            <ul>              <li>Use cases:                <ul>                  <li>Caching</li>                  <li>Implementing queue</li>                  <li>Managing real-time data</li>                </ul>              </li>              <li>Real life implementations                <ul>                  <li><a href=\"https://redislabs.com/customers/inovonics/\">Inovonics uses Redis to drive real-time analytics on millions of sensor data</a></li>                  <li><a href=\"https://redislabs.com/docs/microsoft-relies-redis-labs/\">Microsoft uses Redis to handle the traffic spike on its platforms</a></li>                  <li><a href=\"https://cloud.google.com/appengine/docs/standard/python/memcache/\">Google Cloud uses Memcache to implement caching on their cloud platform</a></li>                </ul>              </li>            </ul>          </li>          <li>Time series: optimized for tracking &amp; persisting time series data            <ul>              <li>Use cases:                <ul>                  <li>Managing data in real-time &amp; continually over a long period of time</li>                  <li>Managing data for running analytics &amp; monitoring</li>                </ul>              </li>              <li>Real life implementations                <ul>                  <li><a href=\"https://www.influxdata.com/customer/ibm/\">IBM uses Influx DB to run analytics for real-time cognitive fraud detection</a></li>                  <li><a href=\"https://www.influxdata.com/customer/customer_case_study_spiio/\">Spiio uses Influx DB to remotely monitor vertical lining green walls &amp; plant installations</a></li>                </ul>              </li>            </ul>          </li>          <li>Wide Column: primarily used to handle massive amounts of data            <ul>              <li>Use cases:                <ul>                  <li>Managing big data</li>                </ul>              </li>              <li>Real life implementations                <ul>                  <li><a href=\"https://netflixtechblog.com/tagged/cassandra\">Netflix uses Cassandra as the backend database for the streaming service</a></li>                  <li><a href=\"https://hbase.apache.org/poweredbyhbase.html\">Adobe uses HBase for processing large amounts of data</a></li>                </ul>              </li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Caching    <ul>      <li>Ensure low latency and high throughput</li>      <li>Strategies        <ul>          <li>Cache Aside:            <ul>              <li>First look in the cache, return if present, else fetch from the database and update cache</li>              <li>Has a TTL (Time To Live) period to sync up data</li>              <li>Works well for read-heavy workloads like user profile data</li>            </ul>          </li>          <li>Read-through            <ul>              <li>Similar to Cache Aside, but the cache is always up-to-date</li>            </ul>          </li>          <li>Write-through            <ul>              <li>Cache before writing to database</li>              <li>Works well for write-heavy workloads like MMOs</li>            </ul>          </li>          <li>Write-back            <ul>              <li>Similar to Write-through, but add some delay before writing to database</li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Message queue    <ul>      <li>Features:        <ul>          <li>Facilitate asynchronous behaviour (background processes, tasks, batch jobs)</li>          <li>Facilitate cross-module communication</li>          <li>Provide temporary storage for storing messages until they’re consumed</li>        </ul>      </li>      <li>Models:        <ul>          <li>Publish-subscribe (Pub-sub): one to many relationship</li>          <li>Point to point: one to one relationship</li>        </ul>      </li>      <li>Protocols:        <ul>          <li><a href=\"https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol\">Advanced Message Queuing Protocol (AMQP)</a></li>          <li><a href=\"https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol\">Streaming Text Oriented Messaging Protocol (STOMP)</a></li>        </ul>      </li>      <li>Real life implementations        <ul>          <li><a href=\"https://www.8bitmen.com/linkedin-real-time-architecture-how-does-linkedin-identify-its-users-online/\">LinkedIn Real-Time Architecture</a></li>          <li><a href=\"https://engineering.fb.com/ios/under-the-hood-broadcasting-live-video-to-millions/\">Facebook’s Live Streaming architecture</a></li>        </ul>      </li>    </ul>  </li>  <li>Stream processing    <ul>      <li>Layers of data processing setup:        <ul>          <li>Data collection/query layer</li>          <li>Data standardization layer</li>          <li>Data processing layer</li>          <li>Data analysis layer</li>          <li>Data visualization layer</li>          <li>Data storage layer</li>          <li>Data security layer</li>        </ul>      </li>      <li>Ways to ingest data:        <ul>          <li>Real-time</li>          <li>Batching</li>        </ul>      </li>      <li>Challenges:        <ul>          <li>Formatting, standardizing, converting data from multiple resources is a slow and tedious process</li>          <li>It’s resource-intensive</li>          <li>Moving data around is risky</li>        </ul>      </li>      <li>Use cases:        <ul>          <li>Moving data into Hadoop</li>          <li>Streaming data to Elastic search</li>          <li>Log processing</li>          <li>Real-time streaming</li>        </ul>      </li>      <li>Distributed data processing        <ul>          <li>Diverge large amounts of data to several different nodes for parallel processing</li>          <li>Popular frameworks:            <ul>              <li>MapReduce - Apache Hadoop</li>              <li>Apache Spark</li>              <li>Apache Storm</li>              <li>Apache Kafka</li>            </ul>          </li>        </ul>      </li>      <li>Architecture        <ul>          <li>Lambda leverages both real-time and batching process that consists 3 layers            <ul>              <li>Batch: deals with results from the batching process</li>              <li>Speed: gets data from the real-time streaming process</li>              <li>Serving: combines the results from the Batch and Speed layers</li>            </ul>          </li>          <li>Kappa has only a single pipeline and only contains Speed and Serving layers            <ul>              <li>Preferred if the batch and the streaming analytics results are fairly identical</li>            </ul>          </li>        </ul>      </li>      <li>Real life implementations        <ul>          <li><a href=\"https://netflixtechblog.com/keystone-real-time-stream-processing-platform-a3ee651812a\">Netflix’ Keystone Real-time Stream Processing Platform</a></li>          <li><a href=\"https://netflixtechblog.com/keystone-real-time-stream-processing-platform-a3ee651812a\">Netflix’ Migrating Batch ETL to Stream Processing</a></li>        </ul>      </li>    </ul>  </li>  <li>Other architectures    <ul>      <li>Event-driven: capable of handling a big number of concurrent requests with minimal resources</li>      <li>WebHooks: have an event-based mechanism that only fires an HTTP event to consumers whenever new info is available</li>      <li>Share Nothing: every module has its own environment</li>      <li>Hexagonal:        <ul>          <li>Port: act as an API, interface</li>          <li>Adapter: an implementation of the interface, convert data from Port to be consumed by Domain</li>          <li>Domain: contain business logic</li>        </ul>      </li>      <li>Peer to Peer: nodes can communicate with each other without the need of a central server</li>      <li>Decentralized social network</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.educative.io/courses/web-application-software-architecture-101\">https://www.educative.io/courses/web-application-software-architecture-101</a></li></ul>",
            "url": "https://hoanhan101.github.io/web-architectural-components",
            
            
            
            
            
            "date_published": "2020-03-28T00:00:00-04:00",
            "date_modified": "2020-03-28T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/reduce-stress-investing",
            "title": "How Checking Performance Might Hurt Your Performance",
            "summary": null,
            "content_text": "Paying too much attention to your investments (more than once per quarter) costs more than just your time:  Make you more risk-averse.          The shorter the time the returns are generated from, the less risk investors are willing to take.      You’ll see loss 50% of the time if you check performance daily, 25% if one a year, 1% if 7 years.        Mislead about future return.          Knowing which stocks performed the best last month won’t tell you which ones will perform the best this month.      Even professionals can get caught in this trap.        Increase your risk of performance chasing, which could reduce your returns.          Past performance is not necessarily indicative of future results.      Performance chasing could cost an investor between 2 to 4% per year.        Make you unhappy.          We tend to feel losses more powerfully than we feel gains.      Market losses are the one constant that don’t change over time, meaning you’ll see losses most of the time.      Next time, think twice before you feel the urge to check on your performance!References:  https://www.betterment.com/resources/reduce-stress-investing/",
            "content_html": "<p>Paying too much attention to your investments (more than once per quarter) costs more than just your time:</p><ul>  <li>Make you more risk-averse.    <ul>      <li>The shorter the time the returns are generated from, the less risk investors are willing to take.</li>      <li>You’ll see loss 50% of the time if you check performance daily, 25% if one a year, 1% if 7 years.</li>    </ul>  </li>  <li>Mislead about future return.    <ul>      <li>Knowing which stocks performed the best last month won’t tell you which ones will perform the best this month.</li>      <li>Even professionals can get caught in this trap.</li>    </ul>  </li>  <li>Increase your risk of performance chasing, which could reduce your returns.    <ul>      <li>Past performance is not necessarily indicative of future results.</li>      <li>Performance chasing could cost an investor between 2 to 4% per year.</li>    </ul>  </li>  <li>Make you unhappy.    <ul>      <li>We tend to feel losses more powerfully than we feel gains.</li>      <li>Market losses are the one constant that don’t change over time, meaning you’ll see losses most of the time.</li>    </ul>  </li></ul><p>Next time, think twice before you feel the urge to check on your performance!</p><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.betterment.com/resources/reduce-stress-investing/\">https://www.betterment.com/resources/reduce-stress-investing/</a></li></ul>",
            "url": "https://hoanhan101.github.io/reduce-stress-investing",
            
            
            
            "tags": ["blog","health","stress","investing"],
            
            "date_published": "2020-03-25T00:00:00-04:00",
            "date_modified": "2020-03-25T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/brief-history-scaling-linkedin",
            "title": "A Brief History of Scaling LinkedIn",
            "summary": null,
            "content_text": "  Started as a single monolithic application, Leo, that hosted various pages, handled business logic and connected to a handful of databases  Needed to manage a network of member connections and scale independent of Leo so built a new system for their member graph          Used Java RPC for communication, Apache Lucene for search capabilities        Introduced replica DBs as the site grew          To keep replica DBs in sync, built data capture system, Databus, then open-sourced it        Observed that Leo was often going down in production, difficult for the team to troubleshoot, recover, release new code          Killed Leo      Broke it up into many small services                  Frontend: fetch data models from different domains, presentation logic          Mid-tier: provide API access to data models and add more layer of cache (memcache/couchbase/Voldemort)          Backend: provide consistent access to its database                      Developed data pipelines for streaming and queueing data that later became Apache Kafka          Empowered Hadoop jobs      Built realtime analytics      Improved monitoring and alerting        In 2011, kicked off an internal initiative, Inversion          Paused on feature development      Focused on improving tooling and deployment, infrastructure, and developer productivity        Got rid of Jave RPC because it was inconsistent across team as well as tightly coupled and built Rest.li for a more scalable RESTful architecture  Since fetching many types of different data and making hundreds of downstream calls made the “call graph” difficult to manage, the team grouped multiple services together to allow a single access API          Had a specific team optimize the block        Scaled to 3 main data centers and multiple PoP around the globe in 2015  Developed an offline workflow using Hadoop to precompute data insights  Rethought frontend approach          Added client template, Dust.js, to the mix      Cached templates in CDNs and browsers      Adapted BigPipe and Play Framework for an async experience        Introduced multiple tiers of proxies, Apache Traffic Server, HAProxy, to handle load balancing, data center pinning, security, intelligent routing, server side rendering,…  Utilized optimized hardware, advanced memory and system tuning, and newer Java runtimesReferences:  https://engineering.linkedin.com/architecture/brief-history-scaling-linkedin",
            "content_html": "<ul>  <li>Started as a single monolithic application, Leo, that hosted various pages, handled business logic and connected to a handful of databases</li>  <li>Needed to manage a network of member connections and scale independent of Leo so built a new system for their member graph    <ul>      <li>Used Java RPC for communication, Apache Lucene for search capabilities</li>    </ul>  </li>  <li>Introduced replica DBs as the site grew    <ul>      <li>To keep replica DBs in sync, built data capture system, Databus, then open-sourced it</li>    </ul>  </li>  <li>Observed that Leo was often going down in production, difficult for the team to troubleshoot, recover, release new code    <ul>      <li>Killed Leo</li>      <li>Broke it up into many small services        <ul>          <li>Frontend: fetch data models from different domains, presentation logic</li>          <li>Mid-tier: provide API access to data models and add more layer of cache (memcache/couchbase/Voldemort)</li>          <li>Backend: provide consistent access to its database</li>        </ul>      </li>    </ul>  </li>  <li>Developed data pipelines for streaming and queueing data that later became Apache Kafka    <ul>      <li>Empowered Hadoop jobs</li>      <li>Built realtime analytics</li>      <li>Improved monitoring and alerting</li>    </ul>  </li>  <li>In 2011, kicked off an internal initiative, Inversion    <ul>      <li>Paused on feature development</li>      <li>Focused on improving tooling and deployment, infrastructure, and developer productivity</li>    </ul>  </li>  <li>Got rid of Jave RPC because it was inconsistent across team as well as tightly coupled and built Rest.li for a more scalable RESTful architecture</li>  <li>Since fetching many types of different data and making hundreds of downstream calls made the “call graph” difficult to manage, the team grouped multiple services together to allow a single access API    <ul>      <li>Had a specific team optimize the block</li>    </ul>  </li>  <li>Scaled to 3 main data centers and multiple PoP around the globe in 2015</li>  <li>Developed an offline workflow using Hadoop to precompute data insights</li>  <li>Rethought frontend approach    <ul>      <li>Added client template, Dust.js, to the mix</li>      <li>Cached templates in CDNs and browsers</li>      <li>Adapted BigPipe and Play Framework for an async experience</li>    </ul>  </li>  <li>Introduced multiple tiers of proxies, Apache Traffic Server, HAProxy, to handle load balancing, data center pinning, security, intelligent routing, server side rendering,…</li>  <li>Utilized optimized hardware, advanced memory and system tuning, and newer Java runtimes</li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://engineering.linkedin.com/architecture/brief-history-scaling-linkedin\">https://engineering.linkedin.com/architecture/brief-history-scaling-linkedin</a></li></ul>",
            "url": "https://hoanhan101.github.io/brief-history-scaling-linkedin",
            
            
            
            "tags": ["microservices","linkedin"],
            
            "date_published": "2020-03-24T00:00:00-04:00",
            "date_modified": "2020-03-24T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/serverless-aws-lamda",
            "title": "Serverless architecture with AWS Lamda",
            "summary": null,
            "content_text": "  Basic:          Also called function-as-a-service      Let developers focus on writing function/business logic instead of focusing on managing server        Benefits          Shorter time to market for new features      Reduced operational costs        Notable services: AWS Lamda, Google Cloud Functions  Pricing model:          Pay for actual usage, not reserved capacity - pay none if use none      Depends on                  Maximum memory for a task          Time it spent executing one                      AWS Lamda technical constraints          No session affinity - don’t get to decide about starting up, shutting down instances, or managing states in-memory state between two functions      Non-deterministic latency - some requests will need to wait for a Lamda instance to start      Execution time-limited to 15 minutes      No direct control over processing power        When to use Lamda          Throughput is critical and tasks parallelize nicely                  Requests for dynamic content          Access to backend database          User data manipulation          Automatic email replies or chatbots                    Splittable long-running tasks                  File format conversion          Generating previews/thumbnails          Periodic reports                    High availability tasks                  Payment notifications from Stripe, PayPal,…                      When not to use          Latency guaranteed tasks                  High-frequency trading systems          Near-real-time control systems                    Long-running tasks                  Video transcoding for large files          Connecting to a socket and consuming continuous data                    Tasks demanding high processing power                  Video rendering                    Tasks requiring no on-demand computation                  Serving static web files                    References:  https://www.educative.io/courses/running-serverless-applications-aws-lambda",
            "content_html": "<ul>  <li>Basic:    <ul>      <li>Also called function-as-a-service</li>      <li>Let developers focus on writing function/business logic instead of focusing on managing server</li>    </ul>  </li>  <li>Benefits    <ul>      <li>Shorter time to market for new features</li>      <li>Reduced operational costs</li>    </ul>  </li>  <li>Notable services: AWS Lamda, Google Cloud Functions</li>  <li>Pricing model:    <ul>      <li>Pay for actual usage, not reserved capacity - pay none if use none</li>      <li>Depends on        <ul>          <li>Maximum memory for a task</li>          <li>Time it spent executing one</li>        </ul>      </li>    </ul>  </li>  <li>AWS Lamda technical constraints    <ul>      <li>No session affinity - don’t get to decide about starting up, shutting down instances, or managing states in-memory state between two functions</li>      <li>Non-deterministic latency - some requests will need to wait for a Lamda instance to start</li>      <li>Execution time-limited to 15 minutes</li>      <li>No direct control over processing power</li>    </ul>  </li>  <li>When to use Lamda    <ul>      <li>Throughput is critical and tasks parallelize nicely        <ul>          <li>Requests for dynamic content</li>          <li>Access to backend database</li>          <li>User data manipulation</li>          <li>Automatic email replies or chatbots</li>        </ul>      </li>      <li>Splittable long-running tasks        <ul>          <li>File format conversion</li>          <li>Generating previews/thumbnails</li>          <li>Periodic reports</li>        </ul>      </li>      <li>High availability tasks        <ul>          <li>Payment notifications from Stripe, PayPal,…</li>        </ul>      </li>    </ul>  </li>  <li>When not to use    <ul>      <li>Latency guaranteed tasks        <ul>          <li>High-frequency trading systems</li>          <li>Near-real-time control systems</li>        </ul>      </li>      <li>Long-running tasks        <ul>          <li>Video transcoding for large files</li>          <li>Connecting to a socket and consuming continuous data</li>        </ul>      </li>      <li>Tasks demanding high processing power        <ul>          <li>Video rendering</li>        </ul>      </li>      <li>Tasks requiring no on-demand computation        <ul>          <li>Serving static web files</li>        </ul>      </li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.educative.io/courses/running-serverless-applications-aws-lambda\">https://www.educative.io/courses/running-serverless-applications-aws-lambda</a></li></ul>",
            "url": "https://hoanhan101.github.io/serverless-aws-lamda",
            
            
            
            "tags": ["serverless","aws","lamda"],
            
            "date_published": "2020-03-23T00:00:00-04:00",
            "date_modified": "2020-03-23T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/rework",
            "title": "Rework by Jason Fried",
            "summary": null,
            "content_text": "  Takedowns.          Today is a new reality where anyone can be in business.                  Informations are easy to access and within reach.          It’s easy to work from home or collaborate with others across the globe.          Stuff that was impossible is simple today.                    Writing a plan makes you feel in control of things you can’t control.                  Plans are guesses.          Don’t be obsess you it. It’s OK to wing.          Figure out what’s the next most important thing and do it.                    Don’t be insecure about aiming to be a small business. As long as it’s sustainable and profitable, you should be proud.      Working more doesn’t mean you get more done.        Go.          If you’re going to do something, do something that matters.                  To do great work, you need to feel you’re making a different, putting a meaningful dent in the universe, that you’re part of something important. You don’t have to cure cancer. You want your customer say it makes their lives better.          You should feel an urgency too as you don’t live forever. Don’t wait for someone to make the changes you want to see.                    The easiest way to create a product/service is to make something you want to use.                  Solve your own problem first as you know what you need the most.                    Having the idea has nothing to do with actually making it.                  Start creating.          Ideas are cheap, how you execute them are what matters.                    Perfect time never comes as you’re always too busy doing something else. Do it now.      Always know why you’re doing what you’re doing. Stand for something and be proud of it.      Avoid outside funding as much as you can.                  Service businesses don’t require much capital to bootstrap anyway.          Taking people money means you have less control of your business and more human problem.          You need less than you think. Stay lean. Be frugal.                    Think about profit from day one.      Think about commitment strategy (how to grow and succeed), not exit strategy. Focus on getting customers to love you, not about worrying who’s going to buy you.        Progress.          Focus on the core product itself, ignore the details early on.      Don’t wait for the perfect solution. Do it and reflect.      Stick to the essential. Cut out unnecessary details, simplify, sort out what truly matters.      Once your product does what it needs to do at the minimum, get it out there.        Productivity.          Start making something real. Anything else is just a distraction.      Ensure that you’re doing work that matters?                  Why are you doing this?          What is the problem, exactly?          Is it actually useful?          Is it adding value at all?          Is there an easier way?          What could you be doing instead?          Is this really worth it?                    Interruption is the enemy of productivity.      Avoid meetings as they’re unproductive most of the time. Only meet when:                  Have a set time.          Invite as few people as possible.          Have a clear agenda.          Begin with a specific problem.          End with a solution and implementation plan.                    When good enough gets the job done, go for it. You can usually turn good enough to great later.      Build momentum by accomplishing small wins regularly.      Have enough sleep everyday.      Break your time frames into smaller chunks and estimate accordingly.      Use a small todo list.        Competitors.          Don’t copy competitors since you don’t know their why. Instead, believe your way.      Instead of trying to win a competitor, focus on quality (really good basic features) instead of quantities (more features).      Don’t spend too much time worrying about competitors. Focus on improving yourself instead.        Evolution.          Learn to say no.      Ask for feedbacks and ideas with enthusiasm but always evaluate the priority with a calm mind.        Promotion.          When it’s early, it’s easier to take risks without worrying about embarrassing yourself.      Build an audience.                  Speak, write, blog, tweet, make videos, and so on.          Share valuable information and slowly grow your fan.          Get people interested in what you have to say.                    Teaching/sharing educational content is one of the best marketing tactics.      Be genuine. Be transparent.      Have personal, meaningful press releases instead of vague and generic ones.      As long you have something to sell, don’t be afraid to give things away for free.        Hiring.          Do it yourself first to understand what it takes.      Hire when you can’t do it no more.      Pass on hiring people you don’t need.      Hire slowly.      How long someone’s been doing it is overrated. What matters is how well.      Hire the best talent, regardless where it is.      Best way to test-drive applicants is to see them work. Hire for a mini project and go from there.        Getting real.References:  https://basecamp.com/books/rework",
            "content_html": "<ul>  <li>Takedowns.    <ul>      <li>Today is a new reality where anyone can be in business.        <ul>          <li>Informations are easy to access and within reach.</li>          <li>It’s easy to work from home or collaborate with others across the globe.</li>          <li>Stuff that was impossible is simple today.</li>        </ul>      </li>      <li>Writing a plan makes you feel in control of things you can’t control.        <ul>          <li>Plans are guesses.</li>          <li>Don’t be obsess you it. It’s OK to wing.</li>          <li>Figure out what’s the next most important thing and do it.</li>        </ul>      </li>      <li>Don’t be insecure about aiming to be a small business. As long as it’s sustainable and profitable, you should be proud.</li>      <li>Working more doesn’t mean you get more done.</li>    </ul>  </li>  <li>Go.    <ul>      <li>If you’re going to do something, do something that matters.        <ul>          <li>To do great work, you need to feel you’re making a different, putting a meaningful dent in the universe, that you’re part of something important. You don’t have to cure cancer. You want your customer say it makes their lives better.</li>          <li>You should feel an urgency too as you don’t live forever. Don’t wait for someone to make the changes you want to see.</li>        </ul>      </li>      <li>The easiest way to create a product/service is to make something you want to use.        <ul>          <li>Solve your own problem first as you know what you need the most.</li>        </ul>      </li>      <li>Having the idea has nothing to do with actually making it.        <ul>          <li>Start creating.</li>          <li>Ideas are cheap, how you execute them are what matters.</li>        </ul>      </li>      <li>Perfect time never comes as you’re always too busy doing something else. Do it now.</li>      <li>Always know why you’re doing what you’re doing. Stand for something and be proud of it.</li>      <li>Avoid outside funding as much as you can.        <ul>          <li>Service businesses don’t require much capital to bootstrap anyway.</li>          <li>Taking people money means you have less control of your business and more human problem.</li>          <li>You need less than you think. Stay lean. Be frugal.</li>        </ul>      </li>      <li>Think about profit from day one.</li>      <li>Think about commitment strategy (how to grow and succeed), not exit strategy. Focus on getting customers to love you, not about worrying who’s going to buy you.</li>    </ul>  </li>  <li>Progress.    <ul>      <li>Focus on the core product itself, ignore the details early on.</li>      <li>Don’t wait for the perfect solution. Do it and reflect.</li>      <li>Stick to the essential. Cut out unnecessary details, simplify, sort out what truly matters.</li>      <li>Once your product does what it needs to do at the minimum, get it out there.</li>    </ul>  </li>  <li>Productivity.    <ul>      <li>Start making something real. Anything else is just a distraction.</li>      <li>Ensure that you’re doing work that matters?        <ul>          <li>Why are you doing this?</li>          <li>What is the problem, exactly?</li>          <li>Is it actually useful?</li>          <li>Is it adding value at all?</li>          <li>Is there an easier way?</li>          <li>What could you be doing instead?</li>          <li>Is this really worth it?</li>        </ul>      </li>      <li>Interruption is the enemy of productivity.</li>      <li>Avoid meetings as they’re unproductive most of the time. Only meet when:        <ul>          <li>Have a set time.</li>          <li>Invite as few people as possible.</li>          <li>Have a clear agenda.</li>          <li>Begin with a specific problem.</li>          <li>End with a solution and implementation plan.</li>        </ul>      </li>      <li>When good enough gets the job done, go for it. You can usually turn good enough to great later.</li>      <li>Build momentum by accomplishing small wins regularly.</li>      <li>Have enough sleep everyday.</li>      <li>Break your time frames into smaller chunks and estimate accordingly.</li>      <li>Use a small todo list.</li>    </ul>  </li>  <li>Competitors.    <ul>      <li>Don’t copy competitors since you don’t know their why. Instead, believe your way.</li>      <li>Instead of trying to win a competitor, focus on quality (really good basic features) instead of quantities (more features).</li>      <li>Don’t spend too much time worrying about competitors. Focus on improving yourself instead.</li>    </ul>  </li>  <li>Evolution.    <ul>      <li>Learn to say no.</li>      <li>Ask for feedbacks and ideas with enthusiasm but always evaluate the priority with a calm mind.</li>    </ul>  </li>  <li>Promotion.    <ul>      <li>When it’s early, it’s easier to take risks without worrying about embarrassing yourself.</li>      <li>Build an audience.        <ul>          <li>Speak, write, blog, tweet, make videos, and so on.</li>          <li>Share valuable information and slowly grow your fan.</li>          <li>Get people interested in what you have to say.</li>        </ul>      </li>      <li>Teaching/sharing educational content is one of the best marketing tactics.</li>      <li>Be genuine. Be transparent.</li>      <li>Have personal, meaningful press releases instead of vague and generic ones.</li>      <li>As long you have something to sell, don’t be afraid to give things away for free.</li>    </ul>  </li>  <li>Hiring.    <ul>      <li>Do it yourself first to understand what it takes.</li>      <li>Hire when you can’t do it no more.</li>      <li>Pass on hiring people you don’t need.</li>      <li>Hire slowly.</li>      <li>How long someone’s been doing it is overrated. What matters is how well.</li>      <li>Hire the best talent, regardless where it is.</li>      <li>Best way to test-drive applicants is to see them work. Hire for a mini project and go from there.</li>    </ul>  </li>  <li><a href=\"/getting-real\">Getting real.</a></li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://basecamp.com/books/rework\">https://basecamp.com/books/rework</a></li></ul>",
            "url": "https://hoanhan101.github.io/rework",
            
            
            
            "tags": ["book","business","productivity"],
            
            "date_published": "2020-03-13T00:00:00-04:00",
            "date_modified": "2020-03-13T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/how-will-you-measure-your-life",
            "title": "How Will You Measure Your Life? by Clayton Christensen",
            "summary": null,
            "content_text": "  Find happiness in your career:          Motivation theory - hygiene factors vs motivation factors:                  Hygiene factors are status, compensation, job security, work condition, company policies,…                          Bad hygiene causes dissatisfaction - low salary, poor condition,…              Improving the hygience factors of your job won’t make you love it, instead just stop you from hating it.                                Motivation factors are challenging work, recognition, responsibility, and personal growth.                          Motivation is less about the external stimulation but more about what’s inside of you and your work.              It’s a job that truly meaningful to you, is challenging and intersting, allows you to grow professionally, provides you good oppoturnities,…                                One of the easiest mistake is to focus on over-satisfy the hygiene factors over the motivation factors.                          Better salaries, more prestigious title, nicer office are not gonna make you happy.              That said, ask yourself frequently:                                  Is this work meaningful to me?                  Is this job going to give me a chance to develop?                  Am I going to learn new things?                  Will I have an opportunity for recognition and achievement?                  Am I going to be given responsibility?                                                                        How to find a career that both motivates you and satisfies the hygiene factors?                  Before taking a job, ask yourself what assumptions have to prove true for you to be happy.                          Is this something that you enjoy doing?              What evidence do you have?                                Find ways to to test these assumptions.                    How to make sure you’re heading in the right decision on a daily basis?                  Look at how you manage your resources - time, energy, talent, wealth.          Prioritize on things that require long-term investment (building a good relationship with your family, building a business, raising a child,…)                          It’s often sad to see the same patterns happening over again in the personal lives of many ambituos people - though they believe that family is important, they actually allocate few resources for them.                                            Find happiness in your relationships:          Relationships with family and close friends are one the greatest sources of happiness in life.      It needs CONSISTENT attention and care, though it’s difficult because.                  You’ll be routinely tempted to invest your resources elsewhere that provide you a more immediate payoff.          Your family and friends rarely shout the loudest to demand your attention.                    The clock of building a fulfilling relationship is ticking from the start.      Understand what’s the most important to the other person by asking yourself “What job does one most need me to do?”.      Children need to do more than learning new skills.                  Allow them to be challenged, let them solve hard problems independently and develop values themselves.          Don’t afraid to let them fail.                      Live a life of integrity (or stay out of jail):          Integrity requires constant self-awareness.      The best way to avoid the consequences of uncomfortable moral concessions is to never start making one in the first place.      References:  https://www.goodreads.com/book/show/13425570-how-will-you-measure-your-life",
            "content_html": "<ul>  <li>Find happiness in your career:    <ul>      <li>Motivation theory - hygiene factors vs motivation factors:        <ul>          <li>Hygiene factors are status, compensation, job security, work condition, company policies,…            <ul>              <li>Bad hygiene causes dissatisfaction - low salary, poor condition,…</li>              <li>Improving the hygience factors of your job won’t make you love it, instead just stop you from hating it.</li>            </ul>          </li>          <li>Motivation factors are challenging work, recognition, responsibility, and personal growth.            <ul>              <li>Motivation is less about the external stimulation but more about what’s inside of you and your work.</li>              <li>It’s a job that truly meaningful to you, is challenging and intersting, allows you to grow professionally, provides you good oppoturnities,…</li>            </ul>          </li>          <li>One of the easiest mistake is to focus on over-satisfy the hygiene factors over the motivation factors.            <ul>              <li>Better salaries, more prestigious title, nicer office are not gonna make you happy.</li>              <li>That said, ask yourself frequently:                <ul>                  <li>Is this work meaningful to me?</li>                  <li>Is this job going to give me a chance to develop?</li>                  <li>Am I going to learn new things?</li>                  <li>Will I have an opportunity for recognition and achievement?</li>                  <li>Am I going to be given responsibility?</li>                </ul>              </li>            </ul>          </li>        </ul>      </li>      <li>How to find a career that both motivates you and satisfies the hygiene factors?        <ul>          <li>Before taking a job, ask yourself what assumptions have to prove true for you to be happy.            <ul>              <li>Is this something that you enjoy doing?</li>              <li>What evidence do you have?</li>            </ul>          </li>          <li>Find ways to to test these assumptions.</li>        </ul>      </li>      <li>How to make sure you’re heading in the right decision on a daily basis?        <ul>          <li>Look at how you manage your resources - time, energy, talent, wealth.</li>          <li>Prioritize on things that require long-term investment (building a good relationship with your family, building a business, raising a child,…)            <ul>              <li>It’s often sad to see the same patterns happening over again in the personal lives of many ambituos people - though they believe that family is important, they actually allocate few resources for them.</li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Find happiness in your relationships:    <ul>      <li>Relationships with family and close friends are one the greatest sources of happiness in life.</li>      <li>It needs CONSISTENT attention and care, though it’s difficult because.        <ul>          <li>You’ll be routinely tempted to invest your resources elsewhere that provide you a more immediate payoff.</li>          <li>Your family and friends rarely shout the loudest to demand your attention.</li>        </ul>      </li>      <li>The clock of building a fulfilling relationship is ticking from the start.</li>      <li>Understand what’s the most important to the other person by asking yourself “What job does one most need me to do?”.</li>      <li>Children need to do more than learning new skills.        <ul>          <li>Allow them to be challenged, let them solve hard problems independently and develop values themselves.</li>          <li>Don’t afraid to let them fail.</li>        </ul>      </li>    </ul>  </li>  <li>Live a life of integrity (or stay out of jail):    <ul>      <li>Integrity requires constant self-awareness.</li>      <li>The best way to avoid the consequences of uncomfortable moral concessions is to never start making one in the first place.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/13425570-how-will-you-measure-your-life\">https://www.goodreads.com/book/show/13425570-how-will-you-measure-your-life</a></li></ul>",
            "url": "https://hoanhan101.github.io/how-will-you-measure-your-life",
            
            
            
            "tags": ["book","career","relationship"],
            
            "date_published": "2020-03-13T00:00:00-04:00",
            "date_modified": "2020-03-13T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/getting-real",
            "title": "Getting Real by Jason Fried",
            "summary": null,
            "content_text": "  The starting line:          Build less: less features, options, people, meetings, promises.      Solve your problem.                  You know what’s is important and what’s not for the product itself.          It’s likely people have the same problem so now you have a market too.                    Fund yourself                  Outside funding is plan B.          Investors want their money back quickly → overhead + other complicated things follow.          Money constraints force you to focus + allow creativity.                    Fix time and budget, flex scope: better to launch great thing, on time, on a budget in small scope than big ones with many holes.      Pick up an enemy and use it as an motivation to tell better story.      If your app doesn’t excite you, something’s wrong.        Stay lean.          Simplify + focus.      Lower the cost of change → change faster (huge advantage over big company).      Start with 3 people: a developer, a designer, and a sweeper who can roam between both world.      Work with your limited resources. Forget about VC, long release cycles, quick hires,…      Stay small and friendly → get closer to customer.        Priorities.          What is the app vision? Why does it exit? What makes it different?      Don’t get too deep in the details early one. Ship it first and optimize it later.      Don’t waste time on problems you don’t have yet:                  Scaling to millions of users? Stop dreaming! Majority of apps are never going to reach that phase. Worry about it later once it’s wildly successful.          Make decisions in time.                    Find the right audience.                  Narrow the market.          Focus on the nice or small group of people who wants the product the most.          Don’t try to please everyone.                    Make opinionated software, choose side, like every great companies (Apple, Google, Nitendo).        Feature selection.          What is the heart of the app?                  Forget milestone, TODO lists.          Just focus on the essential.          Let it gain traction. Then add to that foundation.                    Focus on what matters, REALLY. Cut off everything else.      Learn to say no because you have to do that a lot.      For every new feature, you need to:                  Say no.          Force the feature to provide its value.          If no, end. If yes, continue.          Sketch the UI.          Design the UI.          Code.          Test, tweak, repeat.          Document.          Market.          Revisit pricing options, term of service.          Launch.                    Build something that you can manage, organizationally, strategically, financially.      Don’t worry too much about feature requests. Customers will constantly remind you about that.      Ask customer what they don’t want too and simplify it if possible.        Process.          Get something real up and running quickly: it’s OK to do less, skip details, take shortcuts.                  Fail fast and learn.          Avoid unproductive scheduling and action faking (doing bullshit works that feel “productive” that doesn’t get you closer to launching).                    Idea-to-implementation cycle.                  What does the app need to do? What exactly are you going to make?          Sketch it out on paper.          Create mock-up html screens.          Code.                    Allowing options/preferences for customers is not necessarily helping them.                  If you make a bad call, they will complain, then you can fix it.                    Execute. Build momentum. Move on.      Test in the wild.                  Get it out there. Get real results + feedback.          Instead of having a beta version and a release version, have beta features in side the release one so you can have real data + workflow.          Break it down into smaller problems and solve it one by one.                      Organization.          Build a healthy organization.      Utilize your alone time to get work done.      Meetings are normally unproductive.      Have fewer meetings.      Only have it with a clear agenda.      Release something today. Celebrate small victories.        Staffing.          Hire less, only when it’s really needed.      Working with prospective employees on a real project can give a lot of insights. However, not everyone has time for that.      Look at people codes + contribution on open-source projects.      Go for quick learning generalists over ingrained specialists.      Go for happy one.      Hire good writers because they know how to communicate.        Interface.          Design the interface before you start coding.      Start from the core page and build outward. Focus on what matters.      For each page, consider these 3 states:                  Blank: the screen before data is entered (could insert quick tutorials, help blurbs, examples with mock data,…)          Regular: normal page          Error: when shit happens                    It’s OK to be inconsistent if your design makes more sense that way      Every letter matters.                  Don’t sound like an engineer talking to another engineer.          Keep it short and sweet.                    Incorporate admin function into public interfaces so you don’t need to manage 2 different versions.        Code.          Keep it simple. But be mindful about technical debt.      Less maintenance and support work.      Low cost of change.      Fewer bugs.      Choose the tools that everyone is happy and productive with.      Get data into the world via RSS, API,…        Words.          Document what is needed but nothing else.      Write stories, not details.                  Don’t get into the technical/design details, just a quick story.          Treat it as a normal conversation.                    Use real data if possible, not dummy text all the time → focus on the UX.      What is your product’s personality type?        Pricing and signup          Give something for free. Let  people experience and see its usefulness.      Make signup and cancellation easy.      Avoid long term contract, signup fee,…        Promotion.          Teaser (dropping hints), preview, launch.      Build a promo site: overview, tour, screenshots, videos, manifesto, case studies, buzz (customers, press reviews,…), forum, pricing and signup, blog,…      Blogging can be more effective (and cheaper) than advertising. Could write about advices, tips, tricks, links,…      Start collecting emails asap.      Share your knowledge. Teaching/educating is a great way to market yourself and your product too.                  Blog (as above).          Speak at conferences.          Conduct workshops.          Give interviews.          Write articles/books                    Track your online present. Leave comments, thank you notes, response to negative ones thoughtfully.      Promote upgrade, in-app purchases.      Pick an short, catchy, memorable name.        Support.          Feel the pain yourself. Don’t outsource. Learn from it.      Use inline help and FAQ instead of giving manual training.      Just response quickly even if you don’t have a perfect answer (during business hour).      Also thank them for their input.      Be willing to say no.      Use forum or chat to let customers help each other.      Be open, honest, transparent (yeah bad news).        Post launch.          Issue a major update 30 days after launch.      Don’t stop blogging: new FAQs, tutorials, news, features, updates, fixes, buzz/press.      Prioritize your bugs.      Wait before the storm, 1-2 days after releasing a new feature and hearing complaints, then take action.      Know your competitors.      More mature doesn’t mean more complicated, as long as you provide valuable services that’s fine.      Be open to new paths and changes in direction .      References:  https://basecamp.com/books/getting-real",
            "content_html": "<ul>  <li>The starting line:    <ul>      <li>Build less: less features, options, people, meetings, promises.</li>      <li>Solve your problem.        <ul>          <li>You know what’s is important and what’s not for the product itself.</li>          <li>It’s likely people have the same problem so now you have a market too.</li>        </ul>      </li>      <li>Fund yourself        <ul>          <li>Outside funding is plan B.</li>          <li>Investors want their money back quickly → overhead + other complicated things follow.</li>          <li>Money constraints force you to focus + allow creativity.</li>        </ul>      </li>      <li>Fix time and budget, flex scope: better to launch great thing, on time, on a budget in small scope than big ones with many holes.</li>      <li>Pick up an enemy and use it as an motivation to tell better story.</li>      <li>If your app doesn’t excite you, something’s wrong.</li>    </ul>  </li>  <li>Stay lean.    <ul>      <li>Simplify + focus.</li>      <li>Lower the cost of change → change faster (huge advantage over big company).</li>      <li>Start with 3 people: a developer, a designer, and a sweeper who can roam between both world.</li>      <li>Work with your limited resources. Forget about VC, long release cycles, quick hires,…</li>      <li>Stay small and friendly → get closer to customer.</li>    </ul>  </li>  <li>Priorities.    <ul>      <li>What is the app vision? Why does it exit? What makes it different?</li>      <li>Don’t get too deep in the details early one. Ship it first and optimize it later.</li>      <li>Don’t waste time on problems you don’t have yet:        <ul>          <li>Scaling to millions of users? Stop dreaming! Majority of apps are never going to reach that phase. Worry about it later once it’s wildly successful.</li>          <li>Make decisions in time.</li>        </ul>      </li>      <li>Find the right audience.        <ul>          <li>Narrow the market.</li>          <li>Focus on the nice or small group of people who wants the product the most.</li>          <li>Don’t try to please everyone.</li>        </ul>      </li>      <li>Make opinionated software, choose side, like every great companies (Apple, Google, Nitendo).</li>    </ul>  </li>  <li>Feature selection.    <ul>      <li>What is the heart of the app?        <ul>          <li>Forget milestone, TODO lists.</li>          <li>Just focus on the essential.</li>          <li>Let it gain traction. Then add to that foundation.</li>        </ul>      </li>      <li>Focus on what matters, REALLY. Cut off everything else.</li>      <li>Learn to say no because you have to do that a lot.</li>      <li>For every new feature, you need to:        <ul>          <li>Say no.</li>          <li>Force the feature to provide its value.</li>          <li>If no, end. If yes, continue.</li>          <li>Sketch the UI.</li>          <li>Design the UI.</li>          <li>Code.</li>          <li>Test, tweak, repeat.</li>          <li>Document.</li>          <li>Market.</li>          <li>Revisit pricing options, term of service.</li>          <li>Launch.</li>        </ul>      </li>      <li>Build something that you can manage, organizationally, strategically, financially.</li>      <li>Don’t worry too much about feature requests. Customers will constantly remind you about that.</li>      <li>Ask customer what they don’t want too and simplify it if possible.</li>    </ul>  </li>  <li>Process.    <ul>      <li>Get something real up and running quickly: it’s OK to do less, skip details, take shortcuts.        <ul>          <li>Fail fast and learn.</li>          <li>Avoid unproductive scheduling and action faking (doing bullshit works that feel “productive” that doesn’t get you closer to launching).</li>        </ul>      </li>      <li>Idea-to-implementation cycle.        <ul>          <li>What does the app need to do? What exactly are you going to make?</li>          <li>Sketch it out on paper.</li>          <li>Create mock-up html screens.</li>          <li>Code.</li>        </ul>      </li>      <li>Allowing options/preferences for customers is not necessarily helping them.        <ul>          <li>If you make a bad call, they will complain, then you can fix it.</li>        </ul>      </li>      <li>Execute. Build momentum. Move on.</li>      <li>Test in the wild.        <ul>          <li>Get it out there. Get real results + feedback.</li>          <li>Instead of having a beta version and a release version, have beta features in side the release one so you can have real data + workflow.</li>          <li>Break it down into smaller problems and solve it one by one.</li>        </ul>      </li>    </ul>  </li>  <li>Organization.    <ul>      <li>Build a healthy organization.</li>      <li>Utilize your alone time to get work done.</li>      <li>Meetings are normally unproductive.</li>      <li>Have fewer meetings.</li>      <li>Only have it with a clear agenda.</li>      <li>Release something today. Celebrate small victories.</li>    </ul>  </li>  <li>Staffing.    <ul>      <li>Hire less, only when it’s really needed.</li>      <li>Working with prospective employees on a real project can give a lot of insights. However, not everyone has time for that.</li>      <li>Look at people codes + contribution on open-source projects.</li>      <li>Go for quick learning generalists over ingrained specialists.</li>      <li>Go for happy one.</li>      <li>Hire good writers because they know how to communicate.</li>    </ul>  </li>  <li>Interface.    <ul>      <li>Design the interface before you start coding.</li>      <li>Start from the core page and build outward. Focus on what matters.</li>      <li>For each page, consider these 3 states:        <ul>          <li>Blank: the screen before data is entered (could insert quick tutorials, help blurbs, examples with mock data,…)</li>          <li>Regular: normal page</li>          <li>Error: when shit happens</li>        </ul>      </li>      <li>It’s OK to be inconsistent if your design makes more sense that way</li>      <li>Every letter matters.        <ul>          <li>Don’t sound like an engineer talking to another engineer.</li>          <li>Keep it short and sweet.</li>        </ul>      </li>      <li>Incorporate admin function into public interfaces so you don’t need to manage 2 different versions.</li>    </ul>  </li>  <li>Code.    <ul>      <li>Keep it simple. But be mindful about technical debt.</li>      <li>Less maintenance and support work.</li>      <li>Low cost of change.</li>      <li>Fewer bugs.</li>      <li>Choose the tools that everyone is happy and productive with.</li>      <li>Get data into the world via RSS, API,…</li>    </ul>  </li>  <li>Words.    <ul>      <li>Document what is needed but nothing else.</li>      <li>Write stories, not details.        <ul>          <li>Don’t get into the technical/design details, just a quick story.</li>          <li>Treat it as a normal conversation.</li>        </ul>      </li>      <li>Use real data if possible, not dummy text all the time → focus on the UX.</li>      <li>What is your product’s personality type?</li>    </ul>  </li>  <li>Pricing and signup    <ul>      <li>Give something for free. Let  people experience and see its usefulness.</li>      <li>Make signup and cancellation easy.</li>      <li>Avoid long term contract, signup fee,…</li>    </ul>  </li>  <li>Promotion.    <ul>      <li>Teaser (dropping hints), preview, launch.</li>      <li>Build a promo site: overview, tour, screenshots, videos, manifesto, case studies, buzz (customers, press reviews,…), forum, pricing and signup, blog,…</li>      <li>Blogging can be more effective (and cheaper) than advertising. Could write about advices, tips, tricks, links,…</li>      <li>Start collecting emails asap.</li>      <li>Share your knowledge. Teaching/educating is a great way to market yourself and your product too.        <ul>          <li>Blog (as above).</li>          <li>Speak at conferences.</li>          <li>Conduct workshops.</li>          <li>Give interviews.</li>          <li>Write articles/books</li>        </ul>      </li>      <li>Track your online present. Leave comments, thank you notes, response to negative ones thoughtfully.</li>      <li>Promote upgrade, in-app purchases.</li>      <li>Pick an short, catchy, memorable name.</li>    </ul>  </li>  <li>Support.    <ul>      <li>Feel the pain yourself. Don’t outsource. Learn from it.</li>      <li>Use inline help and FAQ instead of giving manual training.</li>      <li>Just response quickly even if you don’t have a perfect answer (during business hour).</li>      <li>Also thank them for their input.</li>      <li>Be willing to say no.</li>      <li>Use forum or chat to let customers help each other.</li>      <li>Be open, honest, transparent (yeah bad news).</li>    </ul>  </li>  <li>Post launch.    <ul>      <li>Issue a major update 30 days after launch.</li>      <li>Don’t stop blogging: new FAQs, tutorials, news, features, updates, fixes, buzz/press.</li>      <li>Prioritize your bugs.</li>      <li>Wait before the storm, 1-2 days after releasing a new feature and hearing complaints, then take action.</li>      <li>Know your competitors.</li>      <li>More mature doesn’t mean more complicated, as long as you provide valuable services that’s fine.</li>      <li>Be open to new paths and changes in direction .</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://basecamp.com/books/getting-real\">https://basecamp.com/books/getting-real</a></li></ul>",
            "url": "https://hoanhan101.github.io/getting-real",
            
            
            
            "tags": ["book","productivity","business"],
            
            "date_published": "2020-03-13T00:00:00-04:00",
            "date_modified": "2020-03-13T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/object-oriented-design",
            "title": "Object Oriented Design Patterns",
            "summary": null,
            "content_text": "Facebook  Admin: add/modify members  Member: seach for other members, groups, pages, posts, as well as send friend requests, create posts  System: send notifications for new messages, friend requestsAmazon  Admin: add/modify products and users  Member: search the catalog, add/remove items to the shopping cart, options to pay  System: send notifications for orders and shipping updatesLinkedIn  Member: search for other members, companies or jobs, send requests for connection, create posts  System: send  notifications for new messages, connections invitesStack Overflow  Admin: add/modify members  Member: search/view/add/modify questions, answers, and comments  Moderator: same as member, in addition to which one can close/delete/undelete any question  System: send notifications, assign badges to membersLibrary Management System  Librarian: add/modify books and users  Member: search the catalog, check-out, reserve, renew, return books  System: send notifications for overdue books, cancel reservationsParking Lot  Admin: add/modify parking spots and attendants  Customer: have parking tickets, options to payMovie Ticket Booking  Admin: add/modify movies, tickets, customers  Customer: view movie schedules, book/cancel tickets  System: send notifications for new movies, bookings, cancellationsCard Game  Dealer: deal cards and game resolution  Player: places bets, accept/decline offered resolutionHotel Management System  Member: search the available rooms, make bookings  Receptionist: add/modify rooms, create room bookings, check-in, and check-out customers  System: send notifications for room booking, cancellation  Manager: add/modify housekeeping/service record of roomsRestaurant Management System  Receptionist: add/modify tables, layout, reservations  Waiter: take/modify orders  Manager: add/modify the menu  Chef: view/work on an order  Cashier: generate checks and process payments  System: sending notifications, table reservations, cancellationsStock Brokerage System  Admin: add/modify members  Member: search the stock inventory, buy/sell stocks  System: send notifications for stock ordersReferences:  https://www.educative.io/courses/grokking-the-object-oriented-design-interview",
            "content_html": "<h3 id=\"facebook\">Facebook</h3><ul>  <li>Admin: add/modify members</li>  <li>Member: seach for other members, groups, pages, posts, as well as send friend requests, create posts</li>  <li>System: send notifications for new messages, friend requests</li></ul><h3 id=\"amazon\">Amazon</h3><ul>  <li>Admin: add/modify products and users</li>  <li>Member: search the catalog, add/remove items to the shopping cart, options to pay</li>  <li>System: send notifications for orders and shipping updates</li></ul><h3 id=\"linkedin\">LinkedIn</h3><ul>  <li>Member: search for other members, companies or jobs, send requests for connection, create posts</li>  <li>System: send  notifications for new messages, connections invites</li></ul><h3 id=\"stack-overflow\">Stack Overflow</h3><ul>  <li>Admin: add/modify members</li>  <li>Member: search/view/add/modify questions, answers, and comments</li>  <li>Moderator: same as member, in addition to which one can close/delete/undelete any question</li>  <li>System: send notifications, assign badges to members</li></ul><h3 id=\"library-management-system\">Library Management System</h3><ul>  <li>Librarian: add/modify books and users</li>  <li>Member: search the catalog, check-out, reserve, renew, return books</li>  <li>System: send notifications for overdue books, cancel reservations</li></ul><h3 id=\"parking-lot\">Parking Lot</h3><ul>  <li>Admin: add/modify parking spots and attendants</li>  <li>Customer: have parking tickets, options to pay</li></ul><h3 id=\"movie-ticket-booking\">Movie Ticket Booking</h3><ul>  <li>Admin: add/modify movies, tickets, customers</li>  <li>Customer: view movie schedules, book/cancel tickets</li>  <li>System: send notifications for new movies, bookings, cancellations</li></ul><h3 id=\"card-game\">Card Game</h3><ul>  <li>Dealer: deal cards and game resolution</li>  <li>Player: places bets, accept/decline offered resolution</li></ul><h3 id=\"hotel-management-system\">Hotel Management System</h3><ul>  <li>Member: search the available rooms, make bookings</li>  <li>Receptionist: add/modify rooms, create room bookings, check-in, and check-out customers</li>  <li>System: send notifications for room booking, cancellation</li>  <li>Manager: add/modify housekeeping/service record of rooms</li></ul><h3 id=\"restaurant-management-system\">Restaurant Management System</h3><ul>  <li>Receptionist: add/modify tables, layout, reservations</li>  <li>Waiter: take/modify orders</li>  <li>Manager: add/modify the menu</li>  <li>Chef: view/work on an order</li>  <li>Cashier: generate checks and process payments</li>  <li>System: sending notifications, table reservations, cancellations</li></ul><h3 id=\"stock-brokerage-system\">Stock Brokerage System</h3><ul>  <li>Admin: add/modify members</li>  <li>Member: search the stock inventory, buy/sell stocks</li>  <li>System: send notifications for stock orders</li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.educative.io/courses/grokking-the-object-oriented-design-interview\">https://www.educative.io/courses/grokking-the-object-oriented-design-interview</a></li></ul>",
            "url": "https://hoanhan101.github.io/object-oriented-design",
            
            
            
            
            
            "date_published": "2020-02-10T00:00:00-05:00",
            "date_modified": "2020-02-10T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/happiness-hypothesis",
            "title": "The Happiness Hypothesis by Jonathan Haidt",
            "summary": null,
            "content_text": "  Happiness (H) = S (Biological happiness set point) + C (Life conditions) + V (Voluntary activities).          Each person has a characteristic level of happiness that each is born with.      It’s not a set point but a range.      The challenge is to understand C and V in order to push H to the top of the range.        The 2 biggest parts of C are love and pursuing the right goals.          We are social creatures in a sense that we can’t be happy without having friends and secure attachments. To love well is to have good relationships with other people.      The right goals are ones that produce states of flow and engagement.      Once basic needs are met, money cannot buy additional happiness.                  According to the adaptation principle, we’re likely to adapt to what we set for ourselves. Luxuries and other goods adapt completely while some other “purchases” are less subject to:                          Spending more time with friends and family.              Reducing commuting time even if it means living in smaller houses.              Taking longer vacations even if it means earning less.              Programming Ruby, building Basecamp, writing for Signal v Noise, taking pictures, and enjoying all the same avenues of learning and entertainment my already privileged lifestyle had afforded me for years in advance.                                            V are things that we choose to do, not that we have to, such as meditation, exercise, learning new things and so on.          We can increase our happiness if we use your strengths, particularly in the service of strengthening connections such as helping friends, expressing gratitude to benefactors.      According to the progress principle, pleasure comes more from making progress toward a goal than from achieving them. That said, we should take the initiative and perform gratifying activities regularly.      References:  https://www.goodreads.com/book/show/96884.The_Happiness_Hypothesis  https://m.signalvnoise.com/the-day-i-became-a-millionaire/",
            "content_html": "<ul>  <li>Happiness (H) = S (Biological happiness set point) + C (Life conditions) + V (Voluntary activities).    <ul>      <li>Each person has a characteristic level of happiness that each is born with.</li>      <li>It’s not a set point but a range.</li>      <li>The challenge is to understand C and V in order to push H to the top of the range.</li>    </ul>  </li>  <li>The 2 biggest parts of C are love and pursuing the right goals.    <ul>      <li>We are social creatures in a sense that we can’t be happy without having friends and secure attachments. To love well is to have good relationships with other people.</li>      <li><a href=\"https://www.goodreads.com/book/show/66354.Flow\">The right goals are ones that produce states of flow and engagement.</a></li>      <li>Once basic needs are met, money cannot buy additional happiness.        <ul>          <li>According to the adaptation principle, we’re likely to adapt to what we set for ourselves. Luxuries and other goods adapt completely while some other “purchases” are less subject to:            <ul>              <li>Spending more time with friends and family.</li>              <li>Reducing commuting time even if it means living in smaller houses.</li>              <li>Taking longer vacations even if it means earning less.</li>              <li><a href=\"https://m.signalvnoise.com/the-day-i-became-a-millionaire/\">Programming Ruby, building Basecamp, writing for Signal v Noise, taking pictures, and enjoying all the same avenues of learning and entertainment my already privileged lifestyle had afforded me for years in advance.</a></li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>V are things that we choose to do, not that we have to, such as meditation, exercise, learning new things and so on.    <ul>      <li>We can increase our happiness if we use your strengths, particularly in the service of strengthening connections such as helping friends, expressing gratitude to benefactors.</li>      <li>According to the progress principle, pleasure comes more from making progress toward a goal than from achieving them. That said, we should take the initiative and perform gratifying activities regularly.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/96884.The_Happiness_Hypothesis\">https://www.goodreads.com/book/show/96884.The_Happiness_Hypothesis</a></li>  <li><a href=\"https://m.signalvnoise.com/the-day-i-became-a-millionaire/\">https://m.signalvnoise.com/the-day-i-became-a-millionaire/</a></li></ul>",
            "url": "https://hoanhan101.github.io/happiness-hypothesis",
            
            
            
            "tags": ["book","happiness","meaning","life","wealth"],
            
            "date_published": "2020-02-10T00:00:00-05:00",
            "date_modified": "2020-02-10T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/aom-testosterone-experiment",
            "title": "Testosterone Experiment by The Art of Manliness",
            "summary": null,
            "content_text": "  How testosterone is made:          Sub-types of testosterone:                  Free: purest form with no protein attached, has the most benefits though only makes up 2-3% of our total testosterone          SHBG-bound: help regulating the amount of free testosterone, biologically inactive (our bodies can’t use this type of testosterone to help build muscles or boost our mood), makes up 40-50% of our total testosterone          Albumin-bound: stabilize extra-cellular fluid volumes, also biologically inactive though can be easily broken in order to create free testosterone when needed                    A small percentage of testosterone is made in the adrenal glands on top of our kidneys, but 95% of it is made in our testicles.        Testosterone deficiency downsides:          Men suffering from depression typically have low T level.      As the T level decreases, the body’s ability to regulate insulin decreases, causes fat to accumulate, put one at higher risk for type 2 diabetes.      Low libido and erectile dysfunction are two of the first signs of low testosterone.      Low testosterone levels to an increased risk of Alzheimer’s disease as well as the cognitive ability issues (memory loss, trouble concentrating, fogginess).        The keys to increasing testosterone level naturally are eating better, exercising smarter, and getting more sleep.          Eat more high-fat foods.                  Higher fat and cholesterol consumption results in increased levels of total T.          High protein and low carb could cause the T level to decrease.          Broccoli, cauliflower, and cabbage remove estrogens that lower our T.          Author’s diet (40% carb, 30% protein, 30% fats):                          Breakfast: three slices of bacon and three whole eggs              Lunch: salad mix: meat (the fattier the better), Brazil nuts/walnuts, avocados/olives, spinach, broccoli              Dinner: whatever though try to get as much as carb from veggie and fruit                                          If you want to take supplements, consider vitamin D3 and omega3 fish oil, though they only help a bit.      Exercise regularly.                  Strength training: Starting Strength, 5/3/1 program.          HIIT training.          Don’t overtrain (3-4 times a week is good), move more instead.                    Get better sleep.                  If you don’t have “morning wood” on a consistent basis, you might have low T.          If you’re not getting enough quality sleep, your body can’t produce testosterone as efficiently or effectively.          Try to get 8 to 9 hours of sleep consistently.                    Manage stress.                  Go for long walk.          Practice deep breathing exercise.                    Avoid xenoestrogens chemicals by using organic products.      Have more sex.      Take cold bath.      References:  https://www.artofmanliness.com/articles/testosterone-benefits/  https://www.artofmanliness.com/articles/how-testosterone-is-made/  https://www.artofmanliness.com/articles/how-to-increase-testosterone-naturally/  https://www.artofmanliness.com/articles/an-update-on-my-testosterone-boosting-experiment-7-years-later/",
            "content_html": "<ul>  <li>How testosterone is made:    <ul>      <li>Sub-types of testosterone:        <ul>          <li>Free: purest form with no protein attached, has the most benefits though only makes up 2-3% of our total testosterone</li>          <li>SHBG-bound: help regulating the amount of free testosterone, biologically inactive (our bodies can’t use this type of testosterone to help build muscles or boost our mood), makes up 40-50% of our total testosterone</li>          <li>Albumin-bound: stabilize extra-cellular fluid volumes, also biologically inactive though can be easily broken in order to create free testosterone when needed</li>        </ul>      </li>      <li>A small percentage of testosterone is made in the adrenal glands on top of our kidneys, but 95% of it is made in our testicles.</li>    </ul>  </li>  <li>Testosterone deficiency downsides:    <ul>      <li>Men suffering from depression typically have low T level.</li>      <li>As the T level decreases, the body’s ability to regulate insulin decreases, causes fat to accumulate, put one at higher risk for type 2 diabetes.</li>      <li>Low libido and erectile dysfunction are two of the first signs of low testosterone.</li>      <li>Low testosterone levels to an increased risk of Alzheimer’s disease as well as the cognitive ability issues (memory loss, trouble concentrating, fogginess).</li>    </ul>  </li>  <li>The keys to increasing testosterone level naturally are eating better, exercising smarter, and getting more sleep.    <ul>      <li>Eat more high-fat foods.        <ul>          <li>Higher fat and cholesterol consumption results in increased levels of total T.</li>          <li>High protein and low carb could cause the T level to decrease.</li>          <li>Broccoli, cauliflower, and cabbage remove estrogens that lower our T.</li>          <li>Author’s diet (40% carb, 30% protein, 30% fats):            <ul>              <li>Breakfast: three slices of bacon and three whole eggs</li>              <li>Lunch: salad mix: meat (the fattier the better), Brazil nuts/walnuts, avocados/olives, spinach, broccoli</li>              <li>Dinner: whatever though try to get as much as carb from veggie and fruit</li>            </ul>          </li>        </ul>      </li>      <li>If you want to take supplements, consider vitamin D3 and omega3 fish oil, though they only help a bit.</li>      <li>Exercise regularly.        <ul>          <li>Strength training: Starting Strength, 5/3/1 program.</li>          <li>HIIT training.</li>          <li>Don’t overtrain (3-4 times a week is good), move more instead.</li>        </ul>      </li>      <li>Get better sleep.        <ul>          <li>If you don’t have “morning wood” on a consistent basis, you might have low T.</li>          <li>If you’re not getting enough quality sleep, your body can’t produce testosterone as efficiently or effectively.</li>          <li>Try to get 8 to 9 hours of sleep consistently.</li>        </ul>      </li>      <li>Manage stress.        <ul>          <li>Go for long walk.</li>          <li>Practice deep breathing exercise.</li>        </ul>      </li>      <li>Avoid xenoestrogens chemicals by using organic products.</li>      <li>Have more sex.</li>      <li>Take cold bath.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.artofmanliness.com/articles/testosterone-benefits/\">https://www.artofmanliness.com/articles/testosterone-benefits/</a></li>  <li><a href=\"https://www.artofmanliness.com/articles/how-testosterone-is-made/\">https://www.artofmanliness.com/articles/how-testosterone-is-made/</a></li>  <li><a href=\"https://www.artofmanliness.com/articles/how-to-increase-testosterone-naturally/\">https://www.artofmanliness.com/articles/how-to-increase-testosterone-naturally/</a></li>  <li><a href=\"https://www.artofmanliness.com/articles/an-update-on-my-testosterone-boosting-experiment-7-years-later/\">https://www.artofmanliness.com/articles/an-update-on-my-testosterone-boosting-experiment-7-years-later/</a></li></ul>",
            "url": "https://hoanhan101.github.io/aom-testosterone-experiment",
            
            
            
            "tags": ["blog","health","testosterone"],
            
            "date_published": "2020-01-16T00:00:00-05:00",
            "date_modified": "2020-01-16T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/super-human",
            "title": "Super Human Dave Asprey",
            "summary": null,
            "content_text": "  Don’t die.          The 4 killers are heart disease, diabetes, Alzheimer’s, and cancer. Maintaining a healthy diet and lifestyle lowers the risk of developing and dying from these.      Food is an anti-aging drug.                  Stop eating fried, grilled meat.          Avoid grains, produce and animal products. Instead, get:                          Organic vegetables.              Organic fruits.              Meat from pastured animals, eggs, wild fish.                                Eat enough protein for tissue repair - 0.5 gram per pound of body weight.                          Excess protein causes imflamation.                                Eat the right ratios of fat.                          50% saturated - fatty meat, lard, butter, cream, cocounuts)              25% monosaturated (olive oil, avocados, nuts)              15-20% undamaged omega-6              5-10% omega-3 (including EPA, DHA)                                Limit eating window to 8-10 hours a day.          Teach your metabolism to be flexible by practicing a ketogenic diet.                          Fasting (to clean out damaged cells, regenerate healthier cells).              Avoid carbs for a few days.              Add energy fats to your food (coffee).                                Consume more antioxidants to fight of free radicals.                          Berries.              Herbs.              Spices.              Coffee.              Tea.              Dark chocolate.                                          Manage stress.                  Mediate.          Practice yoga.          Get quality sleep.                    Aim for 15-20 minutes of natural sun exposure a day.      Supplement &amp; treatment.                  If you have joint pain or blood sugar issues, consider taking glucosamine because it helps.                          Control blood sugar.              Extends the life-span of mice (probably human too).                                Vitamin D.          Try Zona Plus to help with cardiovascular issues.                      Age backward.          Stop eating sugar, soy, excess omega-6 fats, refined carbs.                  Replace with saturated fat from grass-fed meat, pastured eggs, energy fats.                    Exercise intensely 3 times a week to boost testosterone levels.                  HIIT is real effective.          Make sure to recover fully in between sessions.          Get plenty of quality sleep.                    Consider taking L-tyrosine, vitamin D3, K2, A and zinc to achive healthy hormone levels.      Clean up your diet and your mouth.                  Eliminate sugar.          Try oil pulling.          Brush occasionally with activated charcoal.                    Up your intake of prebiotic fiber.        Heal like a deity.          Spend more time in nature to enhance your immune system.      Make sure your sexual function is that of a young person.                  Consider GAINSWave treatments.          Practice Kegel on a daily basis.                    References:  https://www.goodreads.com/en/book/show/43801612",
            "content_html": "<ul>  <li>Don’t die.    <ul>      <li>The 4 killers are heart disease, diabetes, Alzheimer’s, and cancer. Maintaining a healthy diet and lifestyle lowers the risk of developing and dying from these.</li>      <li>Food is an anti-aging drug.        <ul>          <li>Stop eating fried, grilled meat.</li>          <li>Avoid grains, produce and animal products. Instead, get:            <ul>              <li>Organic vegetables.</li>              <li>Organic fruits.</li>              <li>Meat from pastured animals, eggs, wild fish.</li>            </ul>          </li>          <li>Eat enough protein for tissue repair - 0.5 gram per pound of body weight.            <ul>              <li>Excess protein causes imflamation.</li>            </ul>          </li>          <li>Eat the right ratios of fat.            <ul>              <li>50% saturated - fatty meat, lard, butter, cream, cocounuts)</li>              <li>25% monosaturated (olive oil, avocados, nuts)</li>              <li>15-20% undamaged omega-6</li>              <li>5-10% omega-3 (including EPA, DHA)</li>            </ul>          </li>          <li>Limit eating window to 8-10 hours a day.</li>          <li>Teach your metabolism to be flexible by practicing a ketogenic diet.            <ul>              <li>Fasting (to clean out damaged cells, regenerate healthier cells).</li>              <li>Avoid carbs for a few days.</li>              <li>Add energy fats to your food (coffee).</li>            </ul>          </li>          <li>Consume more antioxidants to fight of free radicals.            <ul>              <li>Berries.</li>              <li>Herbs.</li>              <li>Spices.</li>              <li>Coffee.</li>              <li>Tea.</li>              <li>Dark chocolate.</li>            </ul>          </li>        </ul>      </li>      <li>Manage stress.        <ul>          <li>Mediate.</li>          <li>Practice yoga.</li>          <li>Get quality sleep.</li>        </ul>      </li>      <li>Aim for 15-20 minutes of natural sun exposure a day.</li>      <li>Supplement &amp; treatment.        <ul>          <li>If you have joint pain or blood sugar issues, consider taking glucosamine because it helps.            <ul>              <li>Control blood sugar.</li>              <li>Extends the life-span of mice (probably human too).</li>            </ul>          </li>          <li>Vitamin D.</li>          <li>Try Zona Plus to help with cardiovascular issues.</li>        </ul>      </li>    </ul>  </li>  <li>Age backward.    <ul>      <li>Stop eating sugar, soy, excess omega-6 fats, refined carbs.        <ul>          <li>Replace with saturated fat from grass-fed meat, pastured eggs, energy fats.</li>        </ul>      </li>      <li>Exercise intensely 3 times a week to boost testosterone levels.        <ul>          <li>HIIT is real effective.</li>          <li>Make sure to recover fully in between sessions.</li>          <li>Get plenty of quality sleep.</li>        </ul>      </li>      <li>Consider taking L-tyrosine, vitamin D3, K2, A and zinc to achive healthy hormone levels.</li>      <li>Clean up your diet and your mouth.        <ul>          <li>Eliminate sugar.</li>          <li>Try oil pulling.</li>          <li>Brush occasionally with activated charcoal.</li>        </ul>      </li>      <li>Up your intake of prebiotic fiber.</li>    </ul>  </li>  <li>Heal like a deity.    <ul>      <li>Spend more time in nature to enhance your immune system.</li>      <li>Make sure your sexual function is that of a young person.        <ul>          <li>Consider GAINSWave treatments.</li>          <li>Practice Kegel on a daily basis.</li>        </ul>      </li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/en/book/show/43801612\">https://www.goodreads.com/en/book/show/43801612</a></li></ul>",
            "url": "https://hoanhan101.github.io/super-human",
            
            
            
            "tags": ["book","health","biohacking","diabetes"],
            
            "date_published": "2020-01-15T00:00:00-05:00",
            "date_modified": "2020-01-15T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/passivity-mediocrity-mental-illness",
            "title": "Why Passivity Breeds Mediocrity and Mental Illness",
            "summary": null,
            "content_text": "Most people spend their time passively consuming.  “Most people are, in the most ordinary sense, very limited. They pass theirtime, day after day, in idle, passive pursuits, just looking at things – atgames, television, whatever. Or they fill the hours talking, mostly aboutnothing of significance – of comings and goings, of who is doing what, of theweather, of things forgotten almost as soon as they are mentioned. They haveno aspirations for themselves beyond getting through another day doing moreor less what they did yesterday. They walk across the stage of life, leavingeverything about as it was when they entered, achieving nothing, aspiring tonothing, having never a profound or even original thought…This is what iscommon, usual, typical, indeed normal. Relatively few rise above such aplodding existence.” (Richard Taylor, Restoring Pride)According to Colin Wilson, too much inactivity, rather than promoting mental health, tends to breed unhappiness and a plethora of psychological problems.  “When he did not occupy his days with interesting tasks, challenges, andproblems to solve, he discovered that depressive moods would soon wash overhim, fog his perceptions, and cause him to become a pessimist of the humancondition.”Even though Wilson’s situation is not applicable to all, the struggle to cultivatean uncommon virtue or skill, produce work of exceptional worth, do something trulyoriginal and do it well is always worth the effort.  “Some people, no doubt, are born, and destined, to be common, to live outtheir lives to no significant purpose, but that is relatively rare…Mostpeople have the power to be creative, and some have it in a god-likedegree…But many people – perhaps even most – are content with the passingpleasures and satisfactions of the animal side of our nature. Indeed, manypeople will account their lives to be successful if they get through themwith only minimal pain, with pleasant divergence from moment to moment andday-to-day, and the general approval of those around them. And this,notwithstanding that they often have within them the ability to do somethingwhich perhaps no other human being has ever done. Merely to do what othershave done is often safe, and comfortable; but to do something truly original,and do it well, whether it is appreciated by others or not – that is whatbeing human is really all about, and it is alone what justifies the self-lovethat is pride.” (Richard Taylor, Restoring Pride)References:  https://academyofideas.com/2018/09/passivity-mediocrity-mental-illness/",
            "content_html": "<p>Most people spend their time passively consuming.</p><blockquote>  <p>“Most people are, in the most ordinary sense, very limited. They pass theirtime, day after day, in idle, passive pursuits, just looking at things – atgames, television, whatever. Or they fill the hours talking, mostly aboutnothing of significance – of comings and goings, of who is doing what, of theweather, of things forgotten almost as soon as they are mentioned. They haveno aspirations for themselves beyond getting through another day doing moreor less what they did yesterday. They walk across the stage of life, leavingeverything about as it was when they entered, achieving nothing, aspiring tonothing, having never a profound or even original thought…This is what iscommon, usual, typical, indeed normal. Relatively few rise above such aplodding existence.” (Richard Taylor, Restoring Pride)</p></blockquote><p>According to Colin Wilson, too much inactivity, rather than promoting mental health, tends to breed unhappiness and a plethora of psychological problems.</p><blockquote>  <p>“When he did not occupy his days with interesting tasks, challenges, andproblems to solve, he discovered that depressive moods would soon wash overhim, fog his perceptions, and cause him to become a pessimist of the humancondition.”</p></blockquote><p>Even though Wilson’s situation is not applicable to all, the struggle to cultivatean uncommon virtue or skill, produce work of exceptional worth, do something trulyoriginal and do it well is always worth the effort.</p><blockquote>  <p>“Some people, no doubt, are born, and destined, to be common, to live outtheir lives to no significant purpose, but that is relatively rare…Mostpeople have the power to be creative, and some have it in a god-likedegree…But many people – perhaps even most – are content with the passingpleasures and satisfactions of the animal side of our nature. Indeed, manypeople will account their lives to be successful if they get through themwith only minimal pain, with pleasant divergence from moment to moment andday-to-day, and the general approval of those around them. And this,notwithstanding that they often have within them the ability to do somethingwhich perhaps no other human being has ever done. Merely to do what othershave done is often safe, and comfortable; but to do something truly original,and do it well, whether it is appreciated by others or not – that is whatbeing human is really all about, and it is alone what justifies the self-lovethat is pride.” (Richard Taylor, Restoring Pride)</p></blockquote><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://academyofideas.com/2018/09/passivity-mediocrity-mental-illness/\">https://academyofideas.com/2018/09/passivity-mediocrity-mental-illness/</a></li></ul>",
            "url": "https://hoanhan101.github.io/passivity-mediocrity-mental-illness",
            
            
            
            "tags": ["blog","passivity","mediocrity","health"],
            
            "date_published": "2020-01-10T00:00:00-05:00",
            "date_modified": "2020-01-10T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/101-challenges",
            "title": "101+ Coding Interview Problems with Detailed Solutions, Test Cases, and Program Analysis",
            "summary": null,
            "content_text": "Hi friends,4 months ago, I made a redditposton creating a newsletter that sends out 3-6 coding interview problems with detailssolutions every week. To my surprise, the post received a lot of attention andpositive feedback from the community.Since the total number of problems and solutions has just passed 101, I wouldlike to say another big thank you all again for all the support. It reallyhelps me keep going.Moving on, I am hoping to add more questions and then finally condense them into a list ofmost frequently appeared coding interview problems that I think are the mostvaluable and productive to spend time on. Again, my goal has always been tohelp you get good at algorithms and data structures so that you can prepare betterfor your next coding interviews.For those who don’t know, here is the link to all 101+ questions and solutions, sorted byresources →Best,Hoanh",
            "content_html": "<p>Hi friends,</p><p>4 months ago, I made a <a href=\"https://www.reddit.com/r/learnprogramming/comments/ctyvbc/is_anyone_interested_in_weekly_coding_interview/\">redditpost</a>on creating a newsletter that sends out 3-6 coding interview problems with detailssolutions every week. To my surprise, the post received a lot of attention andpositive feedback from the community.</p><p><strong>Since the total number of problems and solutions has just passed 101, I wouldlike to say another big thank you all again for all the support. It reallyhelps me keep going.</strong></p><p>Moving on, I am hoping to add more questions and then finally condense them into a list ofmost frequently appeared coding interview problems that I think are the mostvaluable and productive to spend time on. Again, my goal has always been tohelp you get good at algorithms and data structures so that you can prepare betterfor your next coding interviews.</p><p>For those who don’t know, <a href=\"https://github.com/hoanhan101/algo\">here is the link to all 101+ questions and solutions, sorted byresources →</a></p><p>Best,</p><p>Hoanh</p>",
            "url": "https://hoanhan101.github.io/101-challenges",
            
            
            
            "tags": ["interviewcake","grokking-the-coding-interview","leetcode","cracking-the-coding-interviews","algorithm"],
            
            "date_published": "2020-01-06T00:00:00-05:00",
            "date_modified": "2020-01-06T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/gtci-tree-bfs",
            "title": "Grokking the Coding Interview's Tree Breath First Search",
            "summary": null,
            "content_text": "1. Given a binary tree, populate the values of all nodes of each level from left to right in separate sub-arrays.Example:- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{1}, []interface{}{2, 3}, []interface{}{4, 5}}Approach:- Start by pushing the root node to the queue.- Keep iterating until the queue is empty.- At each step,  - send the front of the queue and dequeue it  - enqueue its left and right childCost:- O(n) time, O(n) space.Link to solution →2. Given a binary tree, populate the values of all nodes of each level in reverse order in separate sub-arrays.Example:- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{4, 5}, []interface{}{2, 3}, []interface{}{1}}Approach:- Similar to level order reversal problem, except we append the current level's  value at the beginning of the output list.Cost:- O(n) time, O(n) space.Link to solution →3. Given a binary tree, populate the values of all nodes of each level in a zigzag order in separate sub-arrays.Example:- Input:      1\t2   3  4       5  Output: [][]interface{}{[]interface{}{1}, []interface{}{3, 2}, []interface{}{4, 5}}Approach:- Start by pushing the root node to a queue.- Keep iterating until the queue is empty.- At each step,  - use a linked list to push front or back depending on the zigzag direction  - enqueue its left and right childCost:- O(n) time, O(n) space.Link to solution →4. Given a binary tree, populate an array to represent the averages of all of its levels.Example:- Input:      1\t2   3  4       5  Output: []float64{1, 2.5, 4.5}Approach:- Similar to level order traversal problem, except we keep track of the sum  at each level and return the average in the end.Cost:- O(n) time, O(n) space.Link to solution →5. Given a binary tree, find the minimum depth, aka the number of nodes along the shortest path from the root node to the nearest leaf node.Example:- Input:      1\t2   3  4       5        6   7      8  Output: 3Approach:- Similar to level order traversal problem, except we keep track of the minimum  depth at each level- Return it immediately once we find the leaf node.Cost:- O(n) time, O(n) space.Link to solution →6. Given a binary tree, find the maximum depth.Example:- Input:      1\t2   3  4       5        6   7      8  Output: 5Approach:- Similar to minimum depth problem, we will keep traversing for all  levels, incrementing our maximum depth instead of returning as  soon as we find a leaf node.Cost:- O(n) time, O(n) space.Link to solution →7. Given a binary tree and a node, find the level order successor of the given node. The level order successor is the node that appears right after the given node in the level order traversal.Example:- Input: target=6, tree=      1\t2   3  4       5        6   7      8  Output: 6Approach:- Similar to level order traversal problem, except we will not keep  track of all the levels.- Instead, we keep inserting the child node to the queue and return  the next node as soon as we find the target.Cost:- O(n) time, O(n) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.",
            "content_html": "<h3 id=\"1-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-from-left-to-right-in-separate-sub-arrays\">1. Given a binary tree, populate the values of all nodes of each level from left to right in separate sub-arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{1}, []interface{}{2, 3}, []interface{}{4, 5}}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Start by pushing the root node to the queue.- Keep iterating until the queue is empty.- At each step,  - send the front of the queue and dequeue it  - enqueue its left and right child</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/level_order_traversal_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-in-reverse-order-in-separate-sub-arrays\">2. Given a binary tree, populate the values of all nodes of each level in reverse order in separate sub-arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{4, 5}, []interface{}{2, 3}, []interface{}{1}}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order reversal problem, except we append the current level's  value at the beginning of the output list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/reverse_level_order_traversal_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-in-a-zigzag-order-in-separate-sub-arrays\">3. Given a binary tree, populate the values of all nodes of each level in a zigzag order in separate sub-arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: [][]interface{}{[]interface{}{1}, []interface{}{3, 2}, []interface{}{4, 5}}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Start by pushing the root node to a queue.- Keep iterating until the queue is empty.- At each step,  - use a linked list to push front or back depending on the zigzag direction  - enqueue its left and right child</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/zigzag_traversal_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-binary-tree-populate-an-array-to-represent-the-averages-of-all-of-its-levels\">4. Given a binary tree, populate an array to represent the averages of all of its levels.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: []float64{1, 2.5, 4.5}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order traversal problem, except we keep track of the sum  at each level and return the average in the end.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/level_avg_test.go\">Link to solution →</a></p><h3 id=\"5-given-a-binary-tree-find-the-minimum-depth-aka-the-number-of-nodes-along-the-shortest-path-from-the-root-node-to-the-nearest-leaf-node\">5. Given a binary tree, find the minimum depth, aka the number of nodes along the shortest path from the root node to the nearest leaf node.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5        6   7      8  Output: 3</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order traversal problem, except we keep track of the minimum  depth at each level- Return it immediately once we find the leaf node.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/min_depth_test.go\">Link to solution →</a></p><h3 id=\"6-given-a-binary-tree-find-the-maximum-depth\">6. Given a binary tree, find the maximum depth.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5        6   7      8  Output: 5</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to minimum depth problem, we will keep traversing for all  levels, incrementing our maximum depth instead of returning as  soon as we find a leaf node.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/max_depth_test.go\">Link to solution →</a></p><h3 id=\"7-given-a-binary-tree-and-a-node-find-the-level-order-successor-of-the-given-node-the-level-order-successor-is-the-node-that-appears-right-after-the-given-node-in-the-level-order-traversal\">7. Given a binary tree and a node, find the level order successor of the given node. The level order successor is the node that appears right after the given node in the level order traversal.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: target=6, tree=      1\t2   3  4       5        6   7      8  Output: 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order traversal problem, except we will not keep  track of all the levels.- Instead, we keep inserting the child node to the queue and return  the next node as soon as we find the target.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/level_order_successor_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote>",
            "url": "https://hoanhan101.github.io/gtci-tree-bfs",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-24T00:00:00-05:00",
            "date_modified": "2019-12-24T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/gtci-cyclic-sort",
            "title": "Grokking the Coding Interview's Cyclic Sort",
            "summary": null,
            "content_text": "1. Cyclic sortGiven an array containing n objects where each object, when created,was assigned a unique number from 1 to n based on their creation sequence.This means that the object with sequence number 3 was created just beforethe object with sequence number 4.Write a function to sort the objects in-place on their creation sequencenumber in O(n) and without any extra space.Example:- Input: []int{6, 3, 5, 2, 4, 1}  Output: []int{1, 2, 3, 4, 5, 6}Approach:- Use the fact that we are given a range of 1-n, can try placing each number at  its correct index in the array, say 1 at 0, 2 at 1, 3 at 2 and so on.- Iterate through the array and if the current number is not at the correct index,  swap it with the number at its correct index.Cost:- O(n) time, O(1) space.Link to solution →2. Given an array containing n numbers taken from the range 1 to n. It can have duplicates. Find all those missing numbers.Example:- Input: []int{2, 3, 1, 8, 2, 3, 5, 1}  Output: []int{4, 6, 7}Approach:- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the missing ones.Cost:- O(n) time and O(1) space.Link to solution →3. Given an array containing n distinct numbers taken from the range 0 to n. Since the array has only n numbers out of the total n+1 numbers, find the missing number.Example:- Input: []int{4, 0, 3, 1}  Output: 2Approach:- Sort the array using the cyclic sort first.- The one that does not have the correct index is the missing one.Cost:- O(n) time, O(1) space.Link to solution →4. Given an array containing n+1 numbers taken from the range 1 to n. It has only one duplicate number but can be repeated over time. Find that one.Example:- Input: []int{1, 4, 4, 3, 2}  Output: 4Approach:- Similar to missing number problem, can place each number on its correct  index.- If while swapping the number with its index both the numbers being swapped  are same, we have found the duplicate.Cost:- O(n) time, O(1) space.Link to solution →5. Given an array containing n numbers taken from the range 1 to n. It can have some duplicates. Find all those numbers.Example:- Input: []int{5, 4, 7, 2, 3, 5, 3}  Output: []int{3, 5}Approach:- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the duplicate ones.Cost:- O(n) time, O(1) space.Link to solution →6. Given an array containing n+1 numbers taken from the range 1 to n. One of the numbers got duplicated which also resulted in one number going missing. Find these numbers.Example:- Input: []int{3, 1, 2, 5, 2}  Output: []int{2, 4}Approach:- Similar to finding duplicates problem, can place each number on its correct  index.- The one is not at its correct index is the duplicate and its index itself  is the missing number.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.",
            "content_html": "<h3 id=\"1-cyclic-sort\">1. Cyclic sort</h3><p>Given an array containing n objects where each object, when created,was assigned a unique number from 1 to n based on their creation sequence.This means that the object with sequence number 3 was created just beforethe object with sequence number 4.</p><p>Write a function to sort the objects in-place on their creation sequencenumber in O(n) and without any extra space.</p><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{6, 3, 5, 2, 4, 1}  Output: []int{1, 2, 3, 4, 5, 6}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use the fact that we are given a range of 1-n, can try placing each number at  its correct index in the array, say 1 at 0, 2 at 1, 3 at 2 and so on.- Iterate through the array and if the current number is not at the correct index,  swap it with the number at its correct index.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/cyclic_sort_test.go\">Link to solution →</a></p><h3 id=\"2-given-an-array-containing-n-numbers-taken-from-the-range-1-to-n-it-can-have-duplicates-find-all-those-missing-numbers\">2. Given an array containing n numbers taken from the range 1 to n. It can have duplicates. Find all those missing numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{2, 3, 1, 8, 2, 3, 5, 1}  Output: []int{4, 6, 7}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the missing ones.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/missing_number_test.go\">Link to solution →</a></p><h3 id=\"3-given-an-array-containing-n-distinct-numbers-taken-from-the-range-0-to-n-since-the-array-has-only-n-numbers-out-of-the-total-n1-numbers-find-the-missing-number\">3. Given an array containing n distinct numbers taken from the range 0 to n. Since the array has only n numbers out of the total n+1 numbers, find the missing number.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{4, 0, 3, 1}  Output: 2</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Sort the array using the cyclic sort first.- The one that does not have the correct index is the missing one.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/missing_numbers_test.go\">Link to solution →</a></p><h3 id=\"4-given-an-array-containing-n1-numbers-taken-from-the-range-1-to-n-it-has-only-one-duplicate-number-but-can-be-repeated-over-time-find-that-one\">4. Given an array containing n+1 numbers taken from the range 1 to n. It has only one duplicate number but can be repeated over time. Find that one.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 4, 4, 3, 2}  Output: 4</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to missing number problem, can place each number on its correct  index.- If while swapping the number with its index both the numbers being swapped  are same, we have found the duplicate.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/duplicate_test.go\">Link to solution →</a></p><h3 id=\"5-given-an-array-containing-n-numbers-taken-from-the-range-1-to-n-it-can-have-some-duplicates-find-all-those-numbers\">5. Given an array containing n numbers taken from the range 1 to n. It can have some duplicates. Find all those numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{5, 4, 7, 2, 3, 5, 3}  Output: []int{3, 5}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the duplicate ones.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/duplicates_test.go\">Link to solution →</a></p><h3 id=\"6-given-an-array-containing-n1-numbers-taken-from-the-range-1-to-n-one-of-the-numbers-got-duplicated-which-also-resulted-in-one-number-going-missing-find-these-numbers\">6. Given an array containing n+1 numbers taken from the range 1 to n. One of the numbers got duplicated which also resulted in one number going missing. Find these numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{3, 1, 2, 5, 2}  Output: []int{2, 4}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to finding duplicates problem, can place each number on its correct  index.- The one is not at its correct index is the duplicate and its index itself  is the missing number.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/corrupt_pair_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote>",
            "url": "https://hoanhan101.github.io/gtci-cyclic-sort",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-22T00:00:00-05:00",
            "date_modified": "2019-12-22T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/gtci-merge-intervals",
            "title": "Grokking the Coding Interview's Merge Intervals",
            "summary": null,
            "content_text": "1. Given a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.Example:- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: []interval{ {1, 3}, {4, 5} }- Input: []interval{ {1, 5}, {2, 3} }  Output: []interval{ {1, 5} }Approach:- Sort the list in ascending order so that intervals that might need to be  merged are next to each other.- Can merge two intervals together if the first one's end time is greater or  or equal than the second one's start time.Cost:- O(nlogn) time, O(n) space.- Because we sort all intervals first, the runtime is O(nlogn). We create a new  list of merged interval times, so the space cost is O(n).Link to solution →2. Given a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all necessary intervals to produce a list that has only mutually exclusive intervals.Example:- Input: []interval{ {1, 3}, {5, 7}, {8, 12} }, interval{4, 6}  Output: []interval{ {1, 3}, {4, 7}, {8, 12} }Approach:- Since the list is sorted, can skip all the intervals where their end time is  less than the new interval's start time.- The merging process is similar to the one in merge interval problem.Cost:- O(n) time, O(n) space.Link to solution →3. Given two sorted lists of intervals, find the intersection between them.Example:- Input: []interval{ {1, 3}, {5, 6}, {7, 9} }, []interval{ {2, 3}, {5, 7} }  Output: []interval{ {2, 3}, {5, 6}, {7, 7} }Approach:- Iterate through both list at the same time and check if two intervals  are overlapping at each step.- Opposite to the merging process, an overlapped interval has:  - a bigger start between the two intervals  - a smaller end between the two intervalsCost:- O(n) time, O(n) space.Link to solution →4. Given a list of intervals, check if any of them is conflicting.Example:- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: false- Input: []interval{ {1, 5}, {2, 3} }  Output: trueApproach:- Similar to merge intervals problem, need to return the true  immediately if any of them is conflicting.Cost:- O(nlogn) time, O(n) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.",
            "content_html": "<h3 id=\"1-given-a-list-of-intervals-merge-all-the-overlapping-intervals-to-produce-a-list-that-has-only-mutually-exclusive-intervals\">1. Given a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: []interval{ {1, 3}, {4, 5} }- Input: []interval{ {1, 5}, {2, 3} }  Output: []interval{ {1, 5} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Sort the list in ascending order so that intervals that might need to be  merged are next to each other.- Can merge two intervals together if the first one's end time is greater or  or equal than the second one's start time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(nlogn) time, O(n) space.- Because we sort all intervals first, the runtime is O(nlogn). We create a new  list of merged interval times, so the space cost is O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/merge_intervals_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-list-of-non-overlapping-intervals-sorted-by-their-start-time-insert-a-given-interval-at-the-correct-position-and-merge-all-necessary-intervals-to-produce-a-list-that-has-only-mutually-exclusive-intervals\">2. Given a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all necessary intervals to produce a list that has only mutually exclusive intervals.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 3}, {5, 7}, {8, 12} }, interval{4, 6}  Output: []interval{ {1, 3}, {4, 7}, {8, 12} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since the list is sorted, can skip all the intervals where their end time is  less than the new interval's start time.- The merging process is similar to the one in merge interval problem.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/insert_interval_test.go\">Link to solution →</a></p><h3 id=\"3-given-two-sorted-lists-of-intervals-find-the-intersection-between-them\">3. Given two sorted lists of intervals, find the intersection between them.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 3}, {5, 6}, {7, 9} }, []interval{ {2, 3}, {5, 7} }  Output: []interval{ {2, 3}, {5, 6}, {7, 7} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through both list at the same time and check if two intervals  are overlapping at each step.- Opposite to the merging process, an overlapped interval has:  - a bigger start between the two intervals  - a smaller end between the two intervals</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/intervals_intersection_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-list-of-intervals-check-if-any-of-them-is-conflicting\">4. Given a list of intervals, check if any of them is conflicting.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: false- Input: []interval{ {1, 5}, {2, 3} }  Output: true</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to merge intervals problem, need to return the true  immediately if any of them is conflicting.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(nlogn) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/conflict_appointment_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote>",
            "url": "https://hoanhan101.github.io/gtci-merge-intervals",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-20T00:00:00-05:00",
            "date_modified": "2019-12-20T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/gtci-fast-slow-pointers",
            "title": "Grokking the Coding Interview's Fast and Slow Pointers",
            "summary": null,
            "content_text": "1. Given the head of a singly linked list, write a function to determine if it contains a cycle.Approach:- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- If the linked list has a cycle, the fast pointer will catch the slow one.Cost:- O(n) time, O(1) space.Link to solution →2. Given the head of a singly linked list, write a function to find the starting node of the cycle.Approach:- Similar to finding a cycle in a linked list problem, can also determine  the start of its cycle and calculate length k of the cycle.- Have one pointer at the beginning and one at kth node of the linked list.- Move both of them until they meet at the start.of the cycle.Cost:- O(n) time and O(1) space.Link to solution →3. Write an algorithm to determine if a number is happy.Any number will be called a happy number if, after repeatedly replacingit with a number equal to the sum of the square of all of its digits,leads us to 1.Example:- Input: 19  Output: true  Explanation:\t  1^2 + 9^2 = 82\t  8^2 + 2^2 = 68\t  6^2 + 8^2 = 100\t  1^2 + 0^2 + 0^2 = 1Approach:- Since the process always end in a cycle, we can use a similar approach to  finding a cycle in linked list problem.- Once is cycle is found, check if it is stuck on 1.Cost:- O(n) time, O(1) space.Link to solution →4. Given the head of a singly linked list, write a function to return the middle value.Approach:- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- Once the fast one reaches the end, the slow is in the middle.Cost:- O(n) time, O(1) space.Link to solution →5. Given the head of a singly linked list, write a function to determine if it is a palindrome in constant space.Approach:- Find the middle of the linked list and reverse a half list- After comparing the first half with the reversed half to check if it's  a palindrome, revert to the half to original form.Cost:- O(n) time, O(1) space.Link to solution →6. Given the head of a singly linked list, write a function to reorder it such that nodes from the second half are inserted alternately to the nodes from the first half in reverse order.Approach:- Similar to palindrome linked list problem, can also use a trick to  reverse the second half and rearrange them in the required order  using fast and slow pointers.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.",
            "content_html": "<h3 id=\"1-given-the-head-of-a-singly-linked-list-write-a-function-to-determine-if-it-contains-a-cycle\">1. Given the head of a singly linked list, write a function to determine if it contains a cycle.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- If the linked list has a cycle, the fast pointer will catch the slow one.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/linked_list_cycle_test.go\">Link to solution →</a></p><h3 id=\"2-given-the-head-of-a-singly-linked-list-write-a-function-to-find-the-starting-node-of-the-cycle\">2. Given the head of a singly linked list, write a function to find the starting node of the cycle.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to finding a cycle in a linked list problem, can also determine  the start of its cycle and calculate length k of the cycle.- Have one pointer at the beginning and one at kth node of the linked list.- Move both of them until they meet at the start.of the cycle.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/cycle_start_test.go\">Link to solution →</a></p><h3 id=\"3-write-an-algorithm-to-determine-if-a-number-is-happy\">3. Write an algorithm to determine if a number is happy.</h3><p>Any number will be called a happy number if, after repeatedly replacingit with a number equal to the sum of the square of all of its digits,leads us to 1.</p><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 19  Output: true  Explanation:\t  1^2 + 9^2 = 82\t  8^2 + 2^2 = 68\t  6^2 + 8^2 = 100\t  1^2 + 0^2 + 0^2 = 1</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since the process always end in a cycle, we can use a similar approach to  finding a cycle in linked list problem.- Once is cycle is found, check if it is stuck on 1.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/happy_number_test.go\">Link to solution →</a></p><h3 id=\"4-given-the-head-of-a-singly-linked-list-write-a-function-to-return-the-middle-value\">4. Given the head of a singly linked list, write a function to return the middle value.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- Once the fast one reaches the end, the slow is in the middle.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/middle_list_test.go\">Link to solution →</a></p><h3 id=\"5-given-the-head-of-a-singly-linked-list-write-a-function-to-determine-if-it-is-a-palindrome-in-constant-space\">5. Given the head of a singly linked list, write a function to determine if it is a palindrome in constant space.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Find the middle of the linked list and reverse a half list- After comparing the first half with the reversed half to check if it's  a palindrome, revert to the half to original form.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/palindrome_list_test.go\">Link to solution →</a></p><h3 id=\"6-given-the-head-of-a-singly-linked-list-write-a-function-to-reorder-it-such-that-nodes-from-the-second-half-are-inserted-alternately-to-the-nodes-from-the-first-half-in-reverse-order\">6. Given the head of a singly linked list, write a function to reorder it such that nodes from the second half are inserted alternately to the nodes from the first half in reverse order.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to palindrome linked list problem, can also use a trick to  reverse the second half and rearrange them in the required order  using fast and slow pointers.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/reorder_list_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote>",
            "url": "https://hoanhan101.github.io/gtci-fast-slow-pointers",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-18T00:00:00-05:00",
            "date_modified": "2019-12-18T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/gtci-two-pointers",
            "title": "Grokking the Coding Interview's Two Pointers",
            "summary": null,
            "content_text": "1. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.Example:- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14Approach:- Have one pointer start at the beginning and one at the end of the array.- At each step, see if the two pointers add up to the target sum and move  them toward each other accordingly.Cost:- O(n) time, O(n) space.Link to solution →2. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.Example:- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14Approach:- Have one pointer iterate the array and one placing non-duplicate number.Cost:- O(n) time, O(1) space.Link to solution →3. Given a sorted array, create a new array containing squares of all the number of the input array in the sorted order.Assumption:- The input can have negative numbers.Example:- Input: []int{-2, -1, 0, 1, 2}  Output: []int{0, 1, 1, 4, 4}Approach:- The difficult part is to generate the output array with squares in sorted order because we have negative numbers and their squares are positive.- Have one pointer start at the beginning and one at the end and let them  move toward each other.- At each step, whichever bigger will be added to the output array, from  right to left.Cost:- O(n) time, O(n) space.Link to solution →4. Given an array containing 0s, 1s and 2s, sort the array in-place.Example:- Input: []int{1, 0, 2, 1, 0}  Output: []int{0, 0, 1, 1, 2}Approach:- Have one pointer start at the beginning and the other at the end  while iterating through the array.- We will move all 0s before that start pointer and 2s after the end  pointer so that all 1s would be between in the end.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.",
            "content_html": "<h3 id=\"1-given-an-array-of-sorted-numbers-and-a-target-sum-find-a-pair-in-the-array-whose-sum-is-equal-to-the-given-target\">1. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have one pointer start at the beginning and one at the end of the array.- At each step, see if the two pointers add up to the target sum and move  them toward each other accordingly.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/pair_target_sum_test.go\">Link to solution →</a></p><h3 id=\"2-given-an-array-of-sorted-numbers-and-a-target-sum-find-a-pair-in-the-array-whose-sum-is-equal-to-the-given-target\">2. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have one pointer iterate the array and one placing non-duplicate number.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/remove_duplicates_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-sorted-array-create-a-new-array-containing-squares-of-all-the-number-of-the-input-array-in-the-sorted-order\">3. Given a sorted array, create a new array containing squares of all the number of the input array in the sorted order.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The input can have negative numbers.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{-2, -1, 0, 1, 2}  Output: []int{0, 1, 1, 4, 4}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The difficult part is to generate the output array with squares in sorted order because we have negative numbers and their squares are positive.- Have one pointer start at the beginning and one at the end and let them  move toward each other.- At each step, whichever bigger will be added to the output array, from  right to left.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/square_sorted_array_test.go\">Link to solution →</a></p><h3 id=\"4-given-an-array-containing-0s-1s-and-2s-sort-the-array-in-place\">4. Given an array containing 0s, 1s and 2s, sort the array in-place.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 0, 2, 1, 0}  Output: []int{0, 0, 1, 1, 2}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have one pointer start at the beginning and the other at the end  while iterating through the array.- We will move all 0s before that start pointer and 2s after the end  pointer so that all 1s would be between in the end.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/dutch_flag_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote>",
            "url": "https://hoanhan101.github.io/gtci-two-pointers",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-16T00:00:00-05:00",
            "date_modified": "2019-12-16T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/gtci-sliding-window",
            "title": "Grokking the Coding Interview's Sliding Window",
            "summary": null,
            "content_text": "1. Given an array, find the average of all contiguous subarrays of size k.Example:- Input: []int{1, 3, 2, 6, -1, 4, 1, 8, 2}, k=5  Output: []int{2.2, 2.8, 2.4, 3.6, 2.8}Approach:- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array.Cost:- O(n) time, O(k) space.Link to solution →2. Given an array of positive numbers and a positive number k, find the maximum sum of any contiguous subarray of size k.Example:- Input: int{2, 1, 5, 1, 3, 2}, k=3  Output: 9  Explanation: Subarray with maximum sum is [5, 1, 3].Approach:- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array and update the maximum sum.Cost:- O(n) time and O(1) space.Link to solution →3. Given an array of positive numbers and a positive number s, find the length of the smallest contiguous subarray whose sum is greater than or equal to s.Example:- Input: array=int{2, 1, 5, 2, 3, 2}, s=7  Output: 2  Explanation: Smallest subarray with a sum great than or equal to 7 is [5, 2]  with length=2.Approach:- The difference between the previous problem and this one is that the size of  the sliding window is not fixed.- Can still use the similar strategy to add up elements until their sum is greater  than equal to s and view them as our sliding window.- Shrink the window until the window's sum is smaller than s again while keep  updating the minimum length.Cost:- O(n) time, O(1) space.Link to solution →4. Given a string, find the length of the longest substring in it with no more than k distinct characters.Example:- Input: string=\"araaci\", k=1  Output: 2  Explanation: Longest substring with no more than 1 distinct characters is \"aa\".- Input: string=\"araaci\", k=2  Output: 4  Explanation: Longest substring with no more than 2 distinct characters is \"araa\".- Input: string=\"araaci\", k=3  Output: 5  Explanation: Longest substring with no more than 3 distinct characters is \"araac\".Approach:- Use a hashmap to remember the frequency of each character we have seen.- Insert characters until we have k distinct characters in the map to be consider a  window.- Shrink the window until there is no more k distinct characters in the map and keep  updating the maximum window length at each step.Cost:- O(n) time, O(k) space where k is the number of characters in the map.Link to solution →5. Given an array of characters where each character represents a fruit tree, you are given two baskets and your goal is to put maximum number of fruits in each basket.Constraints:- Each basket can have only one type of fruit.- You can start with any tree, but once you have started you can’t skip a tree.  You will pick one fruit from each tree until you cannot, i.e., you will stop  when you have to pick from a third fruit type.Example:- Input: fruits=[\"apple\", \"orange\", \"coconut\", \"apple\", \"coconut\"]  Output: 3  Explanation: Can put 2 \"cocunut\" in 1 basket and 1 \"apple\" in other from  subarray [\"coconut\", \"apple\", \"coconut\"]Approach:- Similar to \"longest substring with k distinct characters\" with k=2.Cost:- O(n) time, O(k) space where k is the number of characters in the map.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.",
            "content_html": "<h3 id=\"1-given-an-array-find-the-average-of-all-contiguous-subarrays-of-size-k\">1. Given an array, find the average of all contiguous subarrays of size k.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 3, 2, 6, -1, 4, 1, 8, 2}, k=5  Output: []int{2.2, 2.8, 2.4, 3.6, 2.8}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(k) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/avg_subarray_test.go\">Link to solution →</a></p><h3 id=\"2-given-an-array-of-positive-numbers-and-a-positive-number-k-find-the-maximum-sum-of-any-contiguous-subarray-of-size-k\">2. Given an array of positive numbers and a positive number k, find the maximum sum of any contiguous subarray of size k.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: int{2, 1, 5, 1, 3, 2}, k=3  Output: 9  Explanation: Subarray with maximum sum is [5, 1, 3].</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array and update the maximum sum.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/max_subarray_test.go\">Link to solution →</a></p><h3 id=\"3-given-an-array-of-positive-numbers-and-a-positive-number-s-find-the-length-of-the-smallest-contiguous-subarray-whose-sum-is-greater-than-or-equal-to-s\">3. Given an array of positive numbers and a positive number s, find the length of the smallest contiguous subarray whose sum is greater than or equal to s.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: array=int{2, 1, 5, 2, 3, 2}, s=7  Output: 2  Explanation: Smallest subarray with a sum great than or equal to 7 is [5, 2]  with length=2.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The difference between the previous problem and this one is that the size of  the sliding window is not fixed.- Can still use the similar strategy to add up elements until their sum is greater  than equal to s and view them as our sliding window.- Shrink the window until the window's sum is smaller than s again while keep  updating the minimum length.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/valid_palindrome_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-string-find-the-length-of-the-longest-substring-in-it-with-no-more-than-k-distinct-characters\">4. Given a string, find the length of the longest substring in it with no more than k distinct characters.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: string=\"araaci\", k=1  Output: 2  Explanation: Longest substring with no more than 1 distinct characters is \"aa\".- Input: string=\"araaci\", k=2  Output: 4  Explanation: Longest substring with no more than 2 distinct characters is \"araa\".- Input: string=\"araaci\", k=3  Output: 5  Explanation: Longest substring with no more than 3 distinct characters is \"araac\".</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a hashmap to remember the frequency of each character we have seen.- Insert characters until we have k distinct characters in the map to be consider a  window.- Shrink the window until there is no more k distinct characters in the map and keep  updating the maximum window length at each step.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(k) space where k is the number of characters in the map.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/longest_substring_k_distinct_test.go\">Link to solution →</a></p><h3 id=\"5-given-an-array-of-characters-where-each-character-represents-a-fruit-tree-you-are-given-two-baskets-and-your-goal-is-to-put-maximum-number-of-fruits-in-each-basket\">5. Given an array of characters where each character represents a fruit tree, you are given two baskets and your goal is to put maximum number of fruits in each basket.</h3><p>Constraints:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Each basket can have only one type of fruit.- You can start with any tree, but once you have started you can’t skip a tree.  You will pick one fruit from each tree until you cannot, i.e., you will stop  when you have to pick from a third fruit type.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: fruits=[\"apple\", \"orange\", \"coconut\", \"apple\", \"coconut\"]  Output: 3  Explanation: Can put 2 \"cocunut\" in 1 basket and 1 \"apple\" in other from  subarray [\"coconut\", \"apple\", \"coconut\"]</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to \"longest substring with k distinct characters\" with k=2.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(k) space where k is the number of characters in the map.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/fruits_baskets_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote>",
            "url": "https://hoanhan101.github.io/gtci-sliding-window",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-15T00:00:00-05:00",
            "date_modified": "2019-12-15T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}